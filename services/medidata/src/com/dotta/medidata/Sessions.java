/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PostPersist;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Sessions generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`sessions`", uniqueConstraints = {
            @UniqueConstraint(name = "`id_UNIQUE`", columnNames = {"`id`"})})
public class Sessions implements Serializable {

    private Integer id;
    private int userId;
    private Timestamp datetime;
    private Users users;
    private List<SurveyAndTestData> surveyAndTestDatas;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`user_id`", nullable = false, scale = 0, precision = 10)
    public int getUserId() {
        return this.userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    @Column(name = "`datetime`", nullable = false)
    public Timestamp getDatetime() {
        return this.datetime;
    }

    public void setDatetime(Timestamp datetime) {
        this.datetime = datetime;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`user_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_sessions_users1`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.userId = users.getId();
        }

        this.users = users;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "sessions")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<SurveyAndTestData> getSurveyAndTestDatas() {
        return this.surveyAndTestDatas;
    }

    public void setSurveyAndTestDatas(List<SurveyAndTestData> surveyAndTestDatas) {
        this.surveyAndTestDatas = surveyAndTestDatas;
    }

    @PostPersist
    public void onPostPersist() {
        if(surveyAndTestDatas != null) {
            surveyAndTestDatas.forEach(_surveyAndTestData -> _surveyAndTestData.setSessions(this));
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Sessions)) return false;
        final Sessions sessions = (Sessions) o;
        return Objects.equals(getId(), sessions.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}