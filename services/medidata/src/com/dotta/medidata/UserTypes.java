/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PostPersist;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * UserTypes generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`user_types`", uniqueConstraints = {
            @UniqueConstraint(name = "`user_type_id_UNIQUE`", columnNames = {"`id`"})})
public class UserTypes implements Serializable {

    private Integer id;
    private String role;
    private Integer viewRights;
    private Integer updateRights;
    private Integer permanence;
    private BigDecimal reliabilityDefault;
    private List<Users> userses;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`role`", nullable = false, length = 65535)
    public String getRole() {
        return this.role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    @Column(name = "`view_rights`", nullable = true, scale = 0, precision = 10)
    public Integer getViewRights() {
        return this.viewRights;
    }

    public void setViewRights(Integer viewRights) {
        this.viewRights = viewRights;
    }

    @Column(name = "`update_rights`", nullable = true, scale = 0, precision = 10)
    public Integer getUpdateRights() {
        return this.updateRights;
    }

    public void setUpdateRights(Integer updateRights) {
        this.updateRights = updateRights;
    }

    @Column(name = "`permanence`", nullable = true, scale = 0, precision = 10)
    public Integer getPermanence() {
        return this.permanence;
    }

    public void setPermanence(Integer permanence) {
        this.permanence = permanence;
    }

    @Column(name = "`reliability_default`", nullable = true, scale = 9, precision = 22)
    public BigDecimal getReliabilityDefault() {
        return this.reliabilityDefault;
    }

    public void setReliabilityDefault(BigDecimal reliabilityDefault) {
        this.reliabilityDefault = reliabilityDefault;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userTypes")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<Users> getUserses() {
        return this.userses;
    }

    public void setUserses(List<Users> userses) {
        this.userses = userses;
    }

    @PostPersist
    public void onPostPersist() {
        if(userses != null) {
            userses.forEach(_users -> _users.setUserTypes(this));
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof UserTypes)) return false;
        final UserTypes userTypes = (UserTypes) o;
        return Objects.equals(getId(), userTypes.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}