/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * ActionsDiagnoses generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`actions_diagnoses`")
public class ActionsDiagnoses implements Serializable {

    private Integer id;
    private int diagnosisId;
    private int actionId;
    private Diagnoses diagnoses;
    private ActionPlans actionPlans;

    @Id
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`diagnosis_id`", nullable = false, scale = 0, precision = 10)
    public int getDiagnosisId() {
        return this.diagnosisId;
    }

    public void setDiagnosisId(int diagnosisId) {
        this.diagnosisId = diagnosisId;
    }

    @Column(name = "`action_id`", nullable = false, scale = 0, precision = 10)
    public int getActionId() {
        return this.actionId;
    }

    public void setActionId(int actionId) {
        this.actionId = actionId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`diagnosis_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_actions_diagnoses_diagnoses1`"))
    @Fetch(FetchMode.JOIN)
    public Diagnoses getDiagnoses() {
        return this.diagnoses;
    }

    public void setDiagnoses(Diagnoses diagnoses) {
        if(diagnoses != null) {
            this.diagnosisId = diagnoses.getId();
        }

        this.diagnoses = diagnoses;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`action_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_actions_diagnoses_action_plans1`"))
    @Fetch(FetchMode.JOIN)
    public ActionPlans getActionPlans() {
        return this.actionPlans;
    }

    public void setActionPlans(ActionPlans actionPlans) {
        if(actionPlans != null) {
            this.actionId = actionPlans.getId();
        }

        this.actionPlans = actionPlans;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ActionsDiagnoses)) return false;
        final ActionsDiagnoses actionsDiagnoses = (ActionsDiagnoses) o;
        return Objects.equals(getId(), actionsDiagnoses.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}