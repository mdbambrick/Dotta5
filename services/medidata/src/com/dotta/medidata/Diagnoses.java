/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PostPersist;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Diagnoses generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`diagnoses`")
public class Diagnoses implements Serializable {

    private Integer id;
    private int patientId;
    private Integer allergyId;
    private BigDecimal primaryRisk;
    private BigDecimal falsePositiveRisk;
    private BigDecimal severityScore;
    private Integer rank;
    private Integer compositeActionCode;
    private String latestSpecialistComments;
    private Integer latestSpecialistId;
    private Integer status;
    private LocalDateTime date;
    private ProcessStages processStages;
    private Patients patients;
    private List<ActionsDiagnoses> actionsDiagnoseses;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`patient_id`", nullable = false, scale = 0, precision = 10)
    public int getPatientId() {
        return this.patientId;
    }

    public void setPatientId(int patientId) {
        this.patientId = patientId;
    }

    @Column(name = "`allergy_id`", nullable = true, scale = 0, precision = 10)
    public Integer getAllergyId() {
        return this.allergyId;
    }

    public void setAllergyId(Integer allergyId) {
        this.allergyId = allergyId;
    }

    @Column(name = "`primary_risk`", nullable = true, scale = 9, precision = 22)
    public BigDecimal getPrimaryRisk() {
        return this.primaryRisk;
    }

    public void setPrimaryRisk(BigDecimal primaryRisk) {
        this.primaryRisk = primaryRisk;
    }

    @Column(name = "`false_positive_risk`", nullable = true, scale = 9, precision = 22)
    public BigDecimal getFalsePositiveRisk() {
        return this.falsePositiveRisk;
    }

    public void setFalsePositiveRisk(BigDecimal falsePositiveRisk) {
        this.falsePositiveRisk = falsePositiveRisk;
    }

    @Column(name = "`severity_score`", nullable = true, scale = 9, precision = 22)
    public BigDecimal getSeverityScore() {
        return this.severityScore;
    }

    public void setSeverityScore(BigDecimal severityScore) {
        this.severityScore = severityScore;
    }

    @Column(name = "`rank`", nullable = true, scale = 0, precision = 10)
    public Integer getRank() {
        return this.rank;
    }

    public void setRank(Integer rank) {
        this.rank = rank;
    }

    @Column(name = "`composite_action_code`", nullable = true, scale = 0, precision = 10)
    public Integer getCompositeActionCode() {
        return this.compositeActionCode;
    }

    public void setCompositeActionCode(Integer compositeActionCode) {
        this.compositeActionCode = compositeActionCode;
    }

    @Column(name = "`latest_specialist_comments`", nullable = true, length = 65535)
    public String getLatestSpecialistComments() {
        return this.latestSpecialistComments;
    }

    public void setLatestSpecialistComments(String latestSpecialistComments) {
        this.latestSpecialistComments = latestSpecialistComments;
    }

    @Column(name = "`latest_specialist_id`", nullable = true, scale = 0, precision = 10)
    public Integer getLatestSpecialistId() {
        return this.latestSpecialistId;
    }

    public void setLatestSpecialistId(Integer latestSpecialistId) {
        this.latestSpecialistId = latestSpecialistId;
    }

    @Column(name = "`status`", nullable = true, scale = 0, precision = 10)
    public Integer getStatus() {
        return this.status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    @Column(name = "`date`", nullable = true)
    public LocalDateTime getDate() {
        return this.date;
    }

    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`status`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_diagnoses_process_stages1`"))
    @Fetch(FetchMode.JOIN)
    public ProcessStages getProcessStages() {
        return this.processStages;
    }

    public void setProcessStages(ProcessStages processStages) {
        if(processStages != null) {
            this.status = processStages.getId();
        }

        this.processStages = processStages;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`patient_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_diagnoses_patients1`"))
    @Fetch(FetchMode.JOIN)
    public Patients getPatients() {
        return this.patients;
    }

    public void setPatients(Patients patients) {
        if(patients != null) {
            this.patientId = patients.getId();
        }

        this.patients = patients;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "diagnoses")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<ActionsDiagnoses> getActionsDiagnoseses() {
        return this.actionsDiagnoseses;
    }

    public void setActionsDiagnoseses(List<ActionsDiagnoses> actionsDiagnoseses) {
        this.actionsDiagnoseses = actionsDiagnoseses;
    }

    @PostPersist
    public void onPostPersist() {
        if(actionsDiagnoseses != null) {
            actionsDiagnoseses.forEach(_actionsDiagnoses -> _actionsDiagnoses.setDiagnoses(this));
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Diagnoses)) return false;
        final Diagnoses diagnoses = (Diagnoses) o;
        return Objects.equals(getId(), diagnoses.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}