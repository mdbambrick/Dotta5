/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * AllergyCategory generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`allergy_category`")
public class AllergyCategory implements Serializable {

    private Integer id;
    private int allergyClass;
    private String title;
    private String commonName;
    private String notes;
    private AllergyClass allergyClassByAllergyClass;
    private List<Allergies> allergieses;

    @Id
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`allergy_class`", nullable = false, scale = 0, precision = 10)
    public int getAllergyClass() {
        return this.allergyClass;
    }

    public void setAllergyClass(int allergyClass) {
        this.allergyClass = allergyClass;
    }

    @Column(name = "`title`", nullable = false, length = 65535)
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @Column(name = "`common_name`", nullable = true, length = 65535)
    public String getCommonName() {
        return this.commonName;
    }

    public void setCommonName(String commonName) {
        this.commonName = commonName;
    }

    @Column(name = "`notes`", nullable = true, length = 65535)
    public String getNotes() {
        return this.notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`allergy_class`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_allergy_category_allergy_class1`"))
    @Fetch(FetchMode.JOIN)
    public AllergyClass getAllergyClassByAllergyClass() {
        return this.allergyClassByAllergyClass;
    }

    public void setAllergyClassByAllergyClass(AllergyClass allergyClassByAllergyClass) {
        if(allergyClassByAllergyClass != null) {
            this.allergyClass = allergyClassByAllergyClass.getId();
        }

        this.allergyClassByAllergyClass = allergyClassByAllergyClass;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "allergyCategoryByAllergyCategory")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<Allergies> getAllergieses() {
        return this.allergieses;
    }

    public void setAllergieses(List<Allergies> allergieses) {
        this.allergieses = allergieses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AllergyCategory)) return false;
        final AllergyCategory allergyCategory = (AllergyCategory) o;
        return Objects.equals(getId(), allergyCategory.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}