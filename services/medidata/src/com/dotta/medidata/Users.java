/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PostPersist;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Users generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`users`", uniqueConstraints = {
            @UniqueConstraint(name = "`email_UNIQUE`", columnNames = {"`email`"}),
            @UniqueConstraint(name = "`username_UNIQUE`", columnNames = {"`username`"}),
            @UniqueConstraint(name = "`sharing_code_UNIQUE`", columnNames = {"`sharing_code`"}),
            @UniqueConstraint(name = "`user_id_UNIQUE`", columnNames = {"`id`"})})
public class Users implements Serializable {

    private Integer id;
    private String username;
    private String title;
    private String firstName;
    private String lastName;
    private String password;
    private String email;
    private String salt;
    private int userType;
    private Integer active;
    private int sharingCode;
    private UserTypes userTypes;
    private List<Sessions> sessionses;
    private List<UsersPatients> usersPatientses;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`username`", nullable = false, length = 45)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "`title`", nullable = true, length = 65535)
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @Column(name = "`first_name`", nullable = false, length = 65535)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "`last_name`", nullable = false, length = 65535)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "`password`", nullable = false, length = 2147483647)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "`email`", nullable = false, length = 45)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "`salt`", nullable = true, length = 2147483647)
    public String getSalt() {
        return this.salt;
    }

    public void setSalt(String salt) {
        this.salt = salt;
    }

    @Column(name = "`user_type`", nullable = false, scale = 0, precision = 10)
    public int getUserType() {
        return this.userType;
    }

    public void setUserType(int userType) {
        this.userType = userType;
    }

    @Column(name = "`active`", nullable = true, scale = 0, precision = 10)
    public Integer getActive() {
        return this.active;
    }

    public void setActive(Integer active) {
        this.active = active;
    }

    @Column(name = "`sharing_code`", nullable = false, scale = 0, precision = 10)
    public int getSharingCode() {
        return this.sharingCode;
    }

    public void setSharingCode(int sharingCode) {
        this.sharingCode = sharingCode;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`user_type`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_users_user_types1`"))
    @Fetch(FetchMode.JOIN)
    public UserTypes getUserTypes() {
        return this.userTypes;
    }

    public void setUserTypes(UserTypes userTypes) {
        if(userTypes != null) {
            this.userType = userTypes.getId();
        }

        this.userTypes = userTypes;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<Sessions> getSessionses() {
        return this.sessionses;
    }

    public void setSessionses(List<Sessions> sessionses) {
        this.sessionses = sessionses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<UsersPatients> getUsersPatientses() {
        return this.usersPatientses;
    }

    public void setUsersPatientses(List<UsersPatients> usersPatientses) {
        this.usersPatientses = usersPatientses;
    }

    @PostPersist
    public void onPostPersist() {
        if(sessionses != null) {
            sessionses.forEach(_sessions -> _sessions.setUsers(this));
        }
        if(usersPatientses != null) {
            usersPatientses.forEach(_usersPatients -> _usersPatients.setUsers(this));
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Users)) return false;
        final Users users = (Users) o;
        return Objects.equals(getId(), users.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}