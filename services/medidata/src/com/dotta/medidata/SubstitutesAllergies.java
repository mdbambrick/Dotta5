/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * SubstitutesAllergies generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`substitutes_allergies`")
public class SubstitutesAllergies implements Serializable {

    private Integer id;
    private int substituteId;
    private int allergyId;
    private Substitutes substitutes;
    private Allergies allergies;

    @Id
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`substitute_id`", nullable = false, scale = 0, precision = 10)
    public int getSubstituteId() {
        return this.substituteId;
    }

    public void setSubstituteId(int substituteId) {
        this.substituteId = substituteId;
    }

    @Column(name = "`allergy_id`", nullable = false, scale = 0, precision = 10)
    public int getAllergyId() {
        return this.allergyId;
    }

    public void setAllergyId(int allergyId) {
        this.allergyId = allergyId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`substitute_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_substitutes_allergies_substitutes1`"))
    @Fetch(FetchMode.JOIN)
    public Substitutes getSubstitutes() {
        return this.substitutes;
    }

    public void setSubstitutes(Substitutes substitutes) {
        if(substitutes != null) {
            this.substituteId = substitutes.getId();
        }

        this.substitutes = substitutes;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`allergy_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_substitutes_allergies_allergies1`"))
    @Fetch(FetchMode.JOIN)
    public Allergies getAllergies() {
        return this.allergies;
    }

    public void setAllergies(Allergies allergies) {
        if(allergies != null) {
            this.allergyId = allergies.getId();
        }

        this.allergies = allergies;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SubstitutesAllergies)) return false;
        final SubstitutesAllergies substitutesAllergies = (SubstitutesAllergies) o;
        return Objects.equals(getId(), substitutesAllergies.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}