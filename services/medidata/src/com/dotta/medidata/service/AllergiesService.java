/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Allergies;
import com.dotta.medidata.CompoundsAllergies;
import com.dotta.medidata.SubstitutesAllergies;
import com.dotta.medidata.SurveyAndTestData;
import com.dotta.medidata.SynonymAllergies;

/**
 * Service object for domain model class {@link Allergies}.
 */
public interface AllergiesService {

    /**
     * Creates a new Allergies. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Allergies if any.
     *
     * @param allergies Details of the Allergies to be created; value cannot be null.
     * @return The newly created Allergies.
     */
    Allergies create(@Valid Allergies allergies);


	/**
     * Returns Allergies by given id if exists.
     *
     * @param allergiesId The id of the Allergies to get; value cannot be null.
     * @return Allergies associated with the given allergiesId.
	 * @throws EntityNotFoundException If no Allergies is found.
     */
    Allergies getById(Integer allergiesId);

    /**
     * Find and return the Allergies by given id if exists, returns null otherwise.
     *
     * @param allergiesId The id of the Allergies to get; value cannot be null.
     * @return Allergies associated with the given allergiesId.
     */
    Allergies findById(Integer allergiesId);

	/**
     * Find and return the list of Allergies by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param allergiesIds The id's of the Allergies to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Allergies associated with the given allergiesIds.
     */
    List<Allergies> findByMultipleIds(List<Integer> allergiesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Allergies. It replaces all fields of the existing Allergies with the given allergies.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Allergies if any.
     *
     * @param allergies The details of the Allergies to be updated; value cannot be null.
     * @return The updated Allergies.
     * @throws EntityNotFoundException if no Allergies is found with given input.
     */
    Allergies update(@Valid Allergies allergies);

    /**
     * Deletes an existing Allergies with the given id.
     *
     * @param allergiesId The id of the Allergies to be deleted; value cannot be null.
     * @return The deleted Allergies.
     * @throws EntityNotFoundException if no Allergies found with the given id.
     */
    Allergies delete(Integer allergiesId);

    /**
     * Deletes an existing Allergies with the given object.
     *
     * @param allergies The instance of the Allergies to be deleted; value cannot be null.
     */
    void delete(Allergies allergies);

    /**
     * Find all Allergies matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Allergies.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Allergies> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Allergies matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Allergies.
     *
     * @see Pageable
     * @see Page
     */
    Page<Allergies> findAll(String query, Pageable pageable);

    /**
     * Exports all Allergies matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Allergies matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Allergies in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Allergies.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated compoundsAllergieses for given Allergies id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CompoundsAllergies instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CompoundsAllergies> findAssociatedCompoundsAllergieses(Integer id, Pageable pageable);

    /*
     * Returns the associated substitutesAllergieses for given Allergies id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SubstitutesAllergies instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SubstitutesAllergies> findAssociatedSubstitutesAllergieses(Integer id, Pageable pageable);

    /*
     * Returns the associated surveyAndTestDatas for given Allergies id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SurveyAndTestData instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SurveyAndTestData> findAssociatedSurveyAndTestDatas(Integer id, Pageable pageable);

    /*
     * Returns the associated synonymAllergieses for given Allergies id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SynonymAllergies instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SynonymAllergies> findAssociatedSynonymAllergieses(Integer id, Pageable pageable);

}