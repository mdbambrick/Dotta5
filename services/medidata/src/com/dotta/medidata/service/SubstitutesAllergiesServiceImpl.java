/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.SubstitutesAllergies;


/**
 * ServiceImpl object for domain model class SubstitutesAllergies.
 *
 * @see SubstitutesAllergies
 */
@Service("medidata.SubstitutesAllergiesService")
@Validated
public class SubstitutesAllergiesServiceImpl implements SubstitutesAllergiesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubstitutesAllergiesServiceImpl.class);


    @Autowired
    @Qualifier("medidata.SubstitutesAllergiesDao")
    private WMGenericDao<SubstitutesAllergies, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SubstitutesAllergies, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public SubstitutesAllergies create(SubstitutesAllergies substitutesAllergies) {
        LOGGER.debug("Creating a new SubstitutesAllergies with information: {}", substitutesAllergies);

        SubstitutesAllergies substitutesAllergiesCreated = this.wmGenericDao.create(substitutesAllergies);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(substitutesAllergiesCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public SubstitutesAllergies getById(Integer substitutesallergiesId) {
        LOGGER.debug("Finding SubstitutesAllergies by id: {}", substitutesallergiesId);
        return this.wmGenericDao.findById(substitutesallergiesId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public SubstitutesAllergies findById(Integer substitutesallergiesId) {
        LOGGER.debug("Finding SubstitutesAllergies by id: {}", substitutesallergiesId);
        try {
            return this.wmGenericDao.findById(substitutesallergiesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SubstitutesAllergies found with id: {}", substitutesallergiesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<SubstitutesAllergies> findByMultipleIds(List<Integer> substitutesallergiesIds, boolean orderedReturn) {
        LOGGER.debug("Finding SubstitutesAllergies by ids: {}", substitutesallergiesIds);

        return this.wmGenericDao.findByMultipleIds(substitutesallergiesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public SubstitutesAllergies update(SubstitutesAllergies substitutesAllergies) {
        LOGGER.debug("Updating SubstitutesAllergies with information: {}", substitutesAllergies);

        this.wmGenericDao.update(substitutesAllergies);
        this.wmGenericDao.refresh(substitutesAllergies);

        return substitutesAllergies;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public SubstitutesAllergies delete(Integer substitutesallergiesId) {
        LOGGER.debug("Deleting SubstitutesAllergies with id: {}", substitutesallergiesId);
        SubstitutesAllergies deleted = this.wmGenericDao.findById(substitutesallergiesId);
        if (deleted == null) {
            LOGGER.debug("No SubstitutesAllergies found with id: {}", substitutesallergiesId);
            throw new EntityNotFoundException(String.valueOf(substitutesallergiesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(SubstitutesAllergies substitutesAllergies) {
        LOGGER.debug("Deleting SubstitutesAllergies with {}", substitutesAllergies);
        this.wmGenericDao.delete(substitutesAllergies);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SubstitutesAllergies> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SubstitutesAllergies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SubstitutesAllergies> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SubstitutesAllergies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table SubstitutesAllergies to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table SubstitutesAllergies to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}