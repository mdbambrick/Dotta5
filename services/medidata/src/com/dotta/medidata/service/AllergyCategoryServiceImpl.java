/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Allergies;
import com.dotta.medidata.AllergyCategory;


/**
 * ServiceImpl object for domain model class AllergyCategory.
 *
 * @see AllergyCategory
 */
@Service("medidata.AllergyCategoryService")
@Validated
public class AllergyCategoryServiceImpl implements AllergyCategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllergyCategoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.AllergiesService")
    private AllergiesService allergiesService;

    @Autowired
    @Qualifier("medidata.AllergyCategoryDao")
    private WMGenericDao<AllergyCategory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllergyCategory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public AllergyCategory create(AllergyCategory allergyCategory) {
        LOGGER.debug("Creating a new AllergyCategory with information: {}", allergyCategory);

        List<Allergies> allergieses = allergyCategory.getAllergieses();
        if(allergieses != null && Hibernate.isInitialized(allergieses)) {
            allergieses.forEach(_allergies -> _allergies.setAllergyCategoryByAllergyCategory(allergyCategory));
        }

        AllergyCategory allergyCategoryCreated = this.wmGenericDao.create(allergyCategory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(allergyCategoryCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public AllergyCategory getById(Integer allergycategoryId) {
        LOGGER.debug("Finding AllergyCategory by id: {}", allergycategoryId);
        return this.wmGenericDao.findById(allergycategoryId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public AllergyCategory findById(Integer allergycategoryId) {
        LOGGER.debug("Finding AllergyCategory by id: {}", allergycategoryId);
        try {
            return this.wmGenericDao.findById(allergycategoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AllergyCategory found with id: {}", allergycategoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<AllergyCategory> findByMultipleIds(List<Integer> allergycategoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding AllergyCategories by ids: {}", allergycategoryIds);

        return this.wmGenericDao.findByMultipleIds(allergycategoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public AllergyCategory update(AllergyCategory allergyCategory) {
        LOGGER.debug("Updating AllergyCategory with information: {}", allergyCategory);

        List<Allergies> allergieses = allergyCategory.getAllergieses();
        if(allergieses != null && Hibernate.isInitialized(allergieses)) {
            allergieses.forEach(_allergies -> _allergies.setAllergyCategoryByAllergyCategory(allergyCategory));
        }

        this.wmGenericDao.update(allergyCategory);
        this.wmGenericDao.refresh(allergyCategory);

        // Deleting children which are not present in the list.
        if(allergieses != null && Hibernate.isInitialized(allergieses) && !allergieses.isEmpty()) {
            List<Allergies> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Allergies.class,
                        new DaoUtils.ChildrenFilter<>("allergyCategoryByAllergyCategory", allergyCategory, allergieses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_allergies -> allergiesService.delete(_allergies));
            allergyCategory.setAllergieses(allergieses);
        }

        return allergyCategory;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public AllergyCategory delete(Integer allergycategoryId) {
        LOGGER.debug("Deleting AllergyCategory with id: {}", allergycategoryId);
        AllergyCategory deleted = this.wmGenericDao.findById(allergycategoryId);
        if (deleted == null) {
            LOGGER.debug("No AllergyCategory found with id: {}", allergycategoryId);
            throw new EntityNotFoundException(String.valueOf(allergycategoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(AllergyCategory allergyCategory) {
        LOGGER.debug("Deleting AllergyCategory with {}", allergyCategory);
        this.wmGenericDao.delete(allergyCategory);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<AllergyCategory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllergyCategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<AllergyCategory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllergyCategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table AllergyCategory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table AllergyCategory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Allergies> findAssociatedAllergieses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated allergieses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("allergyCategoryByAllergyCategory.id = '" + id + "'");

        return allergiesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AllergiesService instance
     */
    protected void setAllergiesService(AllergiesService service) {
        this.allergiesService = service;
    }

}