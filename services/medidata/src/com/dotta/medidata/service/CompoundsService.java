/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Compounds;
import com.dotta.medidata.CompoundsAllergies;

/**
 * Service object for domain model class {@link Compounds}.
 */
public interface CompoundsService {

    /**
     * Creates a new Compounds. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Compounds if any.
     *
     * @param compounds Details of the Compounds to be created; value cannot be null.
     * @return The newly created Compounds.
     */
    Compounds create(@Valid Compounds compounds);


	/**
     * Returns Compounds by given id if exists.
     *
     * @param compoundsId The id of the Compounds to get; value cannot be null.
     * @return Compounds associated with the given compoundsId.
	 * @throws EntityNotFoundException If no Compounds is found.
     */
    Compounds getById(Integer compoundsId);

    /**
     * Find and return the Compounds by given id if exists, returns null otherwise.
     *
     * @param compoundsId The id of the Compounds to get; value cannot be null.
     * @return Compounds associated with the given compoundsId.
     */
    Compounds findById(Integer compoundsId);

	/**
     * Find and return the list of Compounds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param compoundsIds The id's of the Compounds to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Compounds associated with the given compoundsIds.
     */
    List<Compounds> findByMultipleIds(List<Integer> compoundsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Compounds. It replaces all fields of the existing Compounds with the given compounds.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Compounds if any.
     *
     * @param compounds The details of the Compounds to be updated; value cannot be null.
     * @return The updated Compounds.
     * @throws EntityNotFoundException if no Compounds is found with given input.
     */
    Compounds update(@Valid Compounds compounds);

    /**
     * Deletes an existing Compounds with the given id.
     *
     * @param compoundsId The id of the Compounds to be deleted; value cannot be null.
     * @return The deleted Compounds.
     * @throws EntityNotFoundException if no Compounds found with the given id.
     */
    Compounds delete(Integer compoundsId);

    /**
     * Deletes an existing Compounds with the given object.
     *
     * @param compounds The instance of the Compounds to be deleted; value cannot be null.
     */
    void delete(Compounds compounds);

    /**
     * Find all Compounds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Compounds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Compounds> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Compounds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Compounds.
     *
     * @see Pageable
     * @see Page
     */
    Page<Compounds> findAll(String query, Pageable pageable);

    /**
     * Exports all Compounds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Compounds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Compounds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Compounds.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated compoundsAllergieses for given Compounds id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CompoundsAllergies instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CompoundsAllergies> findAssociatedCompoundsAllergieses(Integer id, Pageable pageable);

}