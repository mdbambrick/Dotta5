/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Allergies;
import com.dotta.medidata.AllergySets;


/**
 * ServiceImpl object for domain model class AllergySets.
 *
 * @see AllergySets
 */
@Service("medidata.AllergySetsService")
@Validated
public class AllergySetsServiceImpl implements AllergySetsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllergySetsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.AllergiesService")
    private AllergiesService allergiesService;

    @Autowired
    @Qualifier("medidata.AllergySetsDao")
    private WMGenericDao<AllergySets, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllergySets, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public AllergySets create(AllergySets allergySets) {
        LOGGER.debug("Creating a new AllergySets with information: {}", allergySets);

        List<Allergies> allergieses = allergySets.getAllergieses();
        if(allergieses != null && Hibernate.isInitialized(allergieses)) {
            allergieses.forEach(_allergies -> _allergies.setAllergySets(allergySets));
        }

        AllergySets allergySetsCreated = this.wmGenericDao.create(allergySets);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(allergySetsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public AllergySets getById(Integer allergysetsId) {
        LOGGER.debug("Finding AllergySets by id: {}", allergysetsId);
        return this.wmGenericDao.findById(allergysetsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public AllergySets findById(Integer allergysetsId) {
        LOGGER.debug("Finding AllergySets by id: {}", allergysetsId);
        try {
            return this.wmGenericDao.findById(allergysetsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AllergySets found with id: {}", allergysetsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<AllergySets> findByMultipleIds(List<Integer> allergysetsIds, boolean orderedReturn) {
        LOGGER.debug("Finding AllergySets by ids: {}", allergysetsIds);

        return this.wmGenericDao.findByMultipleIds(allergysetsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public AllergySets update(AllergySets allergySets) {
        LOGGER.debug("Updating AllergySets with information: {}", allergySets);

        List<Allergies> allergieses = allergySets.getAllergieses();
        if(allergieses != null && Hibernate.isInitialized(allergieses)) {
            allergieses.forEach(_allergies -> _allergies.setAllergySets(allergySets));
        }

        this.wmGenericDao.update(allergySets);
        this.wmGenericDao.refresh(allergySets);

        // Deleting children which are not present in the list.
        if(allergieses != null && Hibernate.isInitialized(allergieses) && !allergieses.isEmpty()) {
            List<Allergies> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Allergies.class,
                        new DaoUtils.ChildrenFilter<>("allergySets", allergySets, allergieses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_allergies -> allergiesService.delete(_allergies));
            allergySets.setAllergieses(allergieses);
        }

        return allergySets;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public AllergySets delete(Integer allergysetsId) {
        LOGGER.debug("Deleting AllergySets with id: {}", allergysetsId);
        AllergySets deleted = this.wmGenericDao.findById(allergysetsId);
        if (deleted == null) {
            LOGGER.debug("No AllergySets found with id: {}", allergysetsId);
            throw new EntityNotFoundException(String.valueOf(allergysetsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(AllergySets allergySets) {
        LOGGER.debug("Deleting AllergySets with {}", allergySets);
        this.wmGenericDao.delete(allergySets);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<AllergySets> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllergySets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<AllergySets> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllergySets");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table AllergySets to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table AllergySets to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Allergies> findAssociatedAllergieses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated allergieses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("allergySets.id = '" + id + "'");

        return allergiesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AllergiesService instance
     */
    protected void setAllergiesService(AllergiesService service) {
        this.allergiesService = service;
    }

}