/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Substitutes;
import com.dotta.medidata.SubstitutesAllergies;


/**
 * ServiceImpl object for domain model class Substitutes.
 *
 * @see Substitutes
 */
@Service("medidata.SubstitutesService")
@Validated
public class SubstitutesServiceImpl implements SubstitutesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubstitutesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.SubstitutesAllergiesService")
    private SubstitutesAllergiesService substitutesAllergiesService;

    @Autowired
    @Qualifier("medidata.SubstitutesDao")
    private WMGenericDao<Substitutes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Substitutes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Substitutes create(Substitutes substitutes) {
        LOGGER.debug("Creating a new Substitutes with information: {}", substitutes);

        List<SubstitutesAllergies> substitutesAllergieses = substitutes.getSubstitutesAllergieses();
        if(substitutesAllergieses != null && Hibernate.isInitialized(substitutesAllergieses)) {
            substitutesAllergieses.forEach(_substitutesAllergies -> _substitutesAllergies.setSubstitutes(substitutes));
        }

        Substitutes substitutesCreated = this.wmGenericDao.create(substitutes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(substitutesCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Substitutes getById(Integer substitutesId) {
        LOGGER.debug("Finding Substitutes by id: {}", substitutesId);
        return this.wmGenericDao.findById(substitutesId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Substitutes findById(Integer substitutesId) {
        LOGGER.debug("Finding Substitutes by id: {}", substitutesId);
        try {
            return this.wmGenericDao.findById(substitutesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Substitutes found with id: {}", substitutesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<Substitutes> findByMultipleIds(List<Integer> substitutesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Substitutes by ids: {}", substitutesIds);

        return this.wmGenericDao.findByMultipleIds(substitutesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public Substitutes update(Substitutes substitutes) {
        LOGGER.debug("Updating Substitutes with information: {}", substitutes);

        List<SubstitutesAllergies> substitutesAllergieses = substitutes.getSubstitutesAllergieses();
        if(substitutesAllergieses != null && Hibernate.isInitialized(substitutesAllergieses)) {
            substitutesAllergieses.forEach(_substitutesAllergies -> _substitutesAllergies.setSubstitutes(substitutes));
        }

        this.wmGenericDao.update(substitutes);
        this.wmGenericDao.refresh(substitutes);

        // Deleting children which are not present in the list.
        if(substitutesAllergieses != null && Hibernate.isInitialized(substitutesAllergieses) && !substitutesAllergieses.isEmpty()) {
            List<SubstitutesAllergies> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, SubstitutesAllergies.class,
                        new DaoUtils.ChildrenFilter<>("substitutes", substitutes, substitutesAllergieses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_substitutesAllergies -> substitutesAllergiesService.delete(_substitutesAllergies));
            substitutes.setSubstitutesAllergieses(substitutesAllergieses);
        }

        return substitutes;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Substitutes delete(Integer substitutesId) {
        LOGGER.debug("Deleting Substitutes with id: {}", substitutesId);
        Substitutes deleted = this.wmGenericDao.findById(substitutesId);
        if (deleted == null) {
            LOGGER.debug("No Substitutes found with id: {}", substitutesId);
            throw new EntityNotFoundException(String.valueOf(substitutesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(Substitutes substitutes) {
        LOGGER.debug("Deleting Substitutes with {}", substitutes);
        this.wmGenericDao.delete(substitutes);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Substitutes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Substitutes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Substitutes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Substitutes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table Substitutes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table Substitutes to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SubstitutesAllergies> findAssociatedSubstitutesAllergieses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated substitutesAllergieses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("substitutes.id = '" + id + "'");

        return substitutesAllergiesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SubstitutesAllergiesService instance
     */
    protected void setSubstitutesAllergiesService(SubstitutesAllergiesService service) {
        this.substitutesAllergiesService = service;
    }

}