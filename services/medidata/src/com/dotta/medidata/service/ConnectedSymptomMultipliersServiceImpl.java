/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.ConnectedSymptomMultipliers;


/**
 * ServiceImpl object for domain model class ConnectedSymptomMultipliers.
 *
 * @see ConnectedSymptomMultipliers
 */
@Service("medidata.ConnectedSymptomMultipliersService")
@Validated
public class ConnectedSymptomMultipliersServiceImpl implements ConnectedSymptomMultipliersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectedSymptomMultipliersServiceImpl.class);


    @Autowired
    @Qualifier("medidata.ConnectedSymptomMultipliersDao")
    private WMGenericDao<ConnectedSymptomMultipliers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ConnectedSymptomMultipliers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomMultipliers create(ConnectedSymptomMultipliers connectedSymptomMultipliers) {
        LOGGER.debug("Creating a new ConnectedSymptomMultipliers with information: {}", connectedSymptomMultipliers);

        ConnectedSymptomMultipliers connectedSymptomMultipliersCreated = this.wmGenericDao.create(connectedSymptomMultipliers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(connectedSymptomMultipliersCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomMultipliers getById(Integer connectedsymptommultipliersId) {
        LOGGER.debug("Finding ConnectedSymptomMultipliers by id: {}", connectedsymptommultipliersId);
        return this.wmGenericDao.findById(connectedsymptommultipliersId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomMultipliers findById(Integer connectedsymptommultipliersId) {
        LOGGER.debug("Finding ConnectedSymptomMultipliers by id: {}", connectedsymptommultipliersId);
        try {
            return this.wmGenericDao.findById(connectedsymptommultipliersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ConnectedSymptomMultipliers found with id: {}", connectedsymptommultipliersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<ConnectedSymptomMultipliers> findByMultipleIds(List<Integer> connectedsymptommultipliersIds, boolean orderedReturn) {
        LOGGER.debug("Finding ConnectedSymptomMultipliers by ids: {}", connectedsymptommultipliersIds);

        return this.wmGenericDao.findByMultipleIds(connectedsymptommultipliersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomMultipliers update(ConnectedSymptomMultipliers connectedSymptomMultipliers) {
        LOGGER.debug("Updating ConnectedSymptomMultipliers with information: {}", connectedSymptomMultipliers);

        this.wmGenericDao.update(connectedSymptomMultipliers);
        this.wmGenericDao.refresh(connectedSymptomMultipliers);

        return connectedSymptomMultipliers;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomMultipliers delete(Integer connectedsymptommultipliersId) {
        LOGGER.debug("Deleting ConnectedSymptomMultipliers with id: {}", connectedsymptommultipliersId);
        ConnectedSymptomMultipliers deleted = this.wmGenericDao.findById(connectedsymptommultipliersId);
        if (deleted == null) {
            LOGGER.debug("No ConnectedSymptomMultipliers found with id: {}", connectedsymptommultipliersId);
            throw new EntityNotFoundException(String.valueOf(connectedsymptommultipliersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(ConnectedSymptomMultipliers connectedSymptomMultipliers) {
        LOGGER.debug("Deleting ConnectedSymptomMultipliers with {}", connectedSymptomMultipliers);
        this.wmGenericDao.delete(connectedSymptomMultipliers);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ConnectedSymptomMultipliers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ConnectedSymptomMultipliers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ConnectedSymptomMultipliers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ConnectedSymptomMultipliers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table ConnectedSymptomMultipliers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table ConnectedSymptomMultipliers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}