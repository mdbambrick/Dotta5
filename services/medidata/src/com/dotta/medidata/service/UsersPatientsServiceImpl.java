/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.UsersPatients;


/**
 * ServiceImpl object for domain model class UsersPatients.
 *
 * @see UsersPatients
 */
@Service("medidata.UsersPatientsService")
@Validated
public class UsersPatientsServiceImpl implements UsersPatientsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersPatientsServiceImpl.class);


    @Autowired
    @Qualifier("medidata.UsersPatientsDao")
    private WMGenericDao<UsersPatients, Long> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UsersPatients, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public UsersPatients create(UsersPatients usersPatients) {
        LOGGER.debug("Creating a new UsersPatients with information: {}", usersPatients);

        UsersPatients usersPatientsCreated = this.wmGenericDao.create(usersPatients);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(usersPatientsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public UsersPatients getById(Long userspatientsId) {
        LOGGER.debug("Finding UsersPatients by id: {}", userspatientsId);
        return this.wmGenericDao.findById(userspatientsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public UsersPatients findById(Long userspatientsId) {
        LOGGER.debug("Finding UsersPatients by id: {}", userspatientsId);
        try {
            return this.wmGenericDao.findById(userspatientsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UsersPatients found with id: {}", userspatientsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<UsersPatients> findByMultipleIds(List<Long> userspatientsIds, boolean orderedReturn) {
        LOGGER.debug("Finding UsersPatients by ids: {}", userspatientsIds);

        return this.wmGenericDao.findByMultipleIds(userspatientsIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public UsersPatients getByUniqueKeyId(long id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding UsersPatients by unique keys: {}", uniqueKeyIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public UsersPatients update(UsersPatients usersPatients) {
        LOGGER.debug("Updating UsersPatients with information: {}", usersPatients);

        this.wmGenericDao.update(usersPatients);
        this.wmGenericDao.refresh(usersPatients);

        return usersPatients;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public UsersPatients delete(Long userspatientsId) {
        LOGGER.debug("Deleting UsersPatients with id: {}", userspatientsId);
        UsersPatients deleted = this.wmGenericDao.findById(userspatientsId);
        if (deleted == null) {
            LOGGER.debug("No UsersPatients found with id: {}", userspatientsId);
            throw new EntityNotFoundException(String.valueOf(userspatientsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(UsersPatients usersPatients) {
        LOGGER.debug("Deleting UsersPatients with {}", usersPatients);
        this.wmGenericDao.delete(usersPatients);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<UsersPatients> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UsersPatients");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<UsersPatients> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UsersPatients");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table UsersPatients to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table UsersPatients to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}