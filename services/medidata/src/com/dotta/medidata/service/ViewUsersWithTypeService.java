/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.ViewUsersWithType;
import com.dotta.medidata.ViewUsersWithTypeId;

/**
 * Service object for domain model class {@link ViewUsersWithType}.
 */
public interface ViewUsersWithTypeService {

    /**
     * Creates a new ViewUsersWithType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ViewUsersWithType if any.
     *
     * @param viewUsersWithType Details of the ViewUsersWithType to be created; value cannot be null.
     * @return The newly created ViewUsersWithType.
     */
    ViewUsersWithType create(@Valid ViewUsersWithType viewUsersWithType);


	/**
     * Returns ViewUsersWithType by given id if exists.
     *
     * @param viewuserswithtypeId The id of the ViewUsersWithType to get; value cannot be null.
     * @return ViewUsersWithType associated with the given viewuserswithtypeId.
	 * @throws EntityNotFoundException If no ViewUsersWithType is found.
     */
    ViewUsersWithType getById(ViewUsersWithTypeId viewuserswithtypeId);

    /**
     * Find and return the ViewUsersWithType by given id if exists, returns null otherwise.
     *
     * @param viewuserswithtypeId The id of the ViewUsersWithType to get; value cannot be null.
     * @return ViewUsersWithType associated with the given viewuserswithtypeId.
     */
    ViewUsersWithType findById(ViewUsersWithTypeId viewuserswithtypeId);

	/**
     * Find and return the list of ViewUsersWithTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param viewuserswithtypeIds The id's of the ViewUsersWithType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return ViewUsersWithTypes associated with the given viewuserswithtypeIds.
     */
    List<ViewUsersWithType> findByMultipleIds(List<ViewUsersWithTypeId> viewuserswithtypeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing ViewUsersWithType. It replaces all fields of the existing ViewUsersWithType with the given viewUsersWithType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ViewUsersWithType if any.
     *
     * @param viewUsersWithType The details of the ViewUsersWithType to be updated; value cannot be null.
     * @return The updated ViewUsersWithType.
     * @throws EntityNotFoundException if no ViewUsersWithType is found with given input.
     */
    ViewUsersWithType update(@Valid ViewUsersWithType viewUsersWithType);

    /**
     * Deletes an existing ViewUsersWithType with the given id.
     *
     * @param viewuserswithtypeId The id of the ViewUsersWithType to be deleted; value cannot be null.
     * @return The deleted ViewUsersWithType.
     * @throws EntityNotFoundException if no ViewUsersWithType found with the given id.
     */
    ViewUsersWithType delete(ViewUsersWithTypeId viewuserswithtypeId);

    /**
     * Deletes an existing ViewUsersWithType with the given object.
     *
     * @param viewUsersWithType The instance of the ViewUsersWithType to be deleted; value cannot be null.
     */
    void delete(ViewUsersWithType viewUsersWithType);

    /**
     * Find all ViewUsersWithTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ViewUsersWithTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<ViewUsersWithType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all ViewUsersWithTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ViewUsersWithTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<ViewUsersWithType> findAll(String query, Pageable pageable);

    /**
     * Exports all ViewUsersWithTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all ViewUsersWithTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the ViewUsersWithTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the ViewUsersWithType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}