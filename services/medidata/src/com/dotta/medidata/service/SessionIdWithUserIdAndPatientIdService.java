/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.SessionIdWithUserIdAndPatientId;
import com.dotta.medidata.SessionIdWithUserIdAndPatientIdId;

/**
 * Service object for domain model class {@link SessionIdWithUserIdAndPatientId}.
 */
public interface SessionIdWithUserIdAndPatientIdService {

    /**
     * Creates a new SessionIdWithUserIdAndPatientId. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SessionIdWithUserIdAndPatientId if any.
     *
     * @param sessionIdWithUserIdAndPatientId Details of the SessionIdWithUserIdAndPatientId to be created; value cannot be null.
     * @return The newly created SessionIdWithUserIdAndPatientId.
     */
    SessionIdWithUserIdAndPatientId create(@Valid SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId);


	/**
     * Returns SessionIdWithUserIdAndPatientId by given id if exists.
     *
     * @param sessionidwithuseridandpatientidId The id of the SessionIdWithUserIdAndPatientId to get; value cannot be null.
     * @return SessionIdWithUserIdAndPatientId associated with the given sessionidwithuseridandpatientidId.
	 * @throws EntityNotFoundException If no SessionIdWithUserIdAndPatientId is found.
     */
    SessionIdWithUserIdAndPatientId getById(SessionIdWithUserIdAndPatientIdId sessionidwithuseridandpatientidId);

    /**
     * Find and return the SessionIdWithUserIdAndPatientId by given id if exists, returns null otherwise.
     *
     * @param sessionidwithuseridandpatientidId The id of the SessionIdWithUserIdAndPatientId to get; value cannot be null.
     * @return SessionIdWithUserIdAndPatientId associated with the given sessionidwithuseridandpatientidId.
     */
    SessionIdWithUserIdAndPatientId findById(SessionIdWithUserIdAndPatientIdId sessionidwithuseridandpatientidId);

	/**
     * Find and return the list of SessionIdWithUserIdAndPatientIds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param sessionidwithuseridandpatientidIds The id's of the SessionIdWithUserIdAndPatientId to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SessionIdWithUserIdAndPatientIds associated with the given sessionidwithuseridandpatientidIds.
     */
    List<SessionIdWithUserIdAndPatientId> findByMultipleIds(List<SessionIdWithUserIdAndPatientIdId> sessionidwithuseridandpatientidIds, boolean orderedReturn);


    /**
     * Updates the details of an existing SessionIdWithUserIdAndPatientId. It replaces all fields of the existing SessionIdWithUserIdAndPatientId with the given sessionIdWithUserIdAndPatientId.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SessionIdWithUserIdAndPatientId if any.
     *
     * @param sessionIdWithUserIdAndPatientId The details of the SessionIdWithUserIdAndPatientId to be updated; value cannot be null.
     * @return The updated SessionIdWithUserIdAndPatientId.
     * @throws EntityNotFoundException if no SessionIdWithUserIdAndPatientId is found with given input.
     */
    SessionIdWithUserIdAndPatientId update(@Valid SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId);

    /**
     * Deletes an existing SessionIdWithUserIdAndPatientId with the given id.
     *
     * @param sessionidwithuseridandpatientidId The id of the SessionIdWithUserIdAndPatientId to be deleted; value cannot be null.
     * @return The deleted SessionIdWithUserIdAndPatientId.
     * @throws EntityNotFoundException if no SessionIdWithUserIdAndPatientId found with the given id.
     */
    SessionIdWithUserIdAndPatientId delete(SessionIdWithUserIdAndPatientIdId sessionidwithuseridandpatientidId);

    /**
     * Deletes an existing SessionIdWithUserIdAndPatientId with the given object.
     *
     * @param sessionIdWithUserIdAndPatientId The instance of the SessionIdWithUserIdAndPatientId to be deleted; value cannot be null.
     */
    void delete(SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId);

    /**
     * Find all SessionIdWithUserIdAndPatientIds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SessionIdWithUserIdAndPatientIds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SessionIdWithUserIdAndPatientId> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SessionIdWithUserIdAndPatientIds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SessionIdWithUserIdAndPatientIds.
     *
     * @see Pageable
     * @see Page
     */
    Page<SessionIdWithUserIdAndPatientId> findAll(String query, Pageable pageable);

    /**
     * Exports all SessionIdWithUserIdAndPatientIds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SessionIdWithUserIdAndPatientIds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the SessionIdWithUserIdAndPatientIds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SessionIdWithUserIdAndPatientId.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}