/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Background;
import com.dotta.medidata.Diagnoses;
import com.dotta.medidata.Patients;
import com.dotta.medidata.SurveyAndTestData;
import com.dotta.medidata.UsersPatients;


/**
 * ServiceImpl object for domain model class Patients.
 *
 * @see Patients
 */
@Service("medidata.PatientsService")
@Validated
public class PatientsServiceImpl implements PatientsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PatientsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.BackgroundService")
    private BackgroundService backgroundService;

    @Lazy
    @Autowired
    @Qualifier("medidata.UsersPatientsService")
    private UsersPatientsService usersPatientsService;

    @Lazy
    @Autowired
    @Qualifier("medidata.DiagnosesService")
    private DiagnosesService diagnosesService;

    @Lazy
    @Autowired
    @Qualifier("medidata.SurveyAndTestDataService")
    private SurveyAndTestDataService surveyAndTestDataService;

    @Autowired
    @Qualifier("medidata.PatientsDao")
    private WMGenericDao<Patients, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Patients, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Patients create(Patients patients) {
        LOGGER.debug("Creating a new Patients with information: {}", patients);

        Patients patientsCreated = this.wmGenericDao.create(patients);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(patientsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Patients getById(Integer patientsId) {
        LOGGER.debug("Finding Patients by id: {}", patientsId);
        return this.wmGenericDao.findById(patientsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Patients findById(Integer patientsId) {
        LOGGER.debug("Finding Patients by id: {}", patientsId);
        try {
            return this.wmGenericDao.findById(patientsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Patients found with id: {}", patientsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<Patients> findByMultipleIds(List<Integer> patientsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Patients by ids: {}", patientsIds);

        return this.wmGenericDao.findByMultipleIds(patientsIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Patients getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding Patients by unique keys: {}", uniqueKeyIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public Patients update(Patients patients) {
        LOGGER.debug("Updating Patients with information: {}", patients);

        List<Background> backgrounds = patients.getBackgrounds();
        List<Diagnoses> diagnoseses = patients.getDiagnoseses();
        List<SurveyAndTestData> surveyAndTestDatas = patients.getSurveyAndTestDatas();
        List<UsersPatients> usersPatientses = patients.getUsersPatientses();
        if(backgrounds != null && Hibernate.isInitialized(backgrounds)) {
            backgrounds.forEach(_background -> _background.setPatients(patients));
        }
        if(diagnoseses != null && Hibernate.isInitialized(diagnoseses)) {
            diagnoseses.forEach(_diagnoses -> _diagnoses.setPatients(patients));
        }
        if(surveyAndTestDatas != null && Hibernate.isInitialized(surveyAndTestDatas)) {
            surveyAndTestDatas.forEach(_surveyAndTestData -> _surveyAndTestData.setPatients(patients));
        }
        if(usersPatientses != null && Hibernate.isInitialized(usersPatientses)) {
            usersPatientses.forEach(_usersPatients -> _usersPatients.setPatients(patients));
        }

        this.wmGenericDao.update(patients);
        this.wmGenericDao.refresh(patients);

        // Deleting children which are not present in the list.
        if(backgrounds != null && Hibernate.isInitialized(backgrounds) && !backgrounds.isEmpty()) {
            List<Background> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Background.class,
                        new DaoUtils.ChildrenFilter<>("patients", patients, backgrounds)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_background -> backgroundService.delete(_background));
            patients.setBackgrounds(backgrounds);
        }

        // Deleting children which are not present in the list.
        if(diagnoseses != null && Hibernate.isInitialized(diagnoseses) && !diagnoseses.isEmpty()) {
            List<Diagnoses> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Diagnoses.class,
                        new DaoUtils.ChildrenFilter<>("patients", patients, diagnoseses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_diagnoses -> diagnosesService.delete(_diagnoses));
            patients.setDiagnoseses(diagnoseses);
        }

        // Deleting children which are not present in the list.
        if(surveyAndTestDatas != null && Hibernate.isInitialized(surveyAndTestDatas) && !surveyAndTestDatas.isEmpty()) {
            List<SurveyAndTestData> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, SurveyAndTestData.class,
                        new DaoUtils.ChildrenFilter<>("patients", patients, surveyAndTestDatas)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_surveyAndTestData -> surveyAndTestDataService.delete(_surveyAndTestData));
            patients.setSurveyAndTestDatas(surveyAndTestDatas);
        }

        // Deleting children which are not present in the list.
        if(usersPatientses != null && Hibernate.isInitialized(usersPatientses) && !usersPatientses.isEmpty()) {
            List<UsersPatients> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, UsersPatients.class,
                        new DaoUtils.ChildrenFilter<>("patients", patients, usersPatientses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_usersPatients -> usersPatientsService.delete(_usersPatients));
            patients.setUsersPatientses(usersPatientses);
        }

        return patients;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Patients delete(Integer patientsId) {
        LOGGER.debug("Deleting Patients with id: {}", patientsId);
        Patients deleted = this.wmGenericDao.findById(patientsId);
        if (deleted == null) {
            LOGGER.debug("No Patients found with id: {}", patientsId);
            throw new EntityNotFoundException(String.valueOf(patientsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(Patients patients) {
        LOGGER.debug("Deleting Patients with {}", patients);
        this.wmGenericDao.delete(patients);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Patients> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Patients");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Patients> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Patients");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table Patients to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table Patients to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Background> findAssociatedBackgrounds(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated backgrounds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("patients.id = '" + id + "'");

        return backgroundService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Diagnoses> findAssociatedDiagnoseses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated diagnoseses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("patients.id = '" + id + "'");

        return diagnosesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SurveyAndTestData> findAssociatedSurveyAndTestDatas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated surveyAndTestDatas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("patients.id = '" + id + "'");

        return surveyAndTestDataService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<UsersPatients> findAssociatedUsersPatientses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated usersPatientses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("patients.id = '" + id + "'");

        return usersPatientsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service BackgroundService instance
     */
    protected void setBackgroundService(BackgroundService service) {
        this.backgroundService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UsersPatientsService instance
     */
    protected void setUsersPatientsService(UsersPatientsService service) {
        this.usersPatientsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DiagnosesService instance
     */
    protected void setDiagnosesService(DiagnosesService service) {
        this.diagnosesService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SurveyAndTestDataService instance
     */
    protected void setSurveyAndTestDataService(SurveyAndTestDataService service) {
        this.surveyAndTestDataService = service;
    }

}