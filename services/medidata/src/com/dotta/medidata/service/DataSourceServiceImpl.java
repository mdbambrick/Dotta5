/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.DataSource;
import com.dotta.medidata.SurveyAndTestData;


/**
 * ServiceImpl object for domain model class DataSource.
 *
 * @see DataSource
 */
@Service("medidata.DataSourceService")
@Validated
public class DataSourceServiceImpl implements DataSourceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.SurveyAndTestDataService")
    private SurveyAndTestDataService surveyAndTestDataService;

    @Autowired
    @Qualifier("medidata.DataSourceDao")
    private WMGenericDao<DataSource, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DataSource, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public DataSource create(DataSource dataSourceInstance) {
        LOGGER.debug("Creating a new DataSource with information: {}", dataSourceInstance);

        List<SurveyAndTestData> surveyAndTestDatas = dataSourceInstance.getSurveyAndTestDatas();
        if(surveyAndTestDatas != null && Hibernate.isInitialized(surveyAndTestDatas)) {
            surveyAndTestDatas.forEach(_surveyAndTestData -> _surveyAndTestData.setDataSourceByDataSource(dataSourceInstance));
        }

        DataSource dataSourceInstanceCreated = this.wmGenericDao.create(dataSourceInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(dataSourceInstanceCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public DataSource getById(Integer datasourceId) {
        LOGGER.debug("Finding DataSource by id: {}", datasourceId);
        return this.wmGenericDao.findById(datasourceId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public DataSource findById(Integer datasourceId) {
        LOGGER.debug("Finding DataSource by id: {}", datasourceId);
        try {
            return this.wmGenericDao.findById(datasourceId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DataSource found with id: {}", datasourceId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<DataSource> findByMultipleIds(List<Integer> datasourceIds, boolean orderedReturn) {
        LOGGER.debug("Finding DataSources by ids: {}", datasourceIds);

        return this.wmGenericDao.findByMultipleIds(datasourceIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public DataSource update(DataSource dataSourceInstance) {
        LOGGER.debug("Updating DataSource with information: {}", dataSourceInstance);

        List<SurveyAndTestData> surveyAndTestDatas = dataSourceInstance.getSurveyAndTestDatas();
        if(surveyAndTestDatas != null && Hibernate.isInitialized(surveyAndTestDatas)) {
            surveyAndTestDatas.forEach(_surveyAndTestData -> _surveyAndTestData.setDataSourceByDataSource(dataSourceInstance));
        }

        this.wmGenericDao.update(dataSourceInstance);
        this.wmGenericDao.refresh(dataSourceInstance);

        // Deleting children which are not present in the list.
        if(surveyAndTestDatas != null && Hibernate.isInitialized(surveyAndTestDatas) && !surveyAndTestDatas.isEmpty()) {
            List<SurveyAndTestData> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, SurveyAndTestData.class,
                        new DaoUtils.ChildrenFilter<>("dataSourceByDataSource", dataSourceInstance, surveyAndTestDatas)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_surveyAndTestData -> surveyAndTestDataService.delete(_surveyAndTestData));
            dataSourceInstance.setSurveyAndTestDatas(surveyAndTestDatas);
        }

        return dataSourceInstance;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public DataSource delete(Integer datasourceId) {
        LOGGER.debug("Deleting DataSource with id: {}", datasourceId);
        DataSource deleted = this.wmGenericDao.findById(datasourceId);
        if (deleted == null) {
            LOGGER.debug("No DataSource found with id: {}", datasourceId);
            throw new EntityNotFoundException(String.valueOf(datasourceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(DataSource dataSourceInstance) {
        LOGGER.debug("Deleting DataSource with {}", dataSourceInstance);
        this.wmGenericDao.delete(dataSourceInstance);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<DataSource> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DataSources");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<DataSource> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DataSources");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table DataSource to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table DataSource to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SurveyAndTestData> findAssociatedSurveyAndTestDatas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated surveyAndTestDatas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("dataSourceByDataSource.id = '" + id + "'");

        return surveyAndTestDataService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SurveyAndTestDataService instance
     */
    protected void setSurveyAndTestDataService(SurveyAndTestDataService service) {
        this.surveyAndTestDataService = service;
    }

}