/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.AllergyCategory;
import com.dotta.medidata.AllergyClass;


/**
 * ServiceImpl object for domain model class AllergyClass.
 *
 * @see AllergyClass
 */
@Service("medidata.AllergyClassService")
@Validated
public class AllergyClassServiceImpl implements AllergyClassService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllergyClassServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.AllergyCategoryService")
    private AllergyCategoryService allergyCategoryService;

    @Autowired
    @Qualifier("medidata.AllergyClassDao")
    private WMGenericDao<AllergyClass, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllergyClass, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public AllergyClass create(AllergyClass allergyClass) {
        LOGGER.debug("Creating a new AllergyClass with information: {}", allergyClass);

        List<AllergyCategory> allergyCategories = allergyClass.getAllergyCategories();
        if(allergyCategories != null && Hibernate.isInitialized(allergyCategories)) {
            allergyCategories.forEach(_allergyCategory -> _allergyCategory.setAllergyClassByAllergyClass(allergyClass));
        }

        AllergyClass allergyClassCreated = this.wmGenericDao.create(allergyClass);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(allergyClassCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public AllergyClass getById(Integer allergyclassId) {
        LOGGER.debug("Finding AllergyClass by id: {}", allergyclassId);
        return this.wmGenericDao.findById(allergyclassId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public AllergyClass findById(Integer allergyclassId) {
        LOGGER.debug("Finding AllergyClass by id: {}", allergyclassId);
        try {
            return this.wmGenericDao.findById(allergyclassId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AllergyClass found with id: {}", allergyclassId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<AllergyClass> findByMultipleIds(List<Integer> allergyclassIds, boolean orderedReturn) {
        LOGGER.debug("Finding AllergyClasses by ids: {}", allergyclassIds);

        return this.wmGenericDao.findByMultipleIds(allergyclassIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public AllergyClass getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding AllergyClass by unique keys: {}", uniqueKeyIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public AllergyClass update(AllergyClass allergyClass) {
        LOGGER.debug("Updating AllergyClass with information: {}", allergyClass);

        List<AllergyCategory> allergyCategories = allergyClass.getAllergyCategories();
        if(allergyCategories != null && Hibernate.isInitialized(allergyCategories)) {
            allergyCategories.forEach(_allergyCategory -> _allergyCategory.setAllergyClassByAllergyClass(allergyClass));
        }

        this.wmGenericDao.update(allergyClass);
        this.wmGenericDao.refresh(allergyClass);

        // Deleting children which are not present in the list.
        if(allergyCategories != null && Hibernate.isInitialized(allergyCategories) && !allergyCategories.isEmpty()) {
            List<AllergyCategory> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, AllergyCategory.class,
                        new DaoUtils.ChildrenFilter<>("allergyClassByAllergyClass", allergyClass, allergyCategories)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_allergyCategory -> allergyCategoryService.delete(_allergyCategory));
            allergyClass.setAllergyCategories(allergyCategories);
        }

        return allergyClass;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public AllergyClass delete(Integer allergyclassId) {
        LOGGER.debug("Deleting AllergyClass with id: {}", allergyclassId);
        AllergyClass deleted = this.wmGenericDao.findById(allergyclassId);
        if (deleted == null) {
            LOGGER.debug("No AllergyClass found with id: {}", allergyclassId);
            throw new EntityNotFoundException(String.valueOf(allergyclassId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(AllergyClass allergyClass) {
        LOGGER.debug("Deleting AllergyClass with {}", allergyClass);
        this.wmGenericDao.delete(allergyClass);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<AllergyClass> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllergyClasses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<AllergyClass> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllergyClasses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table AllergyClass to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table AllergyClass to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<AllergyCategory> findAssociatedAllergyCategories(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated allergyCategories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("allergyClassByAllergyClass.id = '" + id + "'");

        return allergyCategoryService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AllergyCategoryService instance
     */
    protected void setAllergyCategoryService(AllergyCategoryService service) {
        this.allergyCategoryService = service;
    }

}