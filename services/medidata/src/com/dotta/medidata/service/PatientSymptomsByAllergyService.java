/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.PatientSymptomsByAllergy;
import com.dotta.medidata.PatientSymptomsByAllergyId;

/**
 * Service object for domain model class {@link PatientSymptomsByAllergy}.
 */
public interface PatientSymptomsByAllergyService {

    /**
     * Creates a new PatientSymptomsByAllergy. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PatientSymptomsByAllergy if any.
     *
     * @param patientSymptomsByAllergy Details of the PatientSymptomsByAllergy to be created; value cannot be null.
     * @return The newly created PatientSymptomsByAllergy.
     */
    PatientSymptomsByAllergy create(@Valid PatientSymptomsByAllergy patientSymptomsByAllergy);


	/**
     * Returns PatientSymptomsByAllergy by given id if exists.
     *
     * @param patientsymptomsbyallergyId The id of the PatientSymptomsByAllergy to get; value cannot be null.
     * @return PatientSymptomsByAllergy associated with the given patientsymptomsbyallergyId.
	 * @throws EntityNotFoundException If no PatientSymptomsByAllergy is found.
     */
    PatientSymptomsByAllergy getById(PatientSymptomsByAllergyId patientsymptomsbyallergyId);

    /**
     * Find and return the PatientSymptomsByAllergy by given id if exists, returns null otherwise.
     *
     * @param patientsymptomsbyallergyId The id of the PatientSymptomsByAllergy to get; value cannot be null.
     * @return PatientSymptomsByAllergy associated with the given patientsymptomsbyallergyId.
     */
    PatientSymptomsByAllergy findById(PatientSymptomsByAllergyId patientsymptomsbyallergyId);

	/**
     * Find and return the list of PatientSymptomsByAllergies by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param patientsymptomsbyallergyIds The id's of the PatientSymptomsByAllergy to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PatientSymptomsByAllergies associated with the given patientsymptomsbyallergyIds.
     */
    List<PatientSymptomsByAllergy> findByMultipleIds(List<PatientSymptomsByAllergyId> patientsymptomsbyallergyIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PatientSymptomsByAllergy. It replaces all fields of the existing PatientSymptomsByAllergy with the given patientSymptomsByAllergy.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PatientSymptomsByAllergy if any.
     *
     * @param patientSymptomsByAllergy The details of the PatientSymptomsByAllergy to be updated; value cannot be null.
     * @return The updated PatientSymptomsByAllergy.
     * @throws EntityNotFoundException if no PatientSymptomsByAllergy is found with given input.
     */
    PatientSymptomsByAllergy update(@Valid PatientSymptomsByAllergy patientSymptomsByAllergy);

    /**
     * Deletes an existing PatientSymptomsByAllergy with the given id.
     *
     * @param patientsymptomsbyallergyId The id of the PatientSymptomsByAllergy to be deleted; value cannot be null.
     * @return The deleted PatientSymptomsByAllergy.
     * @throws EntityNotFoundException if no PatientSymptomsByAllergy found with the given id.
     */
    PatientSymptomsByAllergy delete(PatientSymptomsByAllergyId patientsymptomsbyallergyId);

    /**
     * Deletes an existing PatientSymptomsByAllergy with the given object.
     *
     * @param patientSymptomsByAllergy The instance of the PatientSymptomsByAllergy to be deleted; value cannot be null.
     */
    void delete(PatientSymptomsByAllergy patientSymptomsByAllergy);

    /**
     * Find all PatientSymptomsByAllergies matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PatientSymptomsByAllergies.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PatientSymptomsByAllergy> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PatientSymptomsByAllergies matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PatientSymptomsByAllergies.
     *
     * @see Pageable
     * @see Page
     */
    Page<PatientSymptomsByAllergy> findAll(String query, Pageable pageable);

    /**
     * Exports all PatientSymptomsByAllergies matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PatientSymptomsByAllergies matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PatientSymptomsByAllergies in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PatientSymptomsByAllergy.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}