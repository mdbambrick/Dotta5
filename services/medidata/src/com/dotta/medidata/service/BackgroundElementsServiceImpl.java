/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.BackgroundElements;


/**
 * ServiceImpl object for domain model class BackgroundElements.
 *
 * @see BackgroundElements
 */
@Service("medidata.BackgroundElementsService")
@Validated
public class BackgroundElementsServiceImpl implements BackgroundElementsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BackgroundElementsServiceImpl.class);


    @Autowired
    @Qualifier("medidata.BackgroundElementsDao")
    private WMGenericDao<BackgroundElements, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BackgroundElements, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public BackgroundElements create(BackgroundElements backgroundElements) {
        LOGGER.debug("Creating a new BackgroundElements with information: {}", backgroundElements);

        BackgroundElements backgroundElementsCreated = this.wmGenericDao.create(backgroundElements);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(backgroundElementsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public BackgroundElements getById(Integer backgroundelementsId) {
        LOGGER.debug("Finding BackgroundElements by id: {}", backgroundelementsId);
        return this.wmGenericDao.findById(backgroundelementsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public BackgroundElements findById(Integer backgroundelementsId) {
        LOGGER.debug("Finding BackgroundElements by id: {}", backgroundelementsId);
        try {
            return this.wmGenericDao.findById(backgroundelementsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No BackgroundElements found with id: {}", backgroundelementsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<BackgroundElements> findByMultipleIds(List<Integer> backgroundelementsIds, boolean orderedReturn) {
        LOGGER.debug("Finding BackgroundElements by ids: {}", backgroundelementsIds);

        return this.wmGenericDao.findByMultipleIds(backgroundelementsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public BackgroundElements update(BackgroundElements backgroundElements) {
        LOGGER.debug("Updating BackgroundElements with information: {}", backgroundElements);

        this.wmGenericDao.update(backgroundElements);
        this.wmGenericDao.refresh(backgroundElements);

        return backgroundElements;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public BackgroundElements delete(Integer backgroundelementsId) {
        LOGGER.debug("Deleting BackgroundElements with id: {}", backgroundelementsId);
        BackgroundElements deleted = this.wmGenericDao.findById(backgroundelementsId);
        if (deleted == null) {
            LOGGER.debug("No BackgroundElements found with id: {}", backgroundelementsId);
            throw new EntityNotFoundException(String.valueOf(backgroundelementsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(BackgroundElements backgroundElements) {
        LOGGER.debug("Deleting BackgroundElements with {}", backgroundElements);
        this.wmGenericDao.delete(backgroundElements);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<BackgroundElements> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BackgroundElements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<BackgroundElements> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BackgroundElements");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table BackgroundElements to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table BackgroundElements to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}