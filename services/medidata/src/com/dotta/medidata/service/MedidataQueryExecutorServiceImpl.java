/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.dotta.medidata.models.query.*;

@Service
public class MedidataQueryExecutorServiceImpl implements MedidataQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MedidataQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("medidataWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<ListCliniciansforPatientResponse> executeListCliniciansforPatient(Integer id, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        return queryExecutor.executeNamedQuery("ListCliniciansforPatient", params, ListCliniciansforPatientResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportListCliniciansforPatient(Integer id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        QueryProcedureInput queryInput = new QueryProcedureInput("ListCliniciansforPatient", params, ListCliniciansforPatientResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Integer executeAddSymptom(AddSymptomRequest addSymptomRequest) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("patient_id", addSymptomRequest.getPatientId());
        params.put("allergy_id", addSymptomRequest.getAllergyId());
        params.put("symptom_id", addSymptomRequest.getSymptomId());
        params.put("result", addSymptomRequest.getResult());
        params.put("session_id", addSymptomRequest.getSessionId());
        params.put("data_source", addSymptomRequest.getDataSource());
        params.put("current_status", addSymptomRequest.getCurrentStatus());

        return queryExecutor.executeNamedQueryForUpdate("AddSymptom", params);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<PatientSymptomsByAllergyResponse> executePatientSymptomsByAllergy(Integer id, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        return queryExecutor.executeNamedQuery("PatientSymptomsByAllergy", params, PatientSymptomsByAllergyResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportPatientSymptomsByAllergy(Integer id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        QueryProcedureInput queryInput = new QueryProcedureInput("PatientSymptomsByAllergy", params, PatientSymptomsByAllergyResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<PatientSymptomSummaryResponse> executePatientSymptomSummary(Integer userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("PatientSymptomSummary", params, PatientSymptomSummaryResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportPatientSymptomSummary(Integer userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        QueryProcedureInput queryInput = new QueryProcedureInput("PatientSymptomSummary", params, PatientSymptomSummaryResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<MedicsWithPatientsResponse> executeMedicsWithPatients(String id, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        return queryExecutor.executeNamedQuery("MedicsWithPatients", params, MedicsWithPatientsResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportMedicsWithPatients(String id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        QueryProcedureInput queryInput = new QueryProcedureInput("MedicsWithPatients", params, MedicsWithPatientsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<PatientReadResponse> executePatientRead(Integer patientId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("patientId", patientId);

        return queryExecutor.executeNamedQuery("PatientRead", params, PatientReadResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportPatientRead(Integer patientId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("patientId", patientId);

        QueryProcedureInput queryInput = new QueryProcedureInput("PatientRead", params, PatientReadResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<PatientMedicsResponse> executePatientMedics(Integer patientId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("patient_id", patientId);

        return queryExecutor.executeNamedQuery("PatientMedics", params, PatientMedicsResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportPatientMedics(Integer patientId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("patient_id", patientId);

        QueryProcedureInput queryInput = new QueryProcedureInput("PatientMedics", params, PatientMedicsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Integer executeForgotPassword(ForgotPasswordRequest forgotPasswordRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pwd", forgotPasswordRequest.getPwd());
        params.put("name", forgotPasswordRequest.getName());

        return queryExecutor.executeNamedQueryForUpdate("ForgotPassword", params);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<TrackReadResponse> executeTrackRead(Integer userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("user_id", userId);

        return queryExecutor.executeNamedQuery("TrackRead", params, TrackReadResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportTrackRead(Integer userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("user_id", userId);

        QueryProcedureInput queryInput = new QueryProcedureInput("TrackRead", params, TrackReadResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<PatientColourCountSummaryResponse> executePatientColourCountSummary(Integer userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("PatientColourCountSummary", params, PatientColourCountSummaryResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportPatientColourCountSummary(Integer userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        QueryProcedureInput queryInput = new QueryProcedureInput("PatientColourCountSummary", params, PatientColourCountSummaryResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<ShareCodeResponse> executeShareCode(Integer userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("user_id", userId);

        return queryExecutor.executeNamedQuery("ShareCode", params, ShareCodeResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportShareCode(Integer userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("user_id", userId);

        QueryProcedureInput queryInput = new QueryProcedureInput("ShareCode", params, ShareCodeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<ClinicianListResponse> executeClinician_List(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("Clinician_List", params, ClinicianListResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportClinician_List(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("Clinician_List", params, ClinicianListResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Integer executeRemoveClincian(String patientId, Integer userId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("patient_id", patientId);
        params.put("user_id", userId);

        return queryExecutor.executeNamedQueryForUpdate("RemoveClincian", params);
    }

    @Transactional(value = "medidataTransactionManager", readOnly = true)
    @Override
    public Page<BackgroundReadResponse> executeBackgroundRead(Integer patientId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("patientId", patientId);

        return queryExecutor.executeNamedQuery("BackgroundRead", params, BackgroundReadResponse.class, pageable);
    }

    @Transactional(value = "medidataTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportBackgroundRead(Integer patientId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("patientId", patientId);

        QueryProcedureInput queryInput = new QueryProcedureInput("BackgroundRead", params, BackgroundReadResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}