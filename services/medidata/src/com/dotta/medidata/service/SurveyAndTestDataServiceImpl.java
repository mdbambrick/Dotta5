/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.SurveyAndTestData;


/**
 * ServiceImpl object for domain model class SurveyAndTestData.
 *
 * @see SurveyAndTestData
 */
@Service("medidata.SurveyAndTestDataService")
@Validated
public class SurveyAndTestDataServiceImpl implements SurveyAndTestDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SurveyAndTestDataServiceImpl.class);


    @Autowired
    @Qualifier("medidata.SurveyAndTestDataDao")
    private WMGenericDao<SurveyAndTestData, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SurveyAndTestData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public SurveyAndTestData create(SurveyAndTestData surveyAndTestData) {
        LOGGER.debug("Creating a new SurveyAndTestData with information: {}", surveyAndTestData);

        SurveyAndTestData surveyAndTestDataCreated = this.wmGenericDao.create(surveyAndTestData);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(surveyAndTestDataCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public SurveyAndTestData getById(Integer surveyandtestdataId) {
        LOGGER.debug("Finding SurveyAndTestData by id: {}", surveyandtestdataId);
        return this.wmGenericDao.findById(surveyandtestdataId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public SurveyAndTestData findById(Integer surveyandtestdataId) {
        LOGGER.debug("Finding SurveyAndTestData by id: {}", surveyandtestdataId);
        try {
            return this.wmGenericDao.findById(surveyandtestdataId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SurveyAndTestData found with id: {}", surveyandtestdataId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<SurveyAndTestData> findByMultipleIds(List<Integer> surveyandtestdataIds, boolean orderedReturn) {
        LOGGER.debug("Finding SurveyAndTestDatas by ids: {}", surveyandtestdataIds);

        return this.wmGenericDao.findByMultipleIds(surveyandtestdataIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public SurveyAndTestData update(SurveyAndTestData surveyAndTestData) {
        LOGGER.debug("Updating SurveyAndTestData with information: {}", surveyAndTestData);

        this.wmGenericDao.update(surveyAndTestData);
        this.wmGenericDao.refresh(surveyAndTestData);

        return surveyAndTestData;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public SurveyAndTestData delete(Integer surveyandtestdataId) {
        LOGGER.debug("Deleting SurveyAndTestData with id: {}", surveyandtestdataId);
        SurveyAndTestData deleted = this.wmGenericDao.findById(surveyandtestdataId);
        if (deleted == null) {
            LOGGER.debug("No SurveyAndTestData found with id: {}", surveyandtestdataId);
            throw new EntityNotFoundException(String.valueOf(surveyandtestdataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(SurveyAndTestData surveyAndTestData) {
        LOGGER.debug("Deleting SurveyAndTestData with {}", surveyAndTestData);
        this.wmGenericDao.delete(surveyAndTestData);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SurveyAndTestData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SurveyAndTestDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SurveyAndTestData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SurveyAndTestDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table SurveyAndTestData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table SurveyAndTestData to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}