/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.BackgroundElements;

/**
 * Service object for domain model class {@link BackgroundElements}.
 */
public interface BackgroundElementsService {

    /**
     * Creates a new BackgroundElements. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BackgroundElements if any.
     *
     * @param backgroundElements Details of the BackgroundElements to be created; value cannot be null.
     * @return The newly created BackgroundElements.
     */
    BackgroundElements create(@Valid BackgroundElements backgroundElements);


	/**
     * Returns BackgroundElements by given id if exists.
     *
     * @param backgroundelementsId The id of the BackgroundElements to get; value cannot be null.
     * @return BackgroundElements associated with the given backgroundelementsId.
	 * @throws EntityNotFoundException If no BackgroundElements is found.
     */
    BackgroundElements getById(Integer backgroundelementsId);

    /**
     * Find and return the BackgroundElements by given id if exists, returns null otherwise.
     *
     * @param backgroundelementsId The id of the BackgroundElements to get; value cannot be null.
     * @return BackgroundElements associated with the given backgroundelementsId.
     */
    BackgroundElements findById(Integer backgroundelementsId);

	/**
     * Find and return the list of BackgroundElements by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param backgroundelementsIds The id's of the BackgroundElements to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return BackgroundElements associated with the given backgroundelementsIds.
     */
    List<BackgroundElements> findByMultipleIds(List<Integer> backgroundelementsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing BackgroundElements. It replaces all fields of the existing BackgroundElements with the given backgroundElements.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BackgroundElements if any.
     *
     * @param backgroundElements The details of the BackgroundElements to be updated; value cannot be null.
     * @return The updated BackgroundElements.
     * @throws EntityNotFoundException if no BackgroundElements is found with given input.
     */
    BackgroundElements update(@Valid BackgroundElements backgroundElements);

    /**
     * Deletes an existing BackgroundElements with the given id.
     *
     * @param backgroundelementsId The id of the BackgroundElements to be deleted; value cannot be null.
     * @return The deleted BackgroundElements.
     * @throws EntityNotFoundException if no BackgroundElements found with the given id.
     */
    BackgroundElements delete(Integer backgroundelementsId);

    /**
     * Deletes an existing BackgroundElements with the given object.
     *
     * @param backgroundElements The instance of the BackgroundElements to be deleted; value cannot be null.
     */
    void delete(BackgroundElements backgroundElements);

    /**
     * Find all BackgroundElements matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BackgroundElements.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<BackgroundElements> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all BackgroundElements matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BackgroundElements.
     *
     * @see Pageable
     * @see Page
     */
    Page<BackgroundElements> findAll(String query, Pageable pageable);

    /**
     * Exports all BackgroundElements matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all BackgroundElements matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the BackgroundElements in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the BackgroundElements.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}