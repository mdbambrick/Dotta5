/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Background;
import com.dotta.medidata.BackgroundId;


/**
 * ServiceImpl object for domain model class Background.
 *
 * @see Background
 */
@Service("medidata.BackgroundService")
@Validated
public class BackgroundServiceImpl implements BackgroundService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BackgroundServiceImpl.class);


    @Autowired
    @Qualifier("medidata.BackgroundDao")
    private WMGenericDao<Background, BackgroundId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Background, BackgroundId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Background create(Background background) {
        LOGGER.debug("Creating a new Background with information: {}", background);

        Background backgroundCreated = this.wmGenericDao.create(background);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(backgroundCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Background getById(BackgroundId backgroundId) {
        LOGGER.debug("Finding Background by id: {}", backgroundId);
        return this.wmGenericDao.findById(backgroundId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Background findById(BackgroundId backgroundId) {
        LOGGER.debug("Finding Background by id: {}", backgroundId);
        try {
            return this.wmGenericDao.findById(backgroundId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Background found with id: {}", backgroundId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<Background> findByMultipleIds(List<BackgroundId> backgroundIds, boolean orderedReturn) {
        LOGGER.debug("Finding Backgrounds by ids: {}", backgroundIds);

        return this.wmGenericDao.findByMultipleIds(backgroundIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Background getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding Background by unique keys: {}", uniqueKeyIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public Background update(Background background) {
        LOGGER.debug("Updating Background with information: {}", background);

        this.wmGenericDao.update(background);
        this.wmGenericDao.refresh(background);

        return background;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Background delete(BackgroundId backgroundId) {
        LOGGER.debug("Deleting Background with id: {}", backgroundId);
        Background deleted = this.wmGenericDao.findById(backgroundId);
        if (deleted == null) {
            LOGGER.debug("No Background found with id: {}", backgroundId);
            throw new EntityNotFoundException(String.valueOf(backgroundId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(Background background) {
        LOGGER.debug("Deleting Background with {}", background);
        this.wmGenericDao.delete(background);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Background> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Backgrounds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Background> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Backgrounds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table Background to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table Background to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}