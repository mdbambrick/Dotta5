/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.MedicsWithPatients;


/**
 * ServiceImpl object for domain model class MedicsWithPatients.
 *
 * @see MedicsWithPatients
 */
@Service("medidata.MedicsWithPatientsService")
@Validated
public class MedicsWithPatientsServiceImpl implements MedicsWithPatientsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MedicsWithPatientsServiceImpl.class);


    @Autowired
    @Qualifier("medidata.MedicsWithPatientsDao")
    private WMGenericDao<MedicsWithPatients, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MedicsWithPatients, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public MedicsWithPatients create(MedicsWithPatients medicsWithPatients) {
        LOGGER.debug("Creating a new MedicsWithPatients with information: {}", medicsWithPatients);

        MedicsWithPatients medicsWithPatientsCreated = this.wmGenericDao.create(medicsWithPatients);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(medicsWithPatientsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public MedicsWithPatients getById(Integer medicswithpatientsId) {
        LOGGER.debug("Finding MedicsWithPatients by id: {}", medicswithpatientsId);
        return this.wmGenericDao.findById(medicswithpatientsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public MedicsWithPatients findById(Integer medicswithpatientsId) {
        LOGGER.debug("Finding MedicsWithPatients by id: {}", medicswithpatientsId);
        try {
            return this.wmGenericDao.findById(medicswithpatientsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No MedicsWithPatients found with id: {}", medicswithpatientsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<MedicsWithPatients> findByMultipleIds(List<Integer> medicswithpatientsIds, boolean orderedReturn) {
        LOGGER.debug("Finding MedicsWithPatients by ids: {}", medicswithpatientsIds);

        return this.wmGenericDao.findByMultipleIds(medicswithpatientsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public MedicsWithPatients update(MedicsWithPatients medicsWithPatients) {
        LOGGER.debug("Updating MedicsWithPatients with information: {}", medicsWithPatients);

        this.wmGenericDao.update(medicsWithPatients);
        this.wmGenericDao.refresh(medicsWithPatients);

        return medicsWithPatients;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public MedicsWithPatients delete(Integer medicswithpatientsId) {
        LOGGER.debug("Deleting MedicsWithPatients with id: {}", medicswithpatientsId);
        MedicsWithPatients deleted = this.wmGenericDao.findById(medicswithpatientsId);
        if (deleted == null) {
            LOGGER.debug("No MedicsWithPatients found with id: {}", medicswithpatientsId);
            throw new EntityNotFoundException(String.valueOf(medicswithpatientsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(MedicsWithPatients medicsWithPatients) {
        LOGGER.debug("Deleting MedicsWithPatients with {}", medicsWithPatients);
        this.wmGenericDao.delete(medicsWithPatients);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<MedicsWithPatients> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MedicsWithPatients");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<MedicsWithPatients> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MedicsWithPatients");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table MedicsWithPatients to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table MedicsWithPatients to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}