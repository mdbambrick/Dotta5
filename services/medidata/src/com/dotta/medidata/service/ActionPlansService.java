/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.ActionPlans;
import com.dotta.medidata.ActionsDiagnoses;

/**
 * Service object for domain model class {@link ActionPlans}.
 */
public interface ActionPlansService {

    /**
     * Creates a new ActionPlans. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ActionPlans if any.
     *
     * @param actionPlans Details of the ActionPlans to be created; value cannot be null.
     * @return The newly created ActionPlans.
     */
    ActionPlans create(@Valid ActionPlans actionPlans);


	/**
     * Returns ActionPlans by given id if exists.
     *
     * @param actionplansId The id of the ActionPlans to get; value cannot be null.
     * @return ActionPlans associated with the given actionplansId.
	 * @throws EntityNotFoundException If no ActionPlans is found.
     */
    ActionPlans getById(Integer actionplansId);

    /**
     * Find and return the ActionPlans by given id if exists, returns null otherwise.
     *
     * @param actionplansId The id of the ActionPlans to get; value cannot be null.
     * @return ActionPlans associated with the given actionplansId.
     */
    ActionPlans findById(Integer actionplansId);

	/**
     * Find and return the list of ActionPlans by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param actionplansIds The id's of the ActionPlans to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return ActionPlans associated with the given actionplansIds.
     */
    List<ActionPlans> findByMultipleIds(List<Integer> actionplansIds, boolean orderedReturn);


    /**
     * Updates the details of an existing ActionPlans. It replaces all fields of the existing ActionPlans with the given actionPlans.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ActionPlans if any.
     *
     * @param actionPlans The details of the ActionPlans to be updated; value cannot be null.
     * @return The updated ActionPlans.
     * @throws EntityNotFoundException if no ActionPlans is found with given input.
     */
    ActionPlans update(@Valid ActionPlans actionPlans);

    /**
     * Deletes an existing ActionPlans with the given id.
     *
     * @param actionplansId The id of the ActionPlans to be deleted; value cannot be null.
     * @return The deleted ActionPlans.
     * @throws EntityNotFoundException if no ActionPlans found with the given id.
     */
    ActionPlans delete(Integer actionplansId);

    /**
     * Deletes an existing ActionPlans with the given object.
     *
     * @param actionPlans The instance of the ActionPlans to be deleted; value cannot be null.
     */
    void delete(ActionPlans actionPlans);

    /**
     * Find all ActionPlans matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ActionPlans.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<ActionPlans> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all ActionPlans matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ActionPlans.
     *
     * @see Pageable
     * @see Page
     */
    Page<ActionPlans> findAll(String query, Pageable pageable);

    /**
     * Exports all ActionPlans matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all ActionPlans matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the ActionPlans in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the ActionPlans.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated actionsDiagnoseses for given ActionPlans id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated ActionsDiagnoses instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<ActionsDiagnoses> findAssociatedActionsDiagnoseses(Integer id, Pageable pageable);

}