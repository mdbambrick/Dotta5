/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Compounds;
import com.dotta.medidata.CompoundsAllergies;


/**
 * ServiceImpl object for domain model class Compounds.
 *
 * @see Compounds
 */
@Service("medidata.CompoundsService")
@Validated
public class CompoundsServiceImpl implements CompoundsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompoundsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.CompoundsAllergiesService")
    private CompoundsAllergiesService compoundsAllergiesService;

    @Autowired
    @Qualifier("medidata.CompoundsDao")
    private WMGenericDao<Compounds, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Compounds, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Compounds create(Compounds compounds) {
        LOGGER.debug("Creating a new Compounds with information: {}", compounds);

        List<CompoundsAllergies> compoundsAllergieses = compounds.getCompoundsAllergieses();
        if(compoundsAllergieses != null && Hibernate.isInitialized(compoundsAllergieses)) {
            compoundsAllergieses.forEach(_compoundsAllergies -> _compoundsAllergies.setCompounds(compounds));
        }

        Compounds compoundsCreated = this.wmGenericDao.create(compounds);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compoundsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Compounds getById(Integer compoundsId) {
        LOGGER.debug("Finding Compounds by id: {}", compoundsId);
        return this.wmGenericDao.findById(compoundsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Compounds findById(Integer compoundsId) {
        LOGGER.debug("Finding Compounds by id: {}", compoundsId);
        try {
            return this.wmGenericDao.findById(compoundsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Compounds found with id: {}", compoundsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<Compounds> findByMultipleIds(List<Integer> compoundsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Compounds by ids: {}", compoundsIds);

        return this.wmGenericDao.findByMultipleIds(compoundsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public Compounds update(Compounds compounds) {
        LOGGER.debug("Updating Compounds with information: {}", compounds);

        List<CompoundsAllergies> compoundsAllergieses = compounds.getCompoundsAllergieses();
        if(compoundsAllergieses != null && Hibernate.isInitialized(compoundsAllergieses)) {
            compoundsAllergieses.forEach(_compoundsAllergies -> _compoundsAllergies.setCompounds(compounds));
        }

        this.wmGenericDao.update(compounds);
        this.wmGenericDao.refresh(compounds);

        // Deleting children which are not present in the list.
        if(compoundsAllergieses != null && Hibernate.isInitialized(compoundsAllergieses) && !compoundsAllergieses.isEmpty()) {
            List<CompoundsAllergies> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, CompoundsAllergies.class,
                        new DaoUtils.ChildrenFilter<>("compounds", compounds, compoundsAllergieses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_compoundsAllergies -> compoundsAllergiesService.delete(_compoundsAllergies));
            compounds.setCompoundsAllergieses(compoundsAllergieses);
        }

        return compounds;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Compounds delete(Integer compoundsId) {
        LOGGER.debug("Deleting Compounds with id: {}", compoundsId);
        Compounds deleted = this.wmGenericDao.findById(compoundsId);
        if (deleted == null) {
            LOGGER.debug("No Compounds found with id: {}", compoundsId);
            throw new EntityNotFoundException(String.valueOf(compoundsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(Compounds compounds) {
        LOGGER.debug("Deleting Compounds with {}", compounds);
        this.wmGenericDao.delete(compounds);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Compounds> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Compounds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Compounds> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Compounds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table Compounds to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table Compounds to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<CompoundsAllergies> findAssociatedCompoundsAllergieses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated compoundsAllergieses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("compounds.id = '" + id + "'");

        return compoundsAllergiesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CompoundsAllergiesService instance
     */
    protected void setCompoundsAllergiesService(CompoundsAllergiesService service) {
        this.compoundsAllergiesService = service;
    }

}