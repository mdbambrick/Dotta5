/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.DataSource;
import com.dotta.medidata.SurveyAndTestData;

/**
 * Service object for domain model class {@link DataSource}.
 */
public interface DataSourceService {

    /**
     * Creates a new DataSource. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DataSource if any.
     *
     * @param dataSourceInstance Details of the DataSource to be created; value cannot be null.
     * @return The newly created DataSource.
     */
    DataSource create(@Valid DataSource dataSourceInstance);


	/**
     * Returns DataSource by given id if exists.
     *
     * @param datasourceId The id of the DataSource to get; value cannot be null.
     * @return DataSource associated with the given datasourceId.
	 * @throws EntityNotFoundException If no DataSource is found.
     */
    DataSource getById(Integer datasourceId);

    /**
     * Find and return the DataSource by given id if exists, returns null otherwise.
     *
     * @param datasourceId The id of the DataSource to get; value cannot be null.
     * @return DataSource associated with the given datasourceId.
     */
    DataSource findById(Integer datasourceId);

	/**
     * Find and return the list of DataSources by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param datasourceIds The id's of the DataSource to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return DataSources associated with the given datasourceIds.
     */
    List<DataSource> findByMultipleIds(List<Integer> datasourceIds, boolean orderedReturn);


    /**
     * Updates the details of an existing DataSource. It replaces all fields of the existing DataSource with the given dataSourceInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DataSource if any.
     *
     * @param dataSourceInstance The details of the DataSource to be updated; value cannot be null.
     * @return The updated DataSource.
     * @throws EntityNotFoundException if no DataSource is found with given input.
     */
    DataSource update(@Valid DataSource dataSourceInstance);

    /**
     * Deletes an existing DataSource with the given id.
     *
     * @param datasourceId The id of the DataSource to be deleted; value cannot be null.
     * @return The deleted DataSource.
     * @throws EntityNotFoundException if no DataSource found with the given id.
     */
    DataSource delete(Integer datasourceId);

    /**
     * Deletes an existing DataSource with the given object.
     *
     * @param dataSourceInstance The instance of the DataSource to be deleted; value cannot be null.
     */
    void delete(DataSource dataSourceInstance);

    /**
     * Find all DataSources matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DataSources.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<DataSource> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all DataSources matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DataSources.
     *
     * @see Pageable
     * @see Page
     */
    Page<DataSource> findAll(String query, Pageable pageable);

    /**
     * Exports all DataSources matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all DataSources matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the DataSources in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the DataSource.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated surveyAndTestDatas for given DataSource id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SurveyAndTestData instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SurveyAndTestData> findAssociatedSurveyAndTestDatas(Integer id, Pageable pageable);

}