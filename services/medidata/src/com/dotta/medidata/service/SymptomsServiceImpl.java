/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.SurveyAndTestData;
import com.dotta.medidata.Symptoms;


/**
 * ServiceImpl object for domain model class Symptoms.
 *
 * @see Symptoms
 */
@Service("medidata.SymptomsService")
@Validated
public class SymptomsServiceImpl implements SymptomsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SymptomsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.SurveyAndTestDataService")
    private SurveyAndTestDataService surveyAndTestDataService;

    @Autowired
    @Qualifier("medidata.SymptomsDao")
    private WMGenericDao<Symptoms, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Symptoms, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Symptoms create(Symptoms symptoms) {
        LOGGER.debug("Creating a new Symptoms with information: {}", symptoms);

        List<SurveyAndTestData> surveyAndTestDatas = symptoms.getSurveyAndTestDatas();
        if(surveyAndTestDatas != null && Hibernate.isInitialized(surveyAndTestDatas)) {
            surveyAndTestDatas.forEach(_surveyAndTestData -> _surveyAndTestData.setSymptoms(symptoms));
        }

        Symptoms symptomsCreated = this.wmGenericDao.create(symptoms);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(symptomsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Symptoms getById(Integer symptomsId) {
        LOGGER.debug("Finding Symptoms by id: {}", symptomsId);
        return this.wmGenericDao.findById(symptomsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Symptoms findById(Integer symptomsId) {
        LOGGER.debug("Finding Symptoms by id: {}", symptomsId);
        try {
            return this.wmGenericDao.findById(symptomsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Symptoms found with id: {}", symptomsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<Symptoms> findByMultipleIds(List<Integer> symptomsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Symptoms by ids: {}", symptomsIds);

        return this.wmGenericDao.findByMultipleIds(symptomsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public Symptoms update(Symptoms symptoms) {
        LOGGER.debug("Updating Symptoms with information: {}", symptoms);

        List<SurveyAndTestData> surveyAndTestDatas = symptoms.getSurveyAndTestDatas();
        if(surveyAndTestDatas != null && Hibernate.isInitialized(surveyAndTestDatas)) {
            surveyAndTestDatas.forEach(_surveyAndTestData -> _surveyAndTestData.setSymptoms(symptoms));
        }

        this.wmGenericDao.update(symptoms);
        this.wmGenericDao.refresh(symptoms);

        // Deleting children which are not present in the list.
        if(surveyAndTestDatas != null && Hibernate.isInitialized(surveyAndTestDatas) && !surveyAndTestDatas.isEmpty()) {
            List<SurveyAndTestData> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, SurveyAndTestData.class,
                        new DaoUtils.ChildrenFilter<>("symptoms", symptoms, surveyAndTestDatas)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_surveyAndTestData -> surveyAndTestDataService.delete(_surveyAndTestData));
            symptoms.setSurveyAndTestDatas(surveyAndTestDatas);
        }

        return symptoms;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Symptoms delete(Integer symptomsId) {
        LOGGER.debug("Deleting Symptoms with id: {}", symptomsId);
        Symptoms deleted = this.wmGenericDao.findById(symptomsId);
        if (deleted == null) {
            LOGGER.debug("No Symptoms found with id: {}", symptomsId);
            throw new EntityNotFoundException(String.valueOf(symptomsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(Symptoms symptoms) {
        LOGGER.debug("Deleting Symptoms with {}", symptoms);
        this.wmGenericDao.delete(symptoms);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Symptoms> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Symptoms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Symptoms> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Symptoms");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table Symptoms to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table Symptoms to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SurveyAndTestData> findAssociatedSurveyAndTestDatas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated surveyAndTestDatas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("symptoms.id = '" + id + "'");

        return surveyAndTestDataService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SurveyAndTestDataService instance
     */
    protected void setSurveyAndTestDataService(SurveyAndTestDataService service) {
        this.surveyAndTestDataService = service;
    }

}