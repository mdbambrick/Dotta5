/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.ProbabilityAllergySymptomPrimary;


/**
 * ServiceImpl object for domain model class ProbabilityAllergySymptomPrimary.
 *
 * @see ProbabilityAllergySymptomPrimary
 */
@Service("medidata.ProbabilityAllergySymptomPrimaryService")
@Validated
public class ProbabilityAllergySymptomPrimaryServiceImpl implements ProbabilityAllergySymptomPrimaryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProbabilityAllergySymptomPrimaryServiceImpl.class);


    @Autowired
    @Qualifier("medidata.ProbabilityAllergySymptomPrimaryDao")
    private WMGenericDao<ProbabilityAllergySymptomPrimary, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ProbabilityAllergySymptomPrimary, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ProbabilityAllergySymptomPrimary create(ProbabilityAllergySymptomPrimary probabilityAllergySymptomPrimary) {
        LOGGER.debug("Creating a new ProbabilityAllergySymptomPrimary with information: {}", probabilityAllergySymptomPrimary);

        ProbabilityAllergySymptomPrimary probabilityAllergySymptomPrimaryCreated = this.wmGenericDao.create(probabilityAllergySymptomPrimary);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(probabilityAllergySymptomPrimaryCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ProbabilityAllergySymptomPrimary getById(Integer probabilityallergysymptomprimaryId) {
        LOGGER.debug("Finding ProbabilityAllergySymptomPrimary by id: {}", probabilityallergysymptomprimaryId);
        return this.wmGenericDao.findById(probabilityallergysymptomprimaryId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ProbabilityAllergySymptomPrimary findById(Integer probabilityallergysymptomprimaryId) {
        LOGGER.debug("Finding ProbabilityAllergySymptomPrimary by id: {}", probabilityallergysymptomprimaryId);
        try {
            return this.wmGenericDao.findById(probabilityallergysymptomprimaryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ProbabilityAllergySymptomPrimary found with id: {}", probabilityallergysymptomprimaryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<ProbabilityAllergySymptomPrimary> findByMultipleIds(List<Integer> probabilityallergysymptomprimaryIds, boolean orderedReturn) {
        LOGGER.debug("Finding ProbabilityAllergySymptomPrimaries by ids: {}", probabilityallergysymptomprimaryIds);

        return this.wmGenericDao.findByMultipleIds(probabilityallergysymptomprimaryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public ProbabilityAllergySymptomPrimary update(ProbabilityAllergySymptomPrimary probabilityAllergySymptomPrimary) {
        LOGGER.debug("Updating ProbabilityAllergySymptomPrimary with information: {}", probabilityAllergySymptomPrimary);

        this.wmGenericDao.update(probabilityAllergySymptomPrimary);
        this.wmGenericDao.refresh(probabilityAllergySymptomPrimary);

        return probabilityAllergySymptomPrimary;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ProbabilityAllergySymptomPrimary delete(Integer probabilityallergysymptomprimaryId) {
        LOGGER.debug("Deleting ProbabilityAllergySymptomPrimary with id: {}", probabilityallergysymptomprimaryId);
        ProbabilityAllergySymptomPrimary deleted = this.wmGenericDao.findById(probabilityallergysymptomprimaryId);
        if (deleted == null) {
            LOGGER.debug("No ProbabilityAllergySymptomPrimary found with id: {}", probabilityallergysymptomprimaryId);
            throw new EntityNotFoundException(String.valueOf(probabilityallergysymptomprimaryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(ProbabilityAllergySymptomPrimary probabilityAllergySymptomPrimary) {
        LOGGER.debug("Deleting ProbabilityAllergySymptomPrimary with {}", probabilityAllergySymptomPrimary);
        this.wmGenericDao.delete(probabilityAllergySymptomPrimary);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ProbabilityAllergySymptomPrimary> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProbabilityAllergySymptomPrimaries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ProbabilityAllergySymptomPrimary> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProbabilityAllergySymptomPrimaries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table ProbabilityAllergySymptomPrimary to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table ProbabilityAllergySymptomPrimary to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}