/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.CompoundsWithAllergens;
import com.dotta.medidata.CompoundsWithAllergensId;

/**
 * Service object for domain model class {@link CompoundsWithAllergens}.
 */
public interface CompoundsWithAllergensService {

    /**
     * Creates a new CompoundsWithAllergens. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CompoundsWithAllergens if any.
     *
     * @param compoundsWithAllergens Details of the CompoundsWithAllergens to be created; value cannot be null.
     * @return The newly created CompoundsWithAllergens.
     */
    CompoundsWithAllergens create(@Valid CompoundsWithAllergens compoundsWithAllergens);


	/**
     * Returns CompoundsWithAllergens by given id if exists.
     *
     * @param compoundswithallergensId The id of the CompoundsWithAllergens to get; value cannot be null.
     * @return CompoundsWithAllergens associated with the given compoundswithallergensId.
	 * @throws EntityNotFoundException If no CompoundsWithAllergens is found.
     */
    CompoundsWithAllergens getById(CompoundsWithAllergensId compoundswithallergensId);

    /**
     * Find and return the CompoundsWithAllergens by given id if exists, returns null otherwise.
     *
     * @param compoundswithallergensId The id of the CompoundsWithAllergens to get; value cannot be null.
     * @return CompoundsWithAllergens associated with the given compoundswithallergensId.
     */
    CompoundsWithAllergens findById(CompoundsWithAllergensId compoundswithallergensId);

	/**
     * Find and return the list of CompoundsWithAllergens by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param compoundswithallergensIds The id's of the CompoundsWithAllergens to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CompoundsWithAllergens associated with the given compoundswithallergensIds.
     */
    List<CompoundsWithAllergens> findByMultipleIds(List<CompoundsWithAllergensId> compoundswithallergensIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CompoundsWithAllergens. It replaces all fields of the existing CompoundsWithAllergens with the given compoundsWithAllergens.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CompoundsWithAllergens if any.
     *
     * @param compoundsWithAllergens The details of the CompoundsWithAllergens to be updated; value cannot be null.
     * @return The updated CompoundsWithAllergens.
     * @throws EntityNotFoundException if no CompoundsWithAllergens is found with given input.
     */
    CompoundsWithAllergens update(@Valid CompoundsWithAllergens compoundsWithAllergens);

    /**
     * Deletes an existing CompoundsWithAllergens with the given id.
     *
     * @param compoundswithallergensId The id of the CompoundsWithAllergens to be deleted; value cannot be null.
     * @return The deleted CompoundsWithAllergens.
     * @throws EntityNotFoundException if no CompoundsWithAllergens found with the given id.
     */
    CompoundsWithAllergens delete(CompoundsWithAllergensId compoundswithallergensId);

    /**
     * Deletes an existing CompoundsWithAllergens with the given object.
     *
     * @param compoundsWithAllergens The instance of the CompoundsWithAllergens to be deleted; value cannot be null.
     */
    void delete(CompoundsWithAllergens compoundsWithAllergens);

    /**
     * Find all CompoundsWithAllergens matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CompoundsWithAllergens.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CompoundsWithAllergens> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CompoundsWithAllergens matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CompoundsWithAllergens.
     *
     * @see Pageable
     * @see Page
     */
    Page<CompoundsWithAllergens> findAll(String query, Pageable pageable);

    /**
     * Exports all CompoundsWithAllergens matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CompoundsWithAllergens matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CompoundsWithAllergens in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CompoundsWithAllergens.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}