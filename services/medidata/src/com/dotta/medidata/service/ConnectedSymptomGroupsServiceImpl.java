/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.ConnectedSymptomGroups;


/**
 * ServiceImpl object for domain model class ConnectedSymptomGroups.
 *
 * @see ConnectedSymptomGroups
 */
@Service("medidata.ConnectedSymptomGroupsService")
@Validated
public class ConnectedSymptomGroupsServiceImpl implements ConnectedSymptomGroupsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectedSymptomGroupsServiceImpl.class);


    @Autowired
    @Qualifier("medidata.ConnectedSymptomGroupsDao")
    private WMGenericDao<ConnectedSymptomGroups, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ConnectedSymptomGroups, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomGroups create(ConnectedSymptomGroups connectedSymptomGroups) {
        LOGGER.debug("Creating a new ConnectedSymptomGroups with information: {}", connectedSymptomGroups);

        ConnectedSymptomGroups connectedSymptomGroupsCreated = this.wmGenericDao.create(connectedSymptomGroups);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(connectedSymptomGroupsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomGroups getById(Integer connectedsymptomgroupsId) {
        LOGGER.debug("Finding ConnectedSymptomGroups by id: {}", connectedsymptomgroupsId);
        return this.wmGenericDao.findById(connectedsymptomgroupsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomGroups findById(Integer connectedsymptomgroupsId) {
        LOGGER.debug("Finding ConnectedSymptomGroups by id: {}", connectedsymptomgroupsId);
        try {
            return this.wmGenericDao.findById(connectedsymptomgroupsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ConnectedSymptomGroups found with id: {}", connectedsymptomgroupsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<ConnectedSymptomGroups> findByMultipleIds(List<Integer> connectedsymptomgroupsIds, boolean orderedReturn) {
        LOGGER.debug("Finding ConnectedSymptomGroups by ids: {}", connectedsymptomgroupsIds);

        return this.wmGenericDao.findByMultipleIds(connectedsymptomgroupsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomGroups update(ConnectedSymptomGroups connectedSymptomGroups) {
        LOGGER.debug("Updating ConnectedSymptomGroups with information: {}", connectedSymptomGroups);

        this.wmGenericDao.update(connectedSymptomGroups);
        this.wmGenericDao.refresh(connectedSymptomGroups);

        return connectedSymptomGroups;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ConnectedSymptomGroups delete(Integer connectedsymptomgroupsId) {
        LOGGER.debug("Deleting ConnectedSymptomGroups with id: {}", connectedsymptomgroupsId);
        ConnectedSymptomGroups deleted = this.wmGenericDao.findById(connectedsymptomgroupsId);
        if (deleted == null) {
            LOGGER.debug("No ConnectedSymptomGroups found with id: {}", connectedsymptomgroupsId);
            throw new EntityNotFoundException(String.valueOf(connectedsymptomgroupsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(ConnectedSymptomGroups connectedSymptomGroups) {
        LOGGER.debug("Deleting ConnectedSymptomGroups with {}", connectedSymptomGroups);
        this.wmGenericDao.delete(connectedSymptomGroups);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ConnectedSymptomGroups> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ConnectedSymptomGroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ConnectedSymptomGroups> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ConnectedSymptomGroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table ConnectedSymptomGroups to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table ConnectedSymptomGroups to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}