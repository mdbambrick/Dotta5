/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.PatientSymptomsWithAuthorAndRankingAndColour;
import com.dotta.medidata.PatientSymptomsWithAuthorAndRankingAndColourId;


/**
 * ServiceImpl object for domain model class PatientSymptomsWithAuthorAndRankingAndColour.
 *
 * @see PatientSymptomsWithAuthorAndRankingAndColour
 */
@Service("medidata.PatientSymptomsWithAuthorAndRankingAndColourService")
@Validated
public class PatientSymptomsWithAuthorAndRankingAndColourServiceImpl implements PatientSymptomsWithAuthorAndRankingAndColourService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PatientSymptomsWithAuthorAndRankingAndColourServiceImpl.class);


    @Autowired
    @Qualifier("medidata.PatientSymptomsWithAuthorAndRankingAndColourDao")
    private WMGenericDao<PatientSymptomsWithAuthorAndRankingAndColour, PatientSymptomsWithAuthorAndRankingAndColourId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PatientSymptomsWithAuthorAndRankingAndColour, PatientSymptomsWithAuthorAndRankingAndColourId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public PatientSymptomsWithAuthorAndRankingAndColour create(PatientSymptomsWithAuthorAndRankingAndColour patientSymptomsWithAuthorAndRankingAndColour) {
        LOGGER.debug("Creating a new PatientSymptomsWithAuthorAndRankingAndColour with information: {}", patientSymptomsWithAuthorAndRankingAndColour);

        PatientSymptomsWithAuthorAndRankingAndColour patientSymptomsWithAuthorAndRankingAndColourCreated = this.wmGenericDao.create(patientSymptomsWithAuthorAndRankingAndColour);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(patientSymptomsWithAuthorAndRankingAndColourCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public PatientSymptomsWithAuthorAndRankingAndColour getById(PatientSymptomsWithAuthorAndRankingAndColourId patientsymptomswithauthorandrankingandcolourId) {
        LOGGER.debug("Finding PatientSymptomsWithAuthorAndRankingAndColour by id: {}", patientsymptomswithauthorandrankingandcolourId);
        return this.wmGenericDao.findById(patientsymptomswithauthorandrankingandcolourId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public PatientSymptomsWithAuthorAndRankingAndColour findById(PatientSymptomsWithAuthorAndRankingAndColourId patientsymptomswithauthorandrankingandcolourId) {
        LOGGER.debug("Finding PatientSymptomsWithAuthorAndRankingAndColour by id: {}", patientsymptomswithauthorandrankingandcolourId);
        try {
            return this.wmGenericDao.findById(patientsymptomswithauthorandrankingandcolourId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PatientSymptomsWithAuthorAndRankingAndColour found with id: {}", patientsymptomswithauthorandrankingandcolourId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<PatientSymptomsWithAuthorAndRankingAndColour> findByMultipleIds(List<PatientSymptomsWithAuthorAndRankingAndColourId> patientsymptomswithauthorandrankingandcolourIds, boolean orderedReturn) {
        LOGGER.debug("Finding PatientSymptomsWithAuthorAndRankingAndColours by ids: {}", patientsymptomswithauthorandrankingandcolourIds);

        return this.wmGenericDao.findByMultipleIds(patientsymptomswithauthorandrankingandcolourIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public PatientSymptomsWithAuthorAndRankingAndColour update(PatientSymptomsWithAuthorAndRankingAndColour patientSymptomsWithAuthorAndRankingAndColour) {
        LOGGER.debug("Updating PatientSymptomsWithAuthorAndRankingAndColour with information: {}", patientSymptomsWithAuthorAndRankingAndColour);

        this.wmGenericDao.update(patientSymptomsWithAuthorAndRankingAndColour);
        this.wmGenericDao.refresh(patientSymptomsWithAuthorAndRankingAndColour);

        return patientSymptomsWithAuthorAndRankingAndColour;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public PatientSymptomsWithAuthorAndRankingAndColour delete(PatientSymptomsWithAuthorAndRankingAndColourId patientsymptomswithauthorandrankingandcolourId) {
        LOGGER.debug("Deleting PatientSymptomsWithAuthorAndRankingAndColour with id: {}", patientsymptomswithauthorandrankingandcolourId);
        PatientSymptomsWithAuthorAndRankingAndColour deleted = this.wmGenericDao.findById(patientsymptomswithauthorandrankingandcolourId);
        if (deleted == null) {
            LOGGER.debug("No PatientSymptomsWithAuthorAndRankingAndColour found with id: {}", patientsymptomswithauthorandrankingandcolourId);
            throw new EntityNotFoundException(String.valueOf(patientsymptomswithauthorandrankingandcolourId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(PatientSymptomsWithAuthorAndRankingAndColour patientSymptomsWithAuthorAndRankingAndColour) {
        LOGGER.debug("Deleting PatientSymptomsWithAuthorAndRankingAndColour with {}", patientSymptomsWithAuthorAndRankingAndColour);
        this.wmGenericDao.delete(patientSymptomsWithAuthorAndRankingAndColour);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<PatientSymptomsWithAuthorAndRankingAndColour> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PatientSymptomsWithAuthorAndRankingAndColours");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<PatientSymptomsWithAuthorAndRankingAndColour> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PatientSymptomsWithAuthorAndRankingAndColours");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table PatientSymptomsWithAuthorAndRankingAndColour to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table PatientSymptomsWithAuthorAndRankingAndColour to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}