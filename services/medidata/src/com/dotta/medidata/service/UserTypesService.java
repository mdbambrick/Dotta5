/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.UserTypes;
import com.dotta.medidata.Users;

/**
 * Service object for domain model class {@link UserTypes}.
 */
public interface UserTypesService {

    /**
     * Creates a new UserTypes. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserTypes if any.
     *
     * @param userTypes Details of the UserTypes to be created; value cannot be null.
     * @return The newly created UserTypes.
     */
    UserTypes create(@Valid UserTypes userTypes);


	/**
     * Returns UserTypes by given id if exists.
     *
     * @param usertypesId The id of the UserTypes to get; value cannot be null.
     * @return UserTypes associated with the given usertypesId.
	 * @throws EntityNotFoundException If no UserTypes is found.
     */
    UserTypes getById(Integer usertypesId);

    /**
     * Find and return the UserTypes by given id if exists, returns null otherwise.
     *
     * @param usertypesId The id of the UserTypes to get; value cannot be null.
     * @return UserTypes associated with the given usertypesId.
     */
    UserTypes findById(Integer usertypesId);

	/**
     * Find and return the list of UserTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param usertypesIds The id's of the UserTypes to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserTypes associated with the given usertypesIds.
     */
    List<UserTypes> findByMultipleIds(List<Integer> usertypesIds, boolean orderedReturn);

    /**
     * Find and return the UserTypes for given id  if exists.
     *
     * @param id value of id; value cannot be null.
     * @return UserTypes associated with the given inputs.
     * @throws EntityNotFoundException if no matching UserTypes found.
     */
    UserTypes getByUniqueKeyId(int id);

    /**
     * Updates the details of an existing UserTypes. It replaces all fields of the existing UserTypes with the given userTypes.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserTypes if any.
     *
     * @param userTypes The details of the UserTypes to be updated; value cannot be null.
     * @return The updated UserTypes.
     * @throws EntityNotFoundException if no UserTypes is found with given input.
     */
    UserTypes update(@Valid UserTypes userTypes);

    /**
     * Deletes an existing UserTypes with the given id.
     *
     * @param usertypesId The id of the UserTypes to be deleted; value cannot be null.
     * @return The deleted UserTypes.
     * @throws EntityNotFoundException if no UserTypes found with the given id.
     */
    UserTypes delete(Integer usertypesId);

    /**
     * Deletes an existing UserTypes with the given object.
     *
     * @param userTypes The instance of the UserTypes to be deleted; value cannot be null.
     */
    void delete(UserTypes userTypes);

    /**
     * Find all UserTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserTypes> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserTypes> findAll(String query, Pageable pageable);

    /**
     * Exports all UserTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserTypes.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated userses for given UserTypes id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Users instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Users> findAssociatedUserses(Integer id, Pageable pageable);

}