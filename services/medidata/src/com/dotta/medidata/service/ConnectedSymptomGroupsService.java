/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.ConnectedSymptomGroups;

/**
 * Service object for domain model class {@link ConnectedSymptomGroups}.
 */
public interface ConnectedSymptomGroupsService {

    /**
     * Creates a new ConnectedSymptomGroups. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ConnectedSymptomGroups if any.
     *
     * @param connectedSymptomGroups Details of the ConnectedSymptomGroups to be created; value cannot be null.
     * @return The newly created ConnectedSymptomGroups.
     */
    ConnectedSymptomGroups create(@Valid ConnectedSymptomGroups connectedSymptomGroups);


	/**
     * Returns ConnectedSymptomGroups by given id if exists.
     *
     * @param connectedsymptomgroupsId The id of the ConnectedSymptomGroups to get; value cannot be null.
     * @return ConnectedSymptomGroups associated with the given connectedsymptomgroupsId.
	 * @throws EntityNotFoundException If no ConnectedSymptomGroups is found.
     */
    ConnectedSymptomGroups getById(Integer connectedsymptomgroupsId);

    /**
     * Find and return the ConnectedSymptomGroups by given id if exists, returns null otherwise.
     *
     * @param connectedsymptomgroupsId The id of the ConnectedSymptomGroups to get; value cannot be null.
     * @return ConnectedSymptomGroups associated with the given connectedsymptomgroupsId.
     */
    ConnectedSymptomGroups findById(Integer connectedsymptomgroupsId);

	/**
     * Find and return the list of ConnectedSymptomGroups by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param connectedsymptomgroupsIds The id's of the ConnectedSymptomGroups to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return ConnectedSymptomGroups associated with the given connectedsymptomgroupsIds.
     */
    List<ConnectedSymptomGroups> findByMultipleIds(List<Integer> connectedsymptomgroupsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing ConnectedSymptomGroups. It replaces all fields of the existing ConnectedSymptomGroups with the given connectedSymptomGroups.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ConnectedSymptomGroups if any.
     *
     * @param connectedSymptomGroups The details of the ConnectedSymptomGroups to be updated; value cannot be null.
     * @return The updated ConnectedSymptomGroups.
     * @throws EntityNotFoundException if no ConnectedSymptomGroups is found with given input.
     */
    ConnectedSymptomGroups update(@Valid ConnectedSymptomGroups connectedSymptomGroups);

    /**
     * Deletes an existing ConnectedSymptomGroups with the given id.
     *
     * @param connectedsymptomgroupsId The id of the ConnectedSymptomGroups to be deleted; value cannot be null.
     * @return The deleted ConnectedSymptomGroups.
     * @throws EntityNotFoundException if no ConnectedSymptomGroups found with the given id.
     */
    ConnectedSymptomGroups delete(Integer connectedsymptomgroupsId);

    /**
     * Deletes an existing ConnectedSymptomGroups with the given object.
     *
     * @param connectedSymptomGroups The instance of the ConnectedSymptomGroups to be deleted; value cannot be null.
     */
    void delete(ConnectedSymptomGroups connectedSymptomGroups);

    /**
     * Find all ConnectedSymptomGroups matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ConnectedSymptomGroups.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<ConnectedSymptomGroups> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all ConnectedSymptomGroups matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ConnectedSymptomGroups.
     *
     * @see Pageable
     * @see Page
     */
    Page<ConnectedSymptomGroups> findAll(String query, Pageable pageable);

    /**
     * Exports all ConnectedSymptomGroups matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all ConnectedSymptomGroups matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the ConnectedSymptomGroups in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the ConnectedSymptomGroups.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}