/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.QnGroup;


/**
 * ServiceImpl object for domain model class QnGroup.
 *
 * @see QnGroup
 */
@Service("medidata.QnGroupService")
@Validated
public class QnGroupServiceImpl implements QnGroupService {

    private static final Logger LOGGER = LoggerFactory.getLogger(QnGroupServiceImpl.class);


    @Autowired
    @Qualifier("medidata.QnGroupDao")
    private WMGenericDao<QnGroup, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QnGroup, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public QnGroup create(QnGroup qnGroup) {
        LOGGER.debug("Creating a new QnGroup with information: {}", qnGroup);

        QnGroup qnGroupCreated = this.wmGenericDao.create(qnGroup);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qnGroupCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public QnGroup getById(Integer qngroupId) {
        LOGGER.debug("Finding QnGroup by id: {}", qngroupId);
        return this.wmGenericDao.findById(qngroupId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public QnGroup findById(Integer qngroupId) {
        LOGGER.debug("Finding QnGroup by id: {}", qngroupId);
        try {
            return this.wmGenericDao.findById(qngroupId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QnGroup found with id: {}", qngroupId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<QnGroup> findByMultipleIds(List<Integer> qngroupIds, boolean orderedReturn) {
        LOGGER.debug("Finding QnGroups by ids: {}", qngroupIds);

        return this.wmGenericDao.findByMultipleIds(qngroupIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public QnGroup update(QnGroup qnGroup) {
        LOGGER.debug("Updating QnGroup with information: {}", qnGroup);

        this.wmGenericDao.update(qnGroup);
        this.wmGenericDao.refresh(qnGroup);

        return qnGroup;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public QnGroup delete(Integer qngroupId) {
        LOGGER.debug("Deleting QnGroup with id: {}", qngroupId);
        QnGroup deleted = this.wmGenericDao.findById(qngroupId);
        if (deleted == null) {
            LOGGER.debug("No QnGroup found with id: {}", qngroupId);
            throw new EntityNotFoundException(String.valueOf(qngroupId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(QnGroup qnGroup) {
        LOGGER.debug("Deleting QnGroup with {}", qnGroup);
        this.wmGenericDao.delete(qnGroup);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<QnGroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QnGroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<QnGroup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QnGroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table QnGroup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table QnGroup to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}