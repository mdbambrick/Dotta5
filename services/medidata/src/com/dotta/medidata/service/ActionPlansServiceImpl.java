/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.ActionPlans;
import com.dotta.medidata.ActionsDiagnoses;


/**
 * ServiceImpl object for domain model class ActionPlans.
 *
 * @see ActionPlans
 */
@Service("medidata.ActionPlansService")
@Validated
public class ActionPlansServiceImpl implements ActionPlansService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActionPlansServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.ActionsDiagnosesService")
    private ActionsDiagnosesService actionsDiagnosesService;

    @Autowired
    @Qualifier("medidata.ActionPlansDao")
    private WMGenericDao<ActionPlans, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ActionPlans, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ActionPlans create(ActionPlans actionPlans) {
        LOGGER.debug("Creating a new ActionPlans with information: {}", actionPlans);

        List<ActionsDiagnoses> actionsDiagnoseses = actionPlans.getActionsDiagnoseses();
        if(actionsDiagnoseses != null && Hibernate.isInitialized(actionsDiagnoseses)) {
            actionsDiagnoseses.forEach(_actionsDiagnoses -> _actionsDiagnoses.setActionPlans(actionPlans));
        }

        ActionPlans actionPlansCreated = this.wmGenericDao.create(actionPlans);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(actionPlansCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ActionPlans getById(Integer actionplansId) {
        LOGGER.debug("Finding ActionPlans by id: {}", actionplansId);
        return this.wmGenericDao.findById(actionplansId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ActionPlans findById(Integer actionplansId) {
        LOGGER.debug("Finding ActionPlans by id: {}", actionplansId);
        try {
            return this.wmGenericDao.findById(actionplansId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ActionPlans found with id: {}", actionplansId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<ActionPlans> findByMultipleIds(List<Integer> actionplansIds, boolean orderedReturn) {
        LOGGER.debug("Finding ActionPlans by ids: {}", actionplansIds);

        return this.wmGenericDao.findByMultipleIds(actionplansIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public ActionPlans update(ActionPlans actionPlans) {
        LOGGER.debug("Updating ActionPlans with information: {}", actionPlans);

        List<ActionsDiagnoses> actionsDiagnoseses = actionPlans.getActionsDiagnoseses();
        if(actionsDiagnoseses != null && Hibernate.isInitialized(actionsDiagnoseses)) {
            actionsDiagnoseses.forEach(_actionsDiagnoses -> _actionsDiagnoses.setActionPlans(actionPlans));
        }

        this.wmGenericDao.update(actionPlans);
        this.wmGenericDao.refresh(actionPlans);

        // Deleting children which are not present in the list.
        if(actionsDiagnoseses != null && Hibernate.isInitialized(actionsDiagnoseses) && !actionsDiagnoseses.isEmpty()) {
            List<ActionsDiagnoses> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, ActionsDiagnoses.class,
                        new DaoUtils.ChildrenFilter<>("actionPlans", actionPlans, actionsDiagnoseses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_actionsDiagnoses -> actionsDiagnosesService.delete(_actionsDiagnoses));
            actionPlans.setActionsDiagnoseses(actionsDiagnoseses);
        }

        return actionPlans;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ActionPlans delete(Integer actionplansId) {
        LOGGER.debug("Deleting ActionPlans with id: {}", actionplansId);
        ActionPlans deleted = this.wmGenericDao.findById(actionplansId);
        if (deleted == null) {
            LOGGER.debug("No ActionPlans found with id: {}", actionplansId);
            throw new EntityNotFoundException(String.valueOf(actionplansId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(ActionPlans actionPlans) {
        LOGGER.debug("Deleting ActionPlans with {}", actionPlans);
        this.wmGenericDao.delete(actionPlans);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ActionPlans> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ActionPlans");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ActionPlans> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ActionPlans");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table ActionPlans to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table ActionPlans to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ActionsDiagnoses> findAssociatedActionsDiagnoseses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated actionsDiagnoseses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("actionPlans.id = '" + id + "'");

        return actionsDiagnosesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ActionsDiagnosesService instance
     */
    protected void setActionsDiagnosesService(ActionsDiagnosesService service) {
        this.actionsDiagnosesService = service;
    }

}