/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.SessionIdWithUserIdAndPatientId;
import com.dotta.medidata.SessionIdWithUserIdAndPatientIdId;


/**
 * ServiceImpl object for domain model class SessionIdWithUserIdAndPatientId.
 *
 * @see SessionIdWithUserIdAndPatientId
 */
@Service("medidata.SessionIdWithUserIdAndPatientIdService")
@Validated
public class SessionIdWithUserIdAndPatientIdServiceImpl implements SessionIdWithUserIdAndPatientIdService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SessionIdWithUserIdAndPatientIdServiceImpl.class);


    @Autowired
    @Qualifier("medidata.SessionIdWithUserIdAndPatientIdDao")
    private WMGenericDao<SessionIdWithUserIdAndPatientId, SessionIdWithUserIdAndPatientIdId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SessionIdWithUserIdAndPatientId, SessionIdWithUserIdAndPatientIdId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public SessionIdWithUserIdAndPatientId create(SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId) {
        LOGGER.debug("Creating a new SessionIdWithUserIdAndPatientId with information: {}", sessionIdWithUserIdAndPatientId);

        SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientIdCreated = this.wmGenericDao.create(sessionIdWithUserIdAndPatientId);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(sessionIdWithUserIdAndPatientIdCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public SessionIdWithUserIdAndPatientId getById(SessionIdWithUserIdAndPatientIdId sessionidwithuseridandpatientidId) {
        LOGGER.debug("Finding SessionIdWithUserIdAndPatientId by id: {}", sessionidwithuseridandpatientidId);
        return this.wmGenericDao.findById(sessionidwithuseridandpatientidId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public SessionIdWithUserIdAndPatientId findById(SessionIdWithUserIdAndPatientIdId sessionidwithuseridandpatientidId) {
        LOGGER.debug("Finding SessionIdWithUserIdAndPatientId by id: {}", sessionidwithuseridandpatientidId);
        try {
            return this.wmGenericDao.findById(sessionidwithuseridandpatientidId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SessionIdWithUserIdAndPatientId found with id: {}", sessionidwithuseridandpatientidId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<SessionIdWithUserIdAndPatientId> findByMultipleIds(List<SessionIdWithUserIdAndPatientIdId> sessionidwithuseridandpatientidIds, boolean orderedReturn) {
        LOGGER.debug("Finding SessionIdWithUserIdAndPatientIds by ids: {}", sessionidwithuseridandpatientidIds);

        return this.wmGenericDao.findByMultipleIds(sessionidwithuseridandpatientidIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public SessionIdWithUserIdAndPatientId update(SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId) {
        LOGGER.debug("Updating SessionIdWithUserIdAndPatientId with information: {}", sessionIdWithUserIdAndPatientId);

        this.wmGenericDao.update(sessionIdWithUserIdAndPatientId);
        this.wmGenericDao.refresh(sessionIdWithUserIdAndPatientId);

        return sessionIdWithUserIdAndPatientId;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public SessionIdWithUserIdAndPatientId delete(SessionIdWithUserIdAndPatientIdId sessionidwithuseridandpatientidId) {
        LOGGER.debug("Deleting SessionIdWithUserIdAndPatientId with id: {}", sessionidwithuseridandpatientidId);
        SessionIdWithUserIdAndPatientId deleted = this.wmGenericDao.findById(sessionidwithuseridandpatientidId);
        if (deleted == null) {
            LOGGER.debug("No SessionIdWithUserIdAndPatientId found with id: {}", sessionidwithuseridandpatientidId);
            throw new EntityNotFoundException(String.valueOf(sessionidwithuseridandpatientidId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId) {
        LOGGER.debug("Deleting SessionIdWithUserIdAndPatientId with {}", sessionIdWithUserIdAndPatientId);
        this.wmGenericDao.delete(sessionIdWithUserIdAndPatientId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SessionIdWithUserIdAndPatientId> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SessionIdWithUserIdAndPatientIds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SessionIdWithUserIdAndPatientId> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SessionIdWithUserIdAndPatientIds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table SessionIdWithUserIdAndPatientId to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table SessionIdWithUserIdAndPatientId to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}