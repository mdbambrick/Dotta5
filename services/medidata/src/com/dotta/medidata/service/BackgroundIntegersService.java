/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.BackgroundIntegers;

/**
 * Service object for domain model class {@link BackgroundIntegers}.
 */
public interface BackgroundIntegersService {

    /**
     * Creates a new BackgroundIntegers. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BackgroundIntegers if any.
     *
     * @param backgroundIntegers Details of the BackgroundIntegers to be created; value cannot be null.
     * @return The newly created BackgroundIntegers.
     */
    BackgroundIntegers create(@Valid BackgroundIntegers backgroundIntegers);


	/**
     * Returns BackgroundIntegers by given id if exists.
     *
     * @param backgroundintegersId The id of the BackgroundIntegers to get; value cannot be null.
     * @return BackgroundIntegers associated with the given backgroundintegersId.
	 * @throws EntityNotFoundException If no BackgroundIntegers is found.
     */
    BackgroundIntegers getById(Integer backgroundintegersId);

    /**
     * Find and return the BackgroundIntegers by given id if exists, returns null otherwise.
     *
     * @param backgroundintegersId The id of the BackgroundIntegers to get; value cannot be null.
     * @return BackgroundIntegers associated with the given backgroundintegersId.
     */
    BackgroundIntegers findById(Integer backgroundintegersId);

	/**
     * Find and return the list of BackgroundIntegers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param backgroundintegersIds The id's of the BackgroundIntegers to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return BackgroundIntegers associated with the given backgroundintegersIds.
     */
    List<BackgroundIntegers> findByMultipleIds(List<Integer> backgroundintegersIds, boolean orderedReturn);


    /**
     * Updates the details of an existing BackgroundIntegers. It replaces all fields of the existing BackgroundIntegers with the given backgroundIntegers.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BackgroundIntegers if any.
     *
     * @param backgroundIntegers The details of the BackgroundIntegers to be updated; value cannot be null.
     * @return The updated BackgroundIntegers.
     * @throws EntityNotFoundException if no BackgroundIntegers is found with given input.
     */
    BackgroundIntegers update(@Valid BackgroundIntegers backgroundIntegers);

    /**
     * Deletes an existing BackgroundIntegers with the given id.
     *
     * @param backgroundintegersId The id of the BackgroundIntegers to be deleted; value cannot be null.
     * @return The deleted BackgroundIntegers.
     * @throws EntityNotFoundException if no BackgroundIntegers found with the given id.
     */
    BackgroundIntegers delete(Integer backgroundintegersId);

    /**
     * Deletes an existing BackgroundIntegers with the given object.
     *
     * @param backgroundIntegers The instance of the BackgroundIntegers to be deleted; value cannot be null.
     */
    void delete(BackgroundIntegers backgroundIntegers);

    /**
     * Find all BackgroundIntegers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BackgroundIntegers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<BackgroundIntegers> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all BackgroundIntegers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BackgroundIntegers.
     *
     * @see Pageable
     * @see Page
     */
    Page<BackgroundIntegers> findAll(String query, Pageable pageable);

    /**
     * Exports all BackgroundIntegers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all BackgroundIntegers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the BackgroundIntegers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the BackgroundIntegers.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}