/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.CompoundsAllergies;


/**
 * ServiceImpl object for domain model class CompoundsAllergies.
 *
 * @see CompoundsAllergies
 */
@Service("medidata.CompoundsAllergiesService")
@Validated
public class CompoundsAllergiesServiceImpl implements CompoundsAllergiesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompoundsAllergiesServiceImpl.class);


    @Autowired
    @Qualifier("medidata.CompoundsAllergiesDao")
    private WMGenericDao<CompoundsAllergies, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompoundsAllergies, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public CompoundsAllergies create(CompoundsAllergies compoundsAllergies) {
        LOGGER.debug("Creating a new CompoundsAllergies with information: {}", compoundsAllergies);

        CompoundsAllergies compoundsAllergiesCreated = this.wmGenericDao.create(compoundsAllergies);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compoundsAllergiesCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public CompoundsAllergies getById(Integer compoundsallergiesId) {
        LOGGER.debug("Finding CompoundsAllergies by id: {}", compoundsallergiesId);
        return this.wmGenericDao.findById(compoundsallergiesId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public CompoundsAllergies findById(Integer compoundsallergiesId) {
        LOGGER.debug("Finding CompoundsAllergies by id: {}", compoundsallergiesId);
        try {
            return this.wmGenericDao.findById(compoundsallergiesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompoundsAllergies found with id: {}", compoundsallergiesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<CompoundsAllergies> findByMultipleIds(List<Integer> compoundsallergiesIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompoundsAllergies by ids: {}", compoundsallergiesIds);

        return this.wmGenericDao.findByMultipleIds(compoundsallergiesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public CompoundsAllergies update(CompoundsAllergies compoundsAllergies) {
        LOGGER.debug("Updating CompoundsAllergies with information: {}", compoundsAllergies);

        this.wmGenericDao.update(compoundsAllergies);
        this.wmGenericDao.refresh(compoundsAllergies);

        return compoundsAllergies;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public CompoundsAllergies delete(Integer compoundsallergiesId) {
        LOGGER.debug("Deleting CompoundsAllergies with id: {}", compoundsallergiesId);
        CompoundsAllergies deleted = this.wmGenericDao.findById(compoundsallergiesId);
        if (deleted == null) {
            LOGGER.debug("No CompoundsAllergies found with id: {}", compoundsallergiesId);
            throw new EntityNotFoundException(String.valueOf(compoundsallergiesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(CompoundsAllergies compoundsAllergies) {
        LOGGER.debug("Deleting CompoundsAllergies with {}", compoundsAllergies);
        this.wmGenericDao.delete(compoundsAllergies);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<CompoundsAllergies> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompoundsAllergies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<CompoundsAllergies> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompoundsAllergies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table CompoundsAllergies to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table CompoundsAllergies to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}