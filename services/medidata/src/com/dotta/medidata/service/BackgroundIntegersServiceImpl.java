/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.BackgroundIntegers;


/**
 * ServiceImpl object for domain model class BackgroundIntegers.
 *
 * @see BackgroundIntegers
 */
@Service("medidata.BackgroundIntegersService")
@Validated
public class BackgroundIntegersServiceImpl implements BackgroundIntegersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BackgroundIntegersServiceImpl.class);


    @Autowired
    @Qualifier("medidata.BackgroundIntegersDao")
    private WMGenericDao<BackgroundIntegers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BackgroundIntegers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public BackgroundIntegers create(BackgroundIntegers backgroundIntegers) {
        LOGGER.debug("Creating a new BackgroundIntegers with information: {}", backgroundIntegers);

        BackgroundIntegers backgroundIntegersCreated = this.wmGenericDao.create(backgroundIntegers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(backgroundIntegersCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public BackgroundIntegers getById(Integer backgroundintegersId) {
        LOGGER.debug("Finding BackgroundIntegers by id: {}", backgroundintegersId);
        return this.wmGenericDao.findById(backgroundintegersId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public BackgroundIntegers findById(Integer backgroundintegersId) {
        LOGGER.debug("Finding BackgroundIntegers by id: {}", backgroundintegersId);
        try {
            return this.wmGenericDao.findById(backgroundintegersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No BackgroundIntegers found with id: {}", backgroundintegersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<BackgroundIntegers> findByMultipleIds(List<Integer> backgroundintegersIds, boolean orderedReturn) {
        LOGGER.debug("Finding BackgroundIntegers by ids: {}", backgroundintegersIds);

        return this.wmGenericDao.findByMultipleIds(backgroundintegersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public BackgroundIntegers update(BackgroundIntegers backgroundIntegers) {
        LOGGER.debug("Updating BackgroundIntegers with information: {}", backgroundIntegers);

        this.wmGenericDao.update(backgroundIntegers);
        this.wmGenericDao.refresh(backgroundIntegers);

        return backgroundIntegers;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public BackgroundIntegers delete(Integer backgroundintegersId) {
        LOGGER.debug("Deleting BackgroundIntegers with id: {}", backgroundintegersId);
        BackgroundIntegers deleted = this.wmGenericDao.findById(backgroundintegersId);
        if (deleted == null) {
            LOGGER.debug("No BackgroundIntegers found with id: {}", backgroundintegersId);
            throw new EntityNotFoundException(String.valueOf(backgroundintegersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(BackgroundIntegers backgroundIntegers) {
        LOGGER.debug("Deleting BackgroundIntegers with {}", backgroundIntegers);
        this.wmGenericDao.delete(backgroundIntegers);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<BackgroundIntegers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BackgroundIntegers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<BackgroundIntegers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BackgroundIntegers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table BackgroundIntegers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table BackgroundIntegers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}