/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.export.ExportOptions;

import com.dotta.medidata.models.query.*;

public interface MedidataQueryExecutorService {

    Page<TrackReadResponse> executeTrackRead(Integer userId, Pageable pageable);

    void exportTrackRead(Integer userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<ListCliniciansforPatientResponse> executeListCliniciansforPatient(Integer id, Pageable pageable);

    void exportListCliniciansforPatient(Integer id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeAddSymptom(AddSymptomRequest addSymptomRequest);

    Page<PatientSymptomsByAllergyResponse> executePatientSymptomsByAllergy(Integer id, Pageable pageable);

    void exportPatientSymptomsByAllergy(Integer id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<ShareCodeResponse> executeShareCode(Integer userId, Pageable pageable);

    void exportShareCode(Integer userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<MedicsWithPatientsResponse> executeMedicsWithPatients(String id, Pageable pageable);

    void exportMedicsWithPatients(String id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<PatientReadResponse> executePatientRead(Integer patientId, Pageable pageable);

    void exportPatientRead(Integer patientId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<ClinicianListResponse> executeClinician_List(Pageable pageable);

    void exportClinician_List(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeRemoveClincian(String patientId, Integer userId);

    Page<PatientMedicsResponse> executePatientMedics(Integer patientId, Pageable pageable);

    void exportPatientMedics(Integer patientId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeForgotPassword(ForgotPasswordRequest forgotPasswordRequest);

    Page<BackgroundReadResponse> executeBackgroundRead(Integer patientId, Pageable pageable);

    void exportBackgroundRead(Integer patientId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

}