/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.PatientSymptomsWithAuthor;
import com.dotta.medidata.PatientSymptomsWithAuthorId;

/**
 * Service object for domain model class {@link PatientSymptomsWithAuthor}.
 */
public interface PatientSymptomsWithAuthorService {

    /**
     * Creates a new PatientSymptomsWithAuthor. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PatientSymptomsWithAuthor if any.
     *
     * @param patientSymptomsWithAuthor Details of the PatientSymptomsWithAuthor to be created; value cannot be null.
     * @return The newly created PatientSymptomsWithAuthor.
     */
    PatientSymptomsWithAuthor create(@Valid PatientSymptomsWithAuthor patientSymptomsWithAuthor);


	/**
     * Returns PatientSymptomsWithAuthor by given id if exists.
     *
     * @param patientsymptomswithauthorId The id of the PatientSymptomsWithAuthor to get; value cannot be null.
     * @return PatientSymptomsWithAuthor associated with the given patientsymptomswithauthorId.
	 * @throws EntityNotFoundException If no PatientSymptomsWithAuthor is found.
     */
    PatientSymptomsWithAuthor getById(PatientSymptomsWithAuthorId patientsymptomswithauthorId);

    /**
     * Find and return the PatientSymptomsWithAuthor by given id if exists, returns null otherwise.
     *
     * @param patientsymptomswithauthorId The id of the PatientSymptomsWithAuthor to get; value cannot be null.
     * @return PatientSymptomsWithAuthor associated with the given patientsymptomswithauthorId.
     */
    PatientSymptomsWithAuthor findById(PatientSymptomsWithAuthorId patientsymptomswithauthorId);

	/**
     * Find and return the list of PatientSymptomsWithAuthors by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param patientsymptomswithauthorIds The id's of the PatientSymptomsWithAuthor to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PatientSymptomsWithAuthors associated with the given patientsymptomswithauthorIds.
     */
    List<PatientSymptomsWithAuthor> findByMultipleIds(List<PatientSymptomsWithAuthorId> patientsymptomswithauthorIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PatientSymptomsWithAuthor. It replaces all fields of the existing PatientSymptomsWithAuthor with the given patientSymptomsWithAuthor.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PatientSymptomsWithAuthor if any.
     *
     * @param patientSymptomsWithAuthor The details of the PatientSymptomsWithAuthor to be updated; value cannot be null.
     * @return The updated PatientSymptomsWithAuthor.
     * @throws EntityNotFoundException if no PatientSymptomsWithAuthor is found with given input.
     */
    PatientSymptomsWithAuthor update(@Valid PatientSymptomsWithAuthor patientSymptomsWithAuthor);

    /**
     * Deletes an existing PatientSymptomsWithAuthor with the given id.
     *
     * @param patientsymptomswithauthorId The id of the PatientSymptomsWithAuthor to be deleted; value cannot be null.
     * @return The deleted PatientSymptomsWithAuthor.
     * @throws EntityNotFoundException if no PatientSymptomsWithAuthor found with the given id.
     */
    PatientSymptomsWithAuthor delete(PatientSymptomsWithAuthorId patientsymptomswithauthorId);

    /**
     * Deletes an existing PatientSymptomsWithAuthor with the given object.
     *
     * @param patientSymptomsWithAuthor The instance of the PatientSymptomsWithAuthor to be deleted; value cannot be null.
     */
    void delete(PatientSymptomsWithAuthor patientSymptomsWithAuthor);

    /**
     * Find all PatientSymptomsWithAuthors matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PatientSymptomsWithAuthors.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PatientSymptomsWithAuthor> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PatientSymptomsWithAuthors matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PatientSymptomsWithAuthors.
     *
     * @see Pageable
     * @see Page
     */
    Page<PatientSymptomsWithAuthor> findAll(String query, Pageable pageable);

    /**
     * Exports all PatientSymptomsWithAuthors matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PatientSymptomsWithAuthors matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PatientSymptomsWithAuthors in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PatientSymptomsWithAuthor.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}