/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Diagnoses;
import com.dotta.medidata.ProcessStages;


/**
 * ServiceImpl object for domain model class ProcessStages.
 *
 * @see ProcessStages
 */
@Service("medidata.ProcessStagesService")
@Validated
public class ProcessStagesServiceImpl implements ProcessStagesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcessStagesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.DiagnosesService")
    private DiagnosesService diagnosesService;

    @Autowired
    @Qualifier("medidata.ProcessStagesDao")
    private WMGenericDao<ProcessStages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ProcessStages, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ProcessStages create(ProcessStages processStages) {
        LOGGER.debug("Creating a new ProcessStages with information: {}", processStages);

        List<Diagnoses> diagnoseses = processStages.getDiagnoseses();
        if(diagnoseses != null && Hibernate.isInitialized(diagnoseses)) {
            diagnoseses.forEach(_diagnoses -> _diagnoses.setProcessStages(processStages));
        }

        ProcessStages processStagesCreated = this.wmGenericDao.create(processStages);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(processStagesCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ProcessStages getById(Integer processstagesId) {
        LOGGER.debug("Finding ProcessStages by id: {}", processstagesId);
        return this.wmGenericDao.findById(processstagesId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ProcessStages findById(Integer processstagesId) {
        LOGGER.debug("Finding ProcessStages by id: {}", processstagesId);
        try {
            return this.wmGenericDao.findById(processstagesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ProcessStages found with id: {}", processstagesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<ProcessStages> findByMultipleIds(List<Integer> processstagesIds, boolean orderedReturn) {
        LOGGER.debug("Finding ProcessStages by ids: {}", processstagesIds);

        return this.wmGenericDao.findByMultipleIds(processstagesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public ProcessStages update(ProcessStages processStages) {
        LOGGER.debug("Updating ProcessStages with information: {}", processStages);

        List<Diagnoses> diagnoseses = processStages.getDiagnoseses();
        if(diagnoseses != null && Hibernate.isInitialized(diagnoseses)) {
            diagnoseses.forEach(_diagnoses -> _diagnoses.setProcessStages(processStages));
        }

        this.wmGenericDao.update(processStages);
        this.wmGenericDao.refresh(processStages);

        // Deleting children which are not present in the list.
        if(diagnoseses != null && Hibernate.isInitialized(diagnoseses) && !diagnoseses.isEmpty()) {
            List<Diagnoses> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Diagnoses.class,
                        new DaoUtils.ChildrenFilter<>("processStages", processStages, diagnoseses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_diagnoses -> diagnosesService.delete(_diagnoses));
            processStages.setDiagnoseses(diagnoseses);
        }

        return processStages;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ProcessStages delete(Integer processstagesId) {
        LOGGER.debug("Deleting ProcessStages with id: {}", processstagesId);
        ProcessStages deleted = this.wmGenericDao.findById(processstagesId);
        if (deleted == null) {
            LOGGER.debug("No ProcessStages found with id: {}", processstagesId);
            throw new EntityNotFoundException(String.valueOf(processstagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(ProcessStages processStages) {
        LOGGER.debug("Deleting ProcessStages with {}", processStages);
        this.wmGenericDao.delete(processStages);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ProcessStages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProcessStages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ProcessStages> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProcessStages");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table ProcessStages to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table ProcessStages to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Diagnoses> findAssociatedDiagnoseses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated diagnoseses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("processStages.id = '" + id + "'");

        return diagnosesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DiagnosesService instance
     */
    protected void setDiagnosesService(DiagnosesService service) {
        this.diagnosesService = service;
    }

}