/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.UserTypes;
import com.dotta.medidata.Users;


/**
 * ServiceImpl object for domain model class UserTypes.
 *
 * @see UserTypes
 */
@Service("medidata.UserTypesService")
@Validated
public class UserTypesServiceImpl implements UserTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserTypesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.UsersService")
    private UsersService usersService;

    @Autowired
    @Qualifier("medidata.UserTypesDao")
    private WMGenericDao<UserTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public UserTypes create(UserTypes userTypes) {
        LOGGER.debug("Creating a new UserTypes with information: {}", userTypes);

        UserTypes userTypesCreated = this.wmGenericDao.create(userTypes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userTypesCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public UserTypes getById(Integer usertypesId) {
        LOGGER.debug("Finding UserTypes by id: {}", usertypesId);
        return this.wmGenericDao.findById(usertypesId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public UserTypes findById(Integer usertypesId) {
        LOGGER.debug("Finding UserTypes by id: {}", usertypesId);
        try {
            return this.wmGenericDao.findById(usertypesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserTypes found with id: {}", usertypesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<UserTypes> findByMultipleIds(List<Integer> usertypesIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserTypes by ids: {}", usertypesIds);

        return this.wmGenericDao.findByMultipleIds(usertypesIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public UserTypes getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding UserTypes by unique keys: {}", uniqueKeyIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public UserTypes update(UserTypes userTypes) {
        LOGGER.debug("Updating UserTypes with information: {}", userTypes);

        List<Users> userses = userTypes.getUserses();
        if(userses != null && Hibernate.isInitialized(userses)) {
            userses.forEach(_users -> _users.setUserTypes(userTypes));
        }

        this.wmGenericDao.update(userTypes);
        this.wmGenericDao.refresh(userTypes);

        // Deleting children which are not present in the list.
        if(userses != null && Hibernate.isInitialized(userses) && !userses.isEmpty()) {
            List<Users> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Users.class,
                        new DaoUtils.ChildrenFilter<>("userTypes", userTypes, userses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_users -> usersService.delete(_users));
            userTypes.setUserses(userses);
        }

        return userTypes;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public UserTypes delete(Integer usertypesId) {
        LOGGER.debug("Deleting UserTypes with id: {}", usertypesId);
        UserTypes deleted = this.wmGenericDao.findById(usertypesId);
        if (deleted == null) {
            LOGGER.debug("No UserTypes found with id: {}", usertypesId);
            throw new EntityNotFoundException(String.valueOf(usertypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(UserTypes userTypes) {
        LOGGER.debug("Deleting UserTypes with {}", userTypes);
        this.wmGenericDao.delete(userTypes);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<UserTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<UserTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table UserTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table UserTypes to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Users> findAssociatedUserses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userTypes.id = '" + id + "'");

        return usersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UsersService instance
     */
    protected void setUsersService(UsersService service) {
        this.usersService = service;
    }

}