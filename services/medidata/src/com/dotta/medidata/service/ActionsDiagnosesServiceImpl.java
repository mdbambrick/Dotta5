/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.ActionsDiagnoses;


/**
 * ServiceImpl object for domain model class ActionsDiagnoses.
 *
 * @see ActionsDiagnoses
 */
@Service("medidata.ActionsDiagnosesService")
@Validated
public class ActionsDiagnosesServiceImpl implements ActionsDiagnosesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActionsDiagnosesServiceImpl.class);


    @Autowired
    @Qualifier("medidata.ActionsDiagnosesDao")
    private WMGenericDao<ActionsDiagnoses, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ActionsDiagnoses, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ActionsDiagnoses create(ActionsDiagnoses actionsDiagnoses) {
        LOGGER.debug("Creating a new ActionsDiagnoses with information: {}", actionsDiagnoses);

        ActionsDiagnoses actionsDiagnosesCreated = this.wmGenericDao.create(actionsDiagnoses);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(actionsDiagnosesCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ActionsDiagnoses getById(Integer actionsdiagnosesId) {
        LOGGER.debug("Finding ActionsDiagnoses by id: {}", actionsdiagnosesId);
        return this.wmGenericDao.findById(actionsdiagnosesId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public ActionsDiagnoses findById(Integer actionsdiagnosesId) {
        LOGGER.debug("Finding ActionsDiagnoses by id: {}", actionsdiagnosesId);
        try {
            return this.wmGenericDao.findById(actionsdiagnosesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ActionsDiagnoses found with id: {}", actionsdiagnosesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<ActionsDiagnoses> findByMultipleIds(List<Integer> actionsdiagnosesIds, boolean orderedReturn) {
        LOGGER.debug("Finding ActionsDiagnoses by ids: {}", actionsdiagnosesIds);

        return this.wmGenericDao.findByMultipleIds(actionsdiagnosesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public ActionsDiagnoses update(ActionsDiagnoses actionsDiagnoses) {
        LOGGER.debug("Updating ActionsDiagnoses with information: {}", actionsDiagnoses);

        this.wmGenericDao.update(actionsDiagnoses);
        this.wmGenericDao.refresh(actionsDiagnoses);

        return actionsDiagnoses;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public ActionsDiagnoses delete(Integer actionsdiagnosesId) {
        LOGGER.debug("Deleting ActionsDiagnoses with id: {}", actionsdiagnosesId);
        ActionsDiagnoses deleted = this.wmGenericDao.findById(actionsdiagnosesId);
        if (deleted == null) {
            LOGGER.debug("No ActionsDiagnoses found with id: {}", actionsdiagnosesId);
            throw new EntityNotFoundException(String.valueOf(actionsdiagnosesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(ActionsDiagnoses actionsDiagnoses) {
        LOGGER.debug("Deleting ActionsDiagnoses with {}", actionsDiagnoses);
        this.wmGenericDao.delete(actionsDiagnoses);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ActionsDiagnoses> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ActionsDiagnoses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<ActionsDiagnoses> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ActionsDiagnoses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table ActionsDiagnoses to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table ActionsDiagnoses to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}