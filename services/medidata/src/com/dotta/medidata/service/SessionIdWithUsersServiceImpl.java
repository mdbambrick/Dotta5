/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.SessionIdWithUsers;
import com.dotta.medidata.SessionIdWithUsersId;


/**
 * ServiceImpl object for domain model class SessionIdWithUsers.
 *
 * @see SessionIdWithUsers
 */
@Service("medidata.SessionIdWithUsersService")
@Validated
public class SessionIdWithUsersServiceImpl implements SessionIdWithUsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SessionIdWithUsersServiceImpl.class);


    @Autowired
    @Qualifier("medidata.SessionIdWithUsersDao")
    private WMGenericDao<SessionIdWithUsers, SessionIdWithUsersId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SessionIdWithUsers, SessionIdWithUsersId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public SessionIdWithUsers create(SessionIdWithUsers sessionIdWithUsers) {
        LOGGER.debug("Creating a new SessionIdWithUsers with information: {}", sessionIdWithUsers);

        SessionIdWithUsers sessionIdWithUsersCreated = this.wmGenericDao.create(sessionIdWithUsers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(sessionIdWithUsersCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public SessionIdWithUsers getById(SessionIdWithUsersId sessionidwithusersId) {
        LOGGER.debug("Finding SessionIdWithUsers by id: {}", sessionidwithusersId);
        return this.wmGenericDao.findById(sessionidwithusersId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public SessionIdWithUsers findById(SessionIdWithUsersId sessionidwithusersId) {
        LOGGER.debug("Finding SessionIdWithUsers by id: {}", sessionidwithusersId);
        try {
            return this.wmGenericDao.findById(sessionidwithusersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SessionIdWithUsers found with id: {}", sessionidwithusersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<SessionIdWithUsers> findByMultipleIds(List<SessionIdWithUsersId> sessionidwithusersIds, boolean orderedReturn) {
        LOGGER.debug("Finding SessionIdWithUsers by ids: {}", sessionidwithusersIds);

        return this.wmGenericDao.findByMultipleIds(sessionidwithusersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public SessionIdWithUsers update(SessionIdWithUsers sessionIdWithUsers) {
        LOGGER.debug("Updating SessionIdWithUsers with information: {}", sessionIdWithUsers);

        this.wmGenericDao.update(sessionIdWithUsers);
        this.wmGenericDao.refresh(sessionIdWithUsers);

        return sessionIdWithUsers;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public SessionIdWithUsers delete(SessionIdWithUsersId sessionidwithusersId) {
        LOGGER.debug("Deleting SessionIdWithUsers with id: {}", sessionidwithusersId);
        SessionIdWithUsers deleted = this.wmGenericDao.findById(sessionidwithusersId);
        if (deleted == null) {
            LOGGER.debug("No SessionIdWithUsers found with id: {}", sessionidwithusersId);
            throw new EntityNotFoundException(String.valueOf(sessionidwithusersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(SessionIdWithUsers sessionIdWithUsers) {
        LOGGER.debug("Deleting SessionIdWithUsers with {}", sessionIdWithUsers);
        this.wmGenericDao.delete(sessionIdWithUsers);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SessionIdWithUsers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SessionIdWithUsers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<SessionIdWithUsers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SessionIdWithUsers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table SessionIdWithUsers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table SessionIdWithUsers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}