/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.SurveyAndTestData;

/**
 * Service object for domain model class {@link SurveyAndTestData}.
 */
public interface SurveyAndTestDataService {

    /**
     * Creates a new SurveyAndTestData. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SurveyAndTestData if any.
     *
     * @param surveyAndTestData Details of the SurveyAndTestData to be created; value cannot be null.
     * @return The newly created SurveyAndTestData.
     */
    SurveyAndTestData create(@Valid SurveyAndTestData surveyAndTestData);


	/**
     * Returns SurveyAndTestData by given id if exists.
     *
     * @param surveyandtestdataId The id of the SurveyAndTestData to get; value cannot be null.
     * @return SurveyAndTestData associated with the given surveyandtestdataId.
	 * @throws EntityNotFoundException If no SurveyAndTestData is found.
     */
    SurveyAndTestData getById(Integer surveyandtestdataId);

    /**
     * Find and return the SurveyAndTestData by given id if exists, returns null otherwise.
     *
     * @param surveyandtestdataId The id of the SurveyAndTestData to get; value cannot be null.
     * @return SurveyAndTestData associated with the given surveyandtestdataId.
     */
    SurveyAndTestData findById(Integer surveyandtestdataId);

	/**
     * Find and return the list of SurveyAndTestDatas by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param surveyandtestdataIds The id's of the SurveyAndTestData to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SurveyAndTestDatas associated with the given surveyandtestdataIds.
     */
    List<SurveyAndTestData> findByMultipleIds(List<Integer> surveyandtestdataIds, boolean orderedReturn);


    /**
     * Updates the details of an existing SurveyAndTestData. It replaces all fields of the existing SurveyAndTestData with the given surveyAndTestData.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SurveyAndTestData if any.
     *
     * @param surveyAndTestData The details of the SurveyAndTestData to be updated; value cannot be null.
     * @return The updated SurveyAndTestData.
     * @throws EntityNotFoundException if no SurveyAndTestData is found with given input.
     */
    SurveyAndTestData update(@Valid SurveyAndTestData surveyAndTestData);

    /**
     * Deletes an existing SurveyAndTestData with the given id.
     *
     * @param surveyandtestdataId The id of the SurveyAndTestData to be deleted; value cannot be null.
     * @return The deleted SurveyAndTestData.
     * @throws EntityNotFoundException if no SurveyAndTestData found with the given id.
     */
    SurveyAndTestData delete(Integer surveyandtestdataId);

    /**
     * Deletes an existing SurveyAndTestData with the given object.
     *
     * @param surveyAndTestData The instance of the SurveyAndTestData to be deleted; value cannot be null.
     */
    void delete(SurveyAndTestData surveyAndTestData);

    /**
     * Find all SurveyAndTestDatas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SurveyAndTestDatas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SurveyAndTestData> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SurveyAndTestDatas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SurveyAndTestDatas.
     *
     * @see Pageable
     * @see Page
     */
    Page<SurveyAndTestData> findAll(String query, Pageable pageable);

    /**
     * Exports all SurveyAndTestDatas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SurveyAndTestDatas matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the SurveyAndTestDatas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SurveyAndTestData.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}