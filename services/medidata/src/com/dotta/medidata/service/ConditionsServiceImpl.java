/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Conditions;


/**
 * ServiceImpl object for domain model class Conditions.
 *
 * @see Conditions
 */
@Service("medidata.ConditionsService")
@Validated
public class ConditionsServiceImpl implements ConditionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConditionsServiceImpl.class);


    @Autowired
    @Qualifier("medidata.ConditionsDao")
    private WMGenericDao<Conditions, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Conditions, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Conditions create(Conditions conditions) {
        LOGGER.debug("Creating a new Conditions with information: {}", conditions);

        Conditions conditionsCreated = this.wmGenericDao.create(conditions);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(conditionsCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Conditions getById(Integer conditionsId) {
        LOGGER.debug("Finding Conditions by id: {}", conditionsId);
        return this.wmGenericDao.findById(conditionsId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Conditions findById(Integer conditionsId) {
        LOGGER.debug("Finding Conditions by id: {}", conditionsId);
        try {
            return this.wmGenericDao.findById(conditionsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Conditions found with id: {}", conditionsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<Conditions> findByMultipleIds(List<Integer> conditionsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Conditions by ids: {}", conditionsIds);

        return this.wmGenericDao.findByMultipleIds(conditionsIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Conditions getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding Conditions by unique keys: {}", uniqueKeyIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public Conditions update(Conditions conditions) {
        LOGGER.debug("Updating Conditions with information: {}", conditions);

        this.wmGenericDao.update(conditions);
        this.wmGenericDao.refresh(conditions);

        return conditions;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Conditions delete(Integer conditionsId) {
        LOGGER.debug("Deleting Conditions with id: {}", conditionsId);
        Conditions deleted = this.wmGenericDao.findById(conditionsId);
        if (deleted == null) {
            LOGGER.debug("No Conditions found with id: {}", conditionsId);
            throw new EntityNotFoundException(String.valueOf(conditionsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(Conditions conditions) {
        LOGGER.debug("Deleting Conditions with {}", conditions);
        this.wmGenericDao.delete(conditions);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Conditions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Conditions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Conditions> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Conditions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table Conditions to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table Conditions to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}