/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.Sessions;
import com.dotta.medidata.Users;
import com.dotta.medidata.UsersPatients;


/**
 * ServiceImpl object for domain model class Users.
 *
 * @see Users
 */
@Service("medidata.UsersService")
@Validated
public class UsersServiceImpl implements UsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("medidata.SessionsService")
    private SessionsService sessionsService;

    @Lazy
    @Autowired
    @Qualifier("medidata.UsersPatientsService")
    private UsersPatientsService usersPatientsService;

    @Autowired
    @Qualifier("medidata.UsersDao")
    private WMGenericDao<Users, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Users, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Users create(Users users) {
        LOGGER.debug("Creating a new Users with information: {}", users);

        Users usersCreated = this.wmGenericDao.create(users);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(usersCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Users getById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        return this.wmGenericDao.findById(usersId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Users findById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        try {
            return this.wmGenericDao.findById(usersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Users found with id: {}", usersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<Users> findByMultipleIds(List<Integer> usersIds, boolean orderedReturn) {
        LOGGER.debug("Finding Users by ids: {}", usersIds);

        return this.wmGenericDao.findByMultipleIds(usersIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Users getByEmail(String email) {
        Map<String, Object> emailMap = new HashMap<>();
        emailMap.put("email", email);

        LOGGER.debug("Finding Users by unique keys: {}", emailMap);
        return this.wmGenericDao.findByUniqueKey(emailMap);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Users getByUsername(String username) {
        Map<String, Object> usernameMap = new HashMap<>();
        usernameMap.put("username", username);

        LOGGER.debug("Finding Users by unique keys: {}", usernameMap);
        return this.wmGenericDao.findByUniqueKey(usernameMap);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Users getBySharingCode(int sharingCode) {
        Map<String, Object> sharingCodeMap = new HashMap<>();
        sharingCodeMap.put("sharingCode", sharingCode);

        LOGGER.debug("Finding Users by unique keys: {}", sharingCodeMap);
        return this.wmGenericDao.findByUniqueKey(sharingCodeMap);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Users getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding Users by unique keys: {}", uniqueKeyIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public Users update(Users users) {
        LOGGER.debug("Updating Users with information: {}", users);

        List<Sessions> sessionses = users.getSessionses();
        List<UsersPatients> usersPatientses = users.getUsersPatientses();
        if(sessionses != null && Hibernate.isInitialized(sessionses)) {
            sessionses.forEach(_sessions -> _sessions.setUsers(users));
        }
        if(usersPatientses != null && Hibernate.isInitialized(usersPatientses)) {
            usersPatientses.forEach(_usersPatients -> _usersPatients.setUsers(users));
        }

        this.wmGenericDao.update(users);
        this.wmGenericDao.refresh(users);

        // Deleting children which are not present in the list.
        if(sessionses != null && Hibernate.isInitialized(sessionses) && !sessionses.isEmpty()) {
            List<Sessions> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Sessions.class,
                        new DaoUtils.ChildrenFilter<>("users", users, sessionses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_sessions -> sessionsService.delete(_sessions));
            users.setSessionses(sessionses);
        }

        // Deleting children which are not present in the list.
        if(usersPatientses != null && Hibernate.isInitialized(usersPatientses) && !usersPatientses.isEmpty()) {
            List<UsersPatients> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, UsersPatients.class,
                        new DaoUtils.ChildrenFilter<>("users", users, usersPatientses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_usersPatients -> usersPatientsService.delete(_usersPatients));
            users.setUsersPatientses(usersPatientses);
        }

        return users;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public Users delete(Integer usersId) {
        LOGGER.debug("Deleting Users with id: {}", usersId);
        Users deleted = this.wmGenericDao.findById(usersId);
        if (deleted == null) {
            LOGGER.debug("No Users found with id: {}", usersId);
            throw new EntityNotFoundException(String.valueOf(usersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(Users users) {
        LOGGER.debug("Deleting Users with {}", users);
        this.wmGenericDao.delete(users);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Users> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Users> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table Users to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table Users to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Sessions> findAssociatedSessionses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated sessionses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return sessionsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<UsersPatients> findAssociatedUsersPatientses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated usersPatientses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return usersPatientsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SessionsService instance
     */
    protected void setSessionsService(SessionsService service) {
        this.sessionsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UsersPatientsService instance
     */
    protected void setUsersPatientsService(UsersPatientsService service) {
        this.usersPatientsService = service;
    }

}