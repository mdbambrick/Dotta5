/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dotta.medidata.PatientSymptomsByAllergy;
import com.dotta.medidata.PatientSymptomsByAllergyId;


/**
 * ServiceImpl object for domain model class PatientSymptomsByAllergy.
 *
 * @see PatientSymptomsByAllergy
 */
@Service("medidata.PatientSymptomsByAllergyService")
@Validated
public class PatientSymptomsByAllergyServiceImpl implements PatientSymptomsByAllergyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PatientSymptomsByAllergyServiceImpl.class);


    @Autowired
    @Qualifier("medidata.PatientSymptomsByAllergyDao")
    private WMGenericDao<PatientSymptomsByAllergy, PatientSymptomsByAllergyId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PatientSymptomsByAllergy, PatientSymptomsByAllergyId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public PatientSymptomsByAllergy create(PatientSymptomsByAllergy patientSymptomsByAllergy) {
        LOGGER.debug("Creating a new PatientSymptomsByAllergy with information: {}", patientSymptomsByAllergy);

        PatientSymptomsByAllergy patientSymptomsByAllergyCreated = this.wmGenericDao.create(patientSymptomsByAllergy);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(patientSymptomsByAllergyCreated);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public PatientSymptomsByAllergy getById(PatientSymptomsByAllergyId patientsymptomsbyallergyId) {
        LOGGER.debug("Finding PatientSymptomsByAllergy by id: {}", patientsymptomsbyallergyId);
        return this.wmGenericDao.findById(patientsymptomsbyallergyId);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public PatientSymptomsByAllergy findById(PatientSymptomsByAllergyId patientsymptomsbyallergyId) {
        LOGGER.debug("Finding PatientSymptomsByAllergy by id: {}", patientsymptomsbyallergyId);
        try {
            return this.wmGenericDao.findById(patientsymptomsbyallergyId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PatientSymptomsByAllergy found with id: {}", patientsymptomsbyallergyId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public List<PatientSymptomsByAllergy> findByMultipleIds(List<PatientSymptomsByAllergyId> patientsymptomsbyallergyIds, boolean orderedReturn) {
        LOGGER.debug("Finding PatientSymptomsByAllergies by ids: {}", patientsymptomsbyallergyIds);

        return this.wmGenericDao.findByMultipleIds(patientsymptomsbyallergyIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "medidataTransactionManager")
    @Override
    public PatientSymptomsByAllergy update(PatientSymptomsByAllergy patientSymptomsByAllergy) {
        LOGGER.debug("Updating PatientSymptomsByAllergy with information: {}", patientSymptomsByAllergy);

        this.wmGenericDao.update(patientSymptomsByAllergy);
        this.wmGenericDao.refresh(patientSymptomsByAllergy);

        return patientSymptomsByAllergy;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public PatientSymptomsByAllergy delete(PatientSymptomsByAllergyId patientsymptomsbyallergyId) {
        LOGGER.debug("Deleting PatientSymptomsByAllergy with id: {}", patientsymptomsbyallergyId);
        PatientSymptomsByAllergy deleted = this.wmGenericDao.findById(patientsymptomsbyallergyId);
        if (deleted == null) {
            LOGGER.debug("No PatientSymptomsByAllergy found with id: {}", patientsymptomsbyallergyId);
            throw new EntityNotFoundException(String.valueOf(patientsymptomsbyallergyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "medidataTransactionManager")
    @Override
    public void delete(PatientSymptomsByAllergy patientSymptomsByAllergy) {
        LOGGER.debug("Deleting PatientSymptomsByAllergy with {}", patientSymptomsByAllergy);
        this.wmGenericDao.delete(patientSymptomsByAllergy);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<PatientSymptomsByAllergy> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PatientSymptomsByAllergies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<PatientSymptomsByAllergy> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PatientSymptomsByAllergies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service medidata for table PatientSymptomsByAllergy to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service medidata for table PatientSymptomsByAllergy to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "medidataTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}