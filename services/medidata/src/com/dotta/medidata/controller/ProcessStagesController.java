/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.Diagnoses;
import com.dotta.medidata.ProcessStages;
import com.dotta.medidata.service.ProcessStagesService;


/**
 * Controller object for domain model class ProcessStages.
 * @see ProcessStages
 */
@RestController("medidata.ProcessStagesController")
@Api(value = "ProcessStagesController", description = "Exposes APIs to work with ProcessStages resource.")
@RequestMapping("/medidata/ProcessStages")
public class ProcessStagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcessStagesController.class);

    @Autowired
	@Qualifier("medidata.ProcessStagesService")
	private ProcessStagesService processStagesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ProcessStages instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProcessStages createProcessStages(@RequestBody ProcessStages processStages) {
		LOGGER.debug("Create ProcessStages with information: {}" , processStages);

		processStages = processStagesService.create(processStages);
		LOGGER.debug("Created ProcessStages with information: {}" , processStages);

	    return processStages;
	}

    @ApiOperation(value = "Returns the ProcessStages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProcessStages getProcessStages(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ProcessStages with id: {}" , id);

        ProcessStages foundProcessStages = processStagesService.getById(id);
        LOGGER.debug("ProcessStages details with id: {}" , foundProcessStages);

        return foundProcessStages;
    }

    @ApiOperation(value = "Updates the ProcessStages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProcessStages editProcessStages(@PathVariable("id") Integer id, @RequestBody ProcessStages processStages) {
        LOGGER.debug("Editing ProcessStages with id: {}" , processStages.getId());

        processStages.setId(id);
        processStages = processStagesService.update(processStages);
        LOGGER.debug("ProcessStages details with id: {}" , processStages);

        return processStages;
    }

    @ApiOperation(value = "Deletes the ProcessStages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteProcessStages(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ProcessStages with id: {}" , id);

        ProcessStages deletedProcessStages = processStagesService.delete(id);

        return deletedProcessStages != null;
    }

    /**
     * @deprecated Use {@link #findProcessStages(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ProcessStages instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProcessStages> searchProcessStagesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ProcessStages list by query filter:{}", (Object) queryFilters);
        return processStagesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ProcessStages instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProcessStages> findProcessStages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProcessStages list by filter:", query);
        return processStagesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ProcessStages instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProcessStages> filterProcessStages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProcessStages list by filter", query);
        return processStagesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProcessStages(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return processStagesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportProcessStagesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ProcessStages.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> processStagesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ProcessStages instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countProcessStages( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ProcessStages");
		return processStagesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getProcessStagesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return processStagesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/diagnoseses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the diagnoseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Diagnoses> findAssociatedDiagnoseses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated diagnoseses");
        return processStagesService.findAssociatedDiagnoseses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProcessStagesService instance
	 */
	protected void setProcessStagesService(ProcessStagesService service) {
		this.processStagesService = service;
	}

}