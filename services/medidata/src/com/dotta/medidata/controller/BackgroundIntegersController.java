/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.BackgroundIntegers;
import com.dotta.medidata.service.BackgroundIntegersService;


/**
 * Controller object for domain model class BackgroundIntegers.
 * @see BackgroundIntegers
 */
@RestController("medidata.BackgroundIntegersController")
@Api(value = "BackgroundIntegersController", description = "Exposes APIs to work with BackgroundIntegers resource.")
@RequestMapping("/medidata/BackgroundIntegers")
public class BackgroundIntegersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BackgroundIntegersController.class);

    @Autowired
	@Qualifier("medidata.BackgroundIntegersService")
	private BackgroundIntegersService backgroundIntegersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new BackgroundIntegers instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BackgroundIntegers createBackgroundIntegers(@RequestBody BackgroundIntegers backgroundIntegers) {
		LOGGER.debug("Create BackgroundIntegers with information: {}" , backgroundIntegers);

		backgroundIntegers = backgroundIntegersService.create(backgroundIntegers);
		LOGGER.debug("Created BackgroundIntegers with information: {}" , backgroundIntegers);

	    return backgroundIntegers;
	}

    @ApiOperation(value = "Returns the BackgroundIntegers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BackgroundIntegers getBackgroundIntegers(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting BackgroundIntegers with id: {}" , id);

        BackgroundIntegers foundBackgroundIntegers = backgroundIntegersService.getById(id);
        LOGGER.debug("BackgroundIntegers details with id: {}" , foundBackgroundIntegers);

        return foundBackgroundIntegers;
    }

    @ApiOperation(value = "Updates the BackgroundIntegers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BackgroundIntegers editBackgroundIntegers(@PathVariable("id") Integer id, @RequestBody BackgroundIntegers backgroundIntegers) {
        LOGGER.debug("Editing BackgroundIntegers with id: {}" , backgroundIntegers.getId());

        backgroundIntegers.setId(id);
        backgroundIntegers = backgroundIntegersService.update(backgroundIntegers);
        LOGGER.debug("BackgroundIntegers details with id: {}" , backgroundIntegers);

        return backgroundIntegers;
    }

    @ApiOperation(value = "Deletes the BackgroundIntegers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBackgroundIntegers(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting BackgroundIntegers with id: {}" , id);

        BackgroundIntegers deletedBackgroundIntegers = backgroundIntegersService.delete(id);

        return deletedBackgroundIntegers != null;
    }

    /**
     * @deprecated Use {@link #findBackgroundIntegers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BackgroundIntegers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BackgroundIntegers> searchBackgroundIntegersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BackgroundIntegers list by query filter:{}", (Object) queryFilters);
        return backgroundIntegersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BackgroundIntegers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BackgroundIntegers> findBackgroundIntegers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BackgroundIntegers list by filter:", query);
        return backgroundIntegersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BackgroundIntegers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BackgroundIntegers> filterBackgroundIntegers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BackgroundIntegers list by filter", query);
        return backgroundIntegersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBackgroundIntegers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return backgroundIntegersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBackgroundIntegersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = BackgroundIntegers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> backgroundIntegersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of BackgroundIntegers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBackgroundIntegers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BackgroundIntegers");
		return backgroundIntegersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBackgroundIntegersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return backgroundIntegersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BackgroundIntegersService instance
	 */
	protected void setBackgroundIntegersService(BackgroundIntegersService service) {
		this.backgroundIntegersService = service;
	}

}