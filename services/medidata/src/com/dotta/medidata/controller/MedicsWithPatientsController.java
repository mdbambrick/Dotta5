/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.MedicsWithPatients;
import com.dotta.medidata.service.MedicsWithPatientsService;


/**
 * Controller object for domain model class MedicsWithPatients.
 * @see MedicsWithPatients
 */
@RestController("medidata.MedicsWithPatientsController")
@Api(value = "MedicsWithPatientsController", description = "Exposes APIs to work with MedicsWithPatients resource.")
@RequestMapping("/medidata/MedicsWithPatients")
public class MedicsWithPatientsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MedicsWithPatientsController.class);

    @Autowired
	@Qualifier("medidata.MedicsWithPatientsService")
	private MedicsWithPatientsService medicsWithPatientsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new MedicsWithPatients instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MedicsWithPatients createMedicsWithPatients(@RequestBody MedicsWithPatients medicsWithPatients) {
		LOGGER.debug("Create MedicsWithPatients with information: {}" , medicsWithPatients);

		medicsWithPatients = medicsWithPatientsService.create(medicsWithPatients);
		LOGGER.debug("Created MedicsWithPatients with information: {}" , medicsWithPatients);

	    return medicsWithPatients;
	}

    @ApiOperation(value = "Returns the MedicsWithPatients instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MedicsWithPatients getMedicsWithPatients(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting MedicsWithPatients with id: {}" , id);

        MedicsWithPatients foundMedicsWithPatients = medicsWithPatientsService.getById(id);
        LOGGER.debug("MedicsWithPatients details with id: {}" , foundMedicsWithPatients);

        return foundMedicsWithPatients;
    }

    @ApiOperation(value = "Updates the MedicsWithPatients instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MedicsWithPatients editMedicsWithPatients(@PathVariable("id") Integer id, @RequestBody MedicsWithPatients medicsWithPatients) {
        LOGGER.debug("Editing MedicsWithPatients with id: {}" , medicsWithPatients.getUserPatientId());

        medicsWithPatients.setUserPatientId(id);
        medicsWithPatients = medicsWithPatientsService.update(medicsWithPatients);
        LOGGER.debug("MedicsWithPatients details with id: {}" , medicsWithPatients);

        return medicsWithPatients;
    }

    @ApiOperation(value = "Deletes the MedicsWithPatients instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMedicsWithPatients(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting MedicsWithPatients with id: {}" , id);

        MedicsWithPatients deletedMedicsWithPatients = medicsWithPatientsService.delete(id);

        return deletedMedicsWithPatients != null;
    }

    /**
     * @deprecated Use {@link #findMedicsWithPatients(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MedicsWithPatients instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MedicsWithPatients> searchMedicsWithPatientsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MedicsWithPatients list by query filter:{}", (Object) queryFilters);
        return medicsWithPatientsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MedicsWithPatients instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MedicsWithPatients> findMedicsWithPatients(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MedicsWithPatients list by filter:", query);
        return medicsWithPatientsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MedicsWithPatients instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MedicsWithPatients> filterMedicsWithPatients(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MedicsWithPatients list by filter", query);
        return medicsWithPatientsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMedicsWithPatients(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return medicsWithPatientsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMedicsWithPatientsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = MedicsWithPatients.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> medicsWithPatientsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of MedicsWithPatients instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMedicsWithPatients( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MedicsWithPatients");
		return medicsWithPatientsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMedicsWithPatientsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return medicsWithPatientsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MedicsWithPatientsService instance
	 */
	protected void setMedicsWithPatientsService(MedicsWithPatientsService service) {
		this.medicsWithPatientsService = service;
	}

}