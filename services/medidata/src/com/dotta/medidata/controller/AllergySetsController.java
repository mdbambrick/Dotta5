/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.Allergies;
import com.dotta.medidata.AllergySets;
import com.dotta.medidata.service.AllergySetsService;


/**
 * Controller object for domain model class AllergySets.
 * @see AllergySets
 */
@RestController("medidata.AllergySetsController")
@Api(value = "AllergySetsController", description = "Exposes APIs to work with AllergySets resource.")
@RequestMapping("/medidata/AllergySets")
public class AllergySetsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllergySetsController.class);

    @Autowired
	@Qualifier("medidata.AllergySetsService")
	private AllergySetsService allergySetsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AllergySets instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllergySets createAllergySets(@RequestBody AllergySets allergySets) {
		LOGGER.debug("Create AllergySets with information: {}" , allergySets);

		allergySets = allergySetsService.create(allergySets);
		LOGGER.debug("Created AllergySets with information: {}" , allergySets);

	    return allergySets;
	}

    @ApiOperation(value = "Returns the AllergySets instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllergySets getAllergySets(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AllergySets with id: {}" , id);

        AllergySets foundAllergySets = allergySetsService.getById(id);
        LOGGER.debug("AllergySets details with id: {}" , foundAllergySets);

        return foundAllergySets;
    }

    @ApiOperation(value = "Updates the AllergySets instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllergySets editAllergySets(@PathVariable("id") Integer id, @RequestBody AllergySets allergySets) {
        LOGGER.debug("Editing AllergySets with id: {}" , allergySets.getId());

        allergySets.setId(id);
        allergySets = allergySetsService.update(allergySets);
        LOGGER.debug("AllergySets details with id: {}" , allergySets);

        return allergySets;
    }

    @ApiOperation(value = "Deletes the AllergySets instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAllergySets(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AllergySets with id: {}" , id);

        AllergySets deletedAllergySets = allergySetsService.delete(id);

        return deletedAllergySets != null;
    }

    /**
     * @deprecated Use {@link #findAllergySets(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AllergySets instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllergySets> searchAllergySetsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AllergySets list by query filter:{}", (Object) queryFilters);
        return allergySetsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllergySets instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllergySets> findAllergySets(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllergySets list by filter:", query);
        return allergySetsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllergySets instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllergySets> filterAllergySets(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllergySets list by filter", query);
        return allergySetsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllergySets(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return allergySetsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAllergySetsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AllergySets.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> allergySetsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AllergySets instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAllergySets( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AllergySets");
		return allergySetsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAllergySetsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return allergySetsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/allergieses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the allergieses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Allergies> findAssociatedAllergieses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated allergieses");
        return allergySetsService.findAssociatedAllergieses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AllergySetsService instance
	 */
	protected void setAllergySetsService(AllergySetsService service) {
		this.allergySetsService = service;
	}

}