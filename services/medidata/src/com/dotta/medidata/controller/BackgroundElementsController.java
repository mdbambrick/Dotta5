/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.BackgroundElements;
import com.dotta.medidata.service.BackgroundElementsService;


/**
 * Controller object for domain model class BackgroundElements.
 * @see BackgroundElements
 */
@RestController("medidata.BackgroundElementsController")
@Api(value = "BackgroundElementsController", description = "Exposes APIs to work with BackgroundElements resource.")
@RequestMapping("/medidata/BackgroundElements")
public class BackgroundElementsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BackgroundElementsController.class);

    @Autowired
	@Qualifier("medidata.BackgroundElementsService")
	private BackgroundElementsService backgroundElementsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new BackgroundElements instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BackgroundElements createBackgroundElements(@RequestBody BackgroundElements backgroundElements) {
		LOGGER.debug("Create BackgroundElements with information: {}" , backgroundElements);

		backgroundElements = backgroundElementsService.create(backgroundElements);
		LOGGER.debug("Created BackgroundElements with information: {}" , backgroundElements);

	    return backgroundElements;
	}

    @ApiOperation(value = "Returns the BackgroundElements instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BackgroundElements getBackgroundElements(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting BackgroundElements with id: {}" , id);

        BackgroundElements foundBackgroundElements = backgroundElementsService.getById(id);
        LOGGER.debug("BackgroundElements details with id: {}" , foundBackgroundElements);

        return foundBackgroundElements;
    }

    @ApiOperation(value = "Updates the BackgroundElements instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BackgroundElements editBackgroundElements(@PathVariable("id") Integer id, @RequestBody BackgroundElements backgroundElements) {
        LOGGER.debug("Editing BackgroundElements with id: {}" , backgroundElements.getId());

        backgroundElements.setId(id);
        backgroundElements = backgroundElementsService.update(backgroundElements);
        LOGGER.debug("BackgroundElements details with id: {}" , backgroundElements);

        return backgroundElements;
    }

    @ApiOperation(value = "Deletes the BackgroundElements instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBackgroundElements(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting BackgroundElements with id: {}" , id);

        BackgroundElements deletedBackgroundElements = backgroundElementsService.delete(id);

        return deletedBackgroundElements != null;
    }

    /**
     * @deprecated Use {@link #findBackgroundElements(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BackgroundElements instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BackgroundElements> searchBackgroundElementsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BackgroundElements list by query filter:{}", (Object) queryFilters);
        return backgroundElementsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BackgroundElements instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BackgroundElements> findBackgroundElements(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BackgroundElements list by filter:", query);
        return backgroundElementsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BackgroundElements instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BackgroundElements> filterBackgroundElements(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BackgroundElements list by filter", query);
        return backgroundElementsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBackgroundElements(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return backgroundElementsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBackgroundElementsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = BackgroundElements.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> backgroundElementsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of BackgroundElements instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBackgroundElements( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BackgroundElements");
		return backgroundElementsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBackgroundElementsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return backgroundElementsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BackgroundElementsService instance
	 */
	protected void setBackgroundElementsService(BackgroundElementsService service) {
		this.backgroundElementsService = service;
	}

}