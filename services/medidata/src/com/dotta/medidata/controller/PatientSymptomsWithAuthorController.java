/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.PatientSymptomsWithAuthor;
import com.dotta.medidata.PatientSymptomsWithAuthorId;
import com.dotta.medidata.service.PatientSymptomsWithAuthorService;


/**
 * Controller object for domain model class PatientSymptomsWithAuthor.
 * @see PatientSymptomsWithAuthor
 */
@RestController("medidata.PatientSymptomsWithAuthorController")
@Api(value = "PatientSymptomsWithAuthorController", description = "Exposes APIs to work with PatientSymptomsWithAuthor resource.")
@RequestMapping("/medidata/PatientSymptomsWithAuthor")
public class PatientSymptomsWithAuthorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PatientSymptomsWithAuthorController.class);

    @Autowired
	@Qualifier("medidata.PatientSymptomsWithAuthorService")
	private PatientSymptomsWithAuthorService patientSymptomsWithAuthorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PatientSymptomsWithAuthor instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PatientSymptomsWithAuthor createPatientSymptomsWithAuthor(@RequestBody PatientSymptomsWithAuthor patientSymptomsWithAuthor) {
		LOGGER.debug("Create PatientSymptomsWithAuthor with information: {}" , patientSymptomsWithAuthor);

		patientSymptomsWithAuthor = patientSymptomsWithAuthorService.create(patientSymptomsWithAuthor);
		LOGGER.debug("Created PatientSymptomsWithAuthor with information: {}" , patientSymptomsWithAuthor);

	    return patientSymptomsWithAuthor;
	}

    @ApiOperation(value = "Returns the PatientSymptomsWithAuthor instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PatientSymptomsWithAuthor getPatientSymptomsWithAuthor(@RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName, @RequestParam("allergyCategory") Integer allergyCategory, @RequestParam("title") String title, @RequestParam("allergySet") Integer allergySet, @RequestParam("setName") String setName, @RequestParam("symptomId") Integer symptomId, @RequestParam("symptom") String symptom, @RequestParam("result") Integer result, @RequestParam("timestamp") Timestamp timestamp, @RequestParam("sessionId") Integer sessionId, @RequestParam("sessionUser") Integer sessionUser, @RequestParam("authorId") Integer authorId, @RequestParam("authorTitle") String authorTitle, @RequestParam("authorFirstName") String authorFirstName, @RequestParam("authorLastName") String authorLastName, @RequestParam("role") String role) {

        PatientSymptomsWithAuthorId patientsymptomswithauthorId = new PatientSymptomsWithAuthorId();
        patientsymptomswithauthorId.setPatientId(patientId);
        patientsymptomswithauthorId.setAllergyId(allergyId);
        patientsymptomswithauthorId.setAllergyName(allergyName);
        patientsymptomswithauthorId.setAllergyCategory(allergyCategory);
        patientsymptomswithauthorId.setTitle(title);
        patientsymptomswithauthorId.setAllergySet(allergySet);
        patientsymptomswithauthorId.setSetName(setName);
        patientsymptomswithauthorId.setSymptomId(symptomId);
        patientsymptomswithauthorId.setSymptom(symptom);
        patientsymptomswithauthorId.setResult(result);
        patientsymptomswithauthorId.setTimestamp(timestamp);
        patientsymptomswithauthorId.setSessionId(sessionId);
        patientsymptomswithauthorId.setSessionUser(sessionUser);
        patientsymptomswithauthorId.setAuthorId(authorId);
        patientsymptomswithauthorId.setAuthorTitle(authorTitle);
        patientsymptomswithauthorId.setAuthorFirstName(authorFirstName);
        patientsymptomswithauthorId.setAuthorLastName(authorLastName);
        patientsymptomswithauthorId.setRole(role);

        LOGGER.debug("Getting PatientSymptomsWithAuthor with id: {}" , patientsymptomswithauthorId);
        PatientSymptomsWithAuthor patientSymptomsWithAuthor = patientSymptomsWithAuthorService.getById(patientsymptomswithauthorId);
        LOGGER.debug("PatientSymptomsWithAuthor details with id: {}" , patientSymptomsWithAuthor);

        return patientSymptomsWithAuthor;
    }



    @ApiOperation(value = "Updates the PatientSymptomsWithAuthor instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PatientSymptomsWithAuthor editPatientSymptomsWithAuthor(@RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName, @RequestParam("allergyCategory") Integer allergyCategory, @RequestParam("title") String title, @RequestParam("allergySet") Integer allergySet, @RequestParam("setName") String setName, @RequestParam("symptomId") Integer symptomId, @RequestParam("symptom") String symptom, @RequestParam("result") Integer result, @RequestParam("timestamp") Timestamp timestamp, @RequestParam("sessionId") Integer sessionId, @RequestParam("sessionUser") Integer sessionUser, @RequestParam("authorId") Integer authorId, @RequestParam("authorTitle") String authorTitle, @RequestParam("authorFirstName") String authorFirstName, @RequestParam("authorLastName") String authorLastName, @RequestParam("role") String role, @RequestBody PatientSymptomsWithAuthor patientSymptomsWithAuthor) {

        patientSymptomsWithAuthor.setPatientId(patientId);
        patientSymptomsWithAuthor.setAllergyId(allergyId);
        patientSymptomsWithAuthor.setAllergyName(allergyName);
        patientSymptomsWithAuthor.setAllergyCategory(allergyCategory);
        patientSymptomsWithAuthor.setTitle(title);
        patientSymptomsWithAuthor.setAllergySet(allergySet);
        patientSymptomsWithAuthor.setSetName(setName);
        patientSymptomsWithAuthor.setSymptomId(symptomId);
        patientSymptomsWithAuthor.setSymptom(symptom);
        patientSymptomsWithAuthor.setResult(result);
        patientSymptomsWithAuthor.setTimestamp(timestamp);
        patientSymptomsWithAuthor.setSessionId(sessionId);
        patientSymptomsWithAuthor.setSessionUser(sessionUser);
        patientSymptomsWithAuthor.setAuthorId(authorId);
        patientSymptomsWithAuthor.setAuthorTitle(authorTitle);
        patientSymptomsWithAuthor.setAuthorFirstName(authorFirstName);
        patientSymptomsWithAuthor.setAuthorLastName(authorLastName);
        patientSymptomsWithAuthor.setRole(role);

        LOGGER.debug("PatientSymptomsWithAuthor details with id is updated with: {}" , patientSymptomsWithAuthor);

        return patientSymptomsWithAuthorService.update(patientSymptomsWithAuthor);
    }


    @ApiOperation(value = "Deletes the PatientSymptomsWithAuthor instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePatientSymptomsWithAuthor(@RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName, @RequestParam("allergyCategory") Integer allergyCategory, @RequestParam("title") String title, @RequestParam("allergySet") Integer allergySet, @RequestParam("setName") String setName, @RequestParam("symptomId") Integer symptomId, @RequestParam("symptom") String symptom, @RequestParam("result") Integer result, @RequestParam("timestamp") Timestamp timestamp, @RequestParam("sessionId") Integer sessionId, @RequestParam("sessionUser") Integer sessionUser, @RequestParam("authorId") Integer authorId, @RequestParam("authorTitle") String authorTitle, @RequestParam("authorFirstName") String authorFirstName, @RequestParam("authorLastName") String authorLastName, @RequestParam("role") String role) {

        PatientSymptomsWithAuthorId patientsymptomswithauthorId = new PatientSymptomsWithAuthorId();
        patientsymptomswithauthorId.setPatientId(patientId);
        patientsymptomswithauthorId.setAllergyId(allergyId);
        patientsymptomswithauthorId.setAllergyName(allergyName);
        patientsymptomswithauthorId.setAllergyCategory(allergyCategory);
        patientsymptomswithauthorId.setTitle(title);
        patientsymptomswithauthorId.setAllergySet(allergySet);
        patientsymptomswithauthorId.setSetName(setName);
        patientsymptomswithauthorId.setSymptomId(symptomId);
        patientsymptomswithauthorId.setSymptom(symptom);
        patientsymptomswithauthorId.setResult(result);
        patientsymptomswithauthorId.setTimestamp(timestamp);
        patientsymptomswithauthorId.setSessionId(sessionId);
        patientsymptomswithauthorId.setSessionUser(sessionUser);
        patientsymptomswithauthorId.setAuthorId(authorId);
        patientsymptomswithauthorId.setAuthorTitle(authorTitle);
        patientsymptomswithauthorId.setAuthorFirstName(authorFirstName);
        patientsymptomswithauthorId.setAuthorLastName(authorLastName);
        patientsymptomswithauthorId.setRole(role);

        LOGGER.debug("Deleting PatientSymptomsWithAuthor with id: {}" , patientsymptomswithauthorId);
        PatientSymptomsWithAuthor patientSymptomsWithAuthor = patientSymptomsWithAuthorService.delete(patientsymptomswithauthorId);

        return patientSymptomsWithAuthor != null;
    }


    /**
     * @deprecated Use {@link #findPatientSymptomsWithAuthors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PatientSymptomsWithAuthor instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PatientSymptomsWithAuthor> searchPatientSymptomsWithAuthorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PatientSymptomsWithAuthors list by query filter:{}", (Object) queryFilters);
        return patientSymptomsWithAuthorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PatientSymptomsWithAuthor instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PatientSymptomsWithAuthor> findPatientSymptomsWithAuthors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PatientSymptomsWithAuthors list by filter:", query);
        return patientSymptomsWithAuthorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PatientSymptomsWithAuthor instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PatientSymptomsWithAuthor> filterPatientSymptomsWithAuthors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PatientSymptomsWithAuthors list by filter", query);
        return patientSymptomsWithAuthorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPatientSymptomsWithAuthors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return patientSymptomsWithAuthorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPatientSymptomsWithAuthorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PatientSymptomsWithAuthor.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> patientSymptomsWithAuthorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PatientSymptomsWithAuthor instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPatientSymptomsWithAuthors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PatientSymptomsWithAuthors");
		return patientSymptomsWithAuthorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPatientSymptomsWithAuthorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return patientSymptomsWithAuthorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PatientSymptomsWithAuthorService instance
	 */
	protected void setPatientSymptomsWithAuthorService(PatientSymptomsWithAuthorService service) {
		this.patientSymptomsWithAuthorService = service;
	}

}