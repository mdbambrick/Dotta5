/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.AllergyCategory;
import com.dotta.medidata.AllergyClass;
import com.dotta.medidata.service.AllergyClassService;


/**
 * Controller object for domain model class AllergyClass.
 * @see AllergyClass
 */
@RestController("medidata.AllergyClassController")
@Api(value = "AllergyClassController", description = "Exposes APIs to work with AllergyClass resource.")
@RequestMapping("/medidata/AllergyClass")
public class AllergyClassController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllergyClassController.class);

    @Autowired
	@Qualifier("medidata.AllergyClassService")
	private AllergyClassService allergyClassService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AllergyClass instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllergyClass createAllergyClass(@RequestBody AllergyClass allergyClass) {
		LOGGER.debug("Create AllergyClass with information: {}" , allergyClass);

		allergyClass = allergyClassService.create(allergyClass);
		LOGGER.debug("Created AllergyClass with information: {}" , allergyClass);

	    return allergyClass;
	}

    @ApiOperation(value = "Returns the AllergyClass instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllergyClass getAllergyClass(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AllergyClass with id: {}" , id);

        AllergyClass foundAllergyClass = allergyClassService.getById(id);
        LOGGER.debug("AllergyClass details with id: {}" , foundAllergyClass);

        return foundAllergyClass;
    }

    @ApiOperation(value = "Updates the AllergyClass instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllergyClass editAllergyClass(@PathVariable("id") Integer id, @RequestBody AllergyClass allergyClass) {
        LOGGER.debug("Editing AllergyClass with id: {}" , allergyClass.getId());

        allergyClass.setId(id);
        allergyClass = allergyClassService.update(allergyClass);
        LOGGER.debug("AllergyClass details with id: {}" , allergyClass);

        return allergyClass;
    }

    @ApiOperation(value = "Deletes the AllergyClass instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAllergyClass(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AllergyClass with id: {}" , id);

        AllergyClass deletedAllergyClass = allergyClassService.delete(id);

        return deletedAllergyClass != null;
    }

    @RequestMapping(value = "/id/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching AllergyClass with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllergyClass getByUniqueKeyId(@PathVariable("id") int id) {
        LOGGER.debug("Getting AllergyClass with uniques key UniqueKeyId");
        return allergyClassService.getByUniqueKeyId(id);
    }

    /**
     * @deprecated Use {@link #findAllergyClasses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AllergyClass instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllergyClass> searchAllergyClassesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AllergyClasses list by query filter:{}", (Object) queryFilters);
        return allergyClassService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllergyClass instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllergyClass> findAllergyClasses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllergyClasses list by filter:", query);
        return allergyClassService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllergyClass instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllergyClass> filterAllergyClasses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllergyClasses list by filter", query);
        return allergyClassService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllergyClasses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return allergyClassService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAllergyClassesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AllergyClass.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> allergyClassService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AllergyClass instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAllergyClasses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AllergyClasses");
		return allergyClassService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAllergyClassAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return allergyClassService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/allergyCategories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the allergyCategories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllergyCategory> findAssociatedAllergyCategories(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated allergyCategories");
        return allergyClassService.findAssociatedAllergyCategories(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AllergyClassService instance
	 */
	protected void setAllergyClassService(AllergyClassService service) {
		this.allergyClassService = service;
	}

}