/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.ActionsDiagnoses;
import com.dotta.medidata.Diagnoses;
import com.dotta.medidata.service.DiagnosesService;


/**
 * Controller object for domain model class Diagnoses.
 * @see Diagnoses
 */
@RestController("medidata.DiagnosesController")
@Api(value = "DiagnosesController", description = "Exposes APIs to work with Diagnoses resource.")
@RequestMapping("/medidata/Diagnoses")
public class DiagnosesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DiagnosesController.class);

    @Autowired
	@Qualifier("medidata.DiagnosesService")
	private DiagnosesService diagnosesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Diagnoses instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Diagnoses createDiagnoses(@RequestBody Diagnoses diagnoses) {
		LOGGER.debug("Create Diagnoses with information: {}" , diagnoses);

		diagnoses = diagnosesService.create(diagnoses);
		LOGGER.debug("Created Diagnoses with information: {}" , diagnoses);

	    return diagnoses;
	}

    @ApiOperation(value = "Returns the Diagnoses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Diagnoses getDiagnoses(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Diagnoses with id: {}" , id);

        Diagnoses foundDiagnoses = diagnosesService.getById(id);
        LOGGER.debug("Diagnoses details with id: {}" , foundDiagnoses);

        return foundDiagnoses;
    }

    @ApiOperation(value = "Updates the Diagnoses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Diagnoses editDiagnoses(@PathVariable("id") Integer id, @RequestBody Diagnoses diagnoses) {
        LOGGER.debug("Editing Diagnoses with id: {}" , diagnoses.getId());

        diagnoses.setId(id);
        diagnoses = diagnosesService.update(diagnoses);
        LOGGER.debug("Diagnoses details with id: {}" , diagnoses);

        return diagnoses;
    }

    @ApiOperation(value = "Deletes the Diagnoses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDiagnoses(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Diagnoses with id: {}" , id);

        Diagnoses deletedDiagnoses = diagnosesService.delete(id);

        return deletedDiagnoses != null;
    }

    /**
     * @deprecated Use {@link #findDiagnoses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Diagnoses instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Diagnoses> searchDiagnosesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Diagnoses list by query filter:{}", (Object) queryFilters);
        return diagnosesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Diagnoses instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Diagnoses> findDiagnoses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Diagnoses list by filter:", query);
        return diagnosesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Diagnoses instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Diagnoses> filterDiagnoses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Diagnoses list by filter", query);
        return diagnosesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDiagnoses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return diagnosesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDiagnosesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Diagnoses.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> diagnosesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Diagnoses instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDiagnoses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Diagnoses");
		return diagnosesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDiagnosesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return diagnosesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/actionsDiagnoseses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the actionsDiagnoseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActionsDiagnoses> findAssociatedActionsDiagnoseses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated actionsDiagnoseses");
        return diagnosesService.findAssociatedActionsDiagnoseses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DiagnosesService instance
	 */
	protected void setDiagnosesService(DiagnosesService service) {
		this.diagnosesService = service;
	}

}