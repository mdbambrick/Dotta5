/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.dotta.medidata.service.MedidataQueryExecutorService;
import com.dotta.medidata.models.query.*;

@RestController(value = "Medidata.QueryExecutionController")
@RequestMapping("/medidata/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private MedidataQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/TrackRead", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Retrieves most recent session data for the user")
    public Page<TrackReadResponse> executeTrackRead(@RequestParam(value = "user_id") Integer userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: TrackRead");
        Page<TrackReadResponse> _result = queryService.executeTrackRead(userId, pageable);
        LOGGER.debug("got the result for named query: TrackRead, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query TrackRead")
    @RequestMapping(value = "/queries/TrackRead/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTrackRead(@RequestParam(value = "user_id") Integer userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: TrackRead");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "TrackRead";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTrackRead(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/ListCliniciansforPatient", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List Clinicians for Patient")
    public Page<ListCliniciansforPatientResponse> executeListCliniciansforPatient(@RequestParam(value = "id") Integer id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: ListCliniciansforPatient");
        Page<ListCliniciansforPatientResponse> _result = queryService.executeListCliniciansforPatient(id, pageable);
        LOGGER.debug("got the result for named query: ListCliniciansforPatient, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query ListCliniciansforPatient")
    @RequestMapping(value = "/queries/ListCliniciansforPatient/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportListCliniciansforPatient(@RequestParam(value = "id") Integer id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: ListCliniciansforPatient");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "ListCliniciansforPatient";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportListCliniciansforPatient(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/AddSymptom", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Single symptom added to database for patient and allergy")
    public IntegerWrapper executeAddSymptom(@Valid @RequestBody AddSymptomRequest addSymptomRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: AddSymptom");
        Integer _result = queryService.executeAddSymptom(addSymptomRequest);
        LOGGER.debug("got the result for named query: AddSymptom, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/PatientSymptomsByAllergy", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "displays the symptoms for each patient by allergy")
    public Page<PatientSymptomsByAllergyResponse> executePatientSymptomsByAllergy(@RequestParam(value = "id") Integer id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: PatientSymptomsByAllergy");
        Page<PatientSymptomsByAllergyResponse> _result = queryService.executePatientSymptomsByAllergy(id, pageable);
        LOGGER.debug("got the result for named query: PatientSymptomsByAllergy, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query PatientSymptomsByAllergy")
    @RequestMapping(value = "/queries/PatientSymptomsByAllergy/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPatientSymptomsByAllergy(@RequestParam(value = "id") Integer id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: PatientSymptomsByAllergy");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "PatientSymptomsByAllergy";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportPatientSymptomsByAllergy(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/ShareCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Extracts share code for user")
    public Page<ShareCodeResponse> executeShareCode(@RequestParam(value = "user_id") Integer userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: ShareCode");
        Page<ShareCodeResponse> _result = queryService.executeShareCode(userId, pageable);
        LOGGER.debug("got the result for named query: ShareCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query ShareCode")
    @RequestMapping(value = "/queries/ShareCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportShareCode(@RequestParam(value = "user_id") Integer userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: ShareCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "ShareCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportShareCode(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/MedicsWithPatients", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "shows patients associated with each medic")
    public Page<MedicsWithPatientsResponse> executeMedicsWithPatients(@RequestParam(value = "id") String id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: MedicsWithPatients");
        Page<MedicsWithPatientsResponse> _result = queryService.executeMedicsWithPatients(id, pageable);
        LOGGER.debug("got the result for named query: MedicsWithPatients, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query MedicsWithPatients")
    @RequestMapping(value = "/queries/MedicsWithPatients/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMedicsWithPatients(@RequestParam(value = "id") String id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: MedicsWithPatients");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "MedicsWithPatients";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportMedicsWithPatients(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/PatientRead", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "PatientRead")
    public Page<PatientReadResponse> executePatientRead(@RequestParam(value = "patientId") Integer patientId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: PatientRead");
        Page<PatientReadResponse> _result = queryService.executePatientRead(patientId, pageable);
        LOGGER.debug("got the result for named query: PatientRead, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query PatientRead")
    @RequestMapping(value = "/queries/PatientRead/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPatientRead(@RequestParam(value = "patientId") Integer patientId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: PatientRead");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "PatientRead";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportPatientRead(patientId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Clinician_List", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of all users type 4 (clinicians)")
    public Page<ClinicianListResponse> executeClinician_List(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Clinician_List");
        Page<ClinicianListResponse> _result = queryService.executeClinician_List(pageable);
        LOGGER.debug("got the result for named query: Clinician_List, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Clinician_List")
    @RequestMapping(value = "/queries/Clinician_List/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportClinician_List(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Clinician_List");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Clinician_List";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportClinician_List( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/RemoveClincian", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Remove Clincian")
    public IntegerWrapper executeRemoveClincian(@RequestParam(value = "patient_id") String patientId, @RequestParam(value = "user_id") Integer userId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: RemoveClincian");
        Integer _result = queryService.executeRemoveClincian(patientId, userId);
        LOGGER.debug("got the result for named query: RemoveClincian, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/PatientMedics", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Shows Clinicians current authorised to access patient records")
    public Page<PatientMedicsResponse> executePatientMedics(@RequestParam(value = "patient_id") Integer patientId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: PatientMedics");
        Page<PatientMedicsResponse> _result = queryService.executePatientMedics(patientId, pageable);
        LOGGER.debug("got the result for named query: PatientMedics, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query PatientMedics")
    @RequestMapping(value = "/queries/PatientMedics/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPatientMedics(@RequestParam(value = "patient_id") Integer patientId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: PatientMedics");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "PatientMedics";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportPatientMedics(patientId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/ForgotPassword", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "forgot password")
    public IntegerWrapper executeForgotPassword(@Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: ForgotPassword");
        Integer _result = queryService.executeForgotPassword(forgotPasswordRequest);
        LOGGER.debug("got the result for named query: ForgotPassword, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/BackgroundRead", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "collects the most recent session's medical history data for the patient")
    public Page<BackgroundReadResponse> executeBackgroundRead(@RequestParam(value = "patientId") Integer patientId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: BackgroundRead");
        Page<BackgroundReadResponse> _result = queryService.executeBackgroundRead(patientId, pageable);
        LOGGER.debug("got the result for named query: BackgroundRead, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query BackgroundRead")
    @RequestMapping(value = "/queries/BackgroundRead/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBackgroundRead(@RequestParam(value = "patientId") Integer patientId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: BackgroundRead");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "BackgroundRead";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportBackgroundRead(patientId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}