/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.SessionIdWithUsers;
import com.dotta.medidata.SessionIdWithUsersId;
import com.dotta.medidata.service.SessionIdWithUsersService;


/**
 * Controller object for domain model class SessionIdWithUsers.
 * @see SessionIdWithUsers
 */
@RestController("medidata.SessionIdWithUsersController")
@Api(value = "SessionIdWithUsersController", description = "Exposes APIs to work with SessionIdWithUsers resource.")
@RequestMapping("/medidata/SessionIdWithUsers")
public class SessionIdWithUsersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SessionIdWithUsersController.class);

    @Autowired
	@Qualifier("medidata.SessionIdWithUsersService")
	private SessionIdWithUsersService sessionIdWithUsersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SessionIdWithUsers instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SessionIdWithUsers createSessionIdWithUsers(@RequestBody SessionIdWithUsers sessionIdWithUsers) {
		LOGGER.debug("Create SessionIdWithUsers with information: {}" , sessionIdWithUsers);

		sessionIdWithUsers = sessionIdWithUsersService.create(sessionIdWithUsers);
		LOGGER.debug("Created SessionIdWithUsers with information: {}" , sessionIdWithUsers);

	    return sessionIdWithUsers;
	}

    @ApiOperation(value = "Returns the SessionIdWithUsers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SessionIdWithUsers getSessionIdWithUsers(@RequestParam("sessionId") Integer sessionId, @RequestParam("userId") Integer userId, @RequestParam("user") Integer user, @RequestParam("patientId") Integer patientId, @RequestParam("patient") Integer patient, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("id") Integer id, @RequestParam("username") String username, @RequestParam("title") String title, @RequestParam("firstNameCol") String firstNameCol, @RequestParam("lastNameCol") String lastNameCol, @RequestParam("password") String password, @RequestParam("email") String email, @RequestParam("salt") String salt, @RequestParam("userType") Integer userType, @RequestParam("active") Integer active) {

        SessionIdWithUsersId sessionidwithusersId = new SessionIdWithUsersId();
        sessionidwithusersId.setSessionId(sessionId);
        sessionidwithusersId.setUserId(userId);
        sessionidwithusersId.setUser(user);
        sessionidwithusersId.setPatientId(patientId);
        sessionidwithusersId.setPatient(patient);
        sessionidwithusersId.setFirstName(firstName);
        sessionidwithusersId.setLastName(lastName);
        sessionidwithusersId.setId(id);
        sessionidwithusersId.setUsername(username);
        sessionidwithusersId.setTitle(title);
        sessionidwithusersId.setFirstNameCol(firstNameCol);
        sessionidwithusersId.setLastNameCol(lastNameCol);
        sessionidwithusersId.setPassword(password);
        sessionidwithusersId.setEmail(email);
        sessionidwithusersId.setSalt(salt);
        sessionidwithusersId.setUserType(userType);
        sessionidwithusersId.setActive(active);

        LOGGER.debug("Getting SessionIdWithUsers with id: {}" , sessionidwithusersId);
        SessionIdWithUsers sessionIdWithUsers = sessionIdWithUsersService.getById(sessionidwithusersId);
        LOGGER.debug("SessionIdWithUsers details with id: {}" , sessionIdWithUsers);

        return sessionIdWithUsers;
    }



    @ApiOperation(value = "Updates the SessionIdWithUsers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SessionIdWithUsers editSessionIdWithUsers(@RequestParam("sessionId") Integer sessionId, @RequestParam("userId") Integer userId, @RequestParam("user") Integer user, @RequestParam("patientId") Integer patientId, @RequestParam("patient") Integer patient, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("id") Integer id, @RequestParam("username") String username, @RequestParam("title") String title, @RequestParam("firstNameCol") String firstNameCol, @RequestParam("lastNameCol") String lastNameCol, @RequestParam("password") String password, @RequestParam("email") String email, @RequestParam("salt") String salt, @RequestParam("userType") Integer userType, @RequestParam("active") Integer active, @RequestBody SessionIdWithUsers sessionIdWithUsers) {

        sessionIdWithUsers.setSessionId(sessionId);
        sessionIdWithUsers.setUserId(userId);
        sessionIdWithUsers.setUser(user);
        sessionIdWithUsers.setPatientId(patientId);
        sessionIdWithUsers.setPatient(patient);
        sessionIdWithUsers.setFirstName(firstName);
        sessionIdWithUsers.setLastName(lastName);
        sessionIdWithUsers.setId(id);
        sessionIdWithUsers.setUsername(username);
        sessionIdWithUsers.setTitle(title);
        sessionIdWithUsers.setFirstNameCol(firstNameCol);
        sessionIdWithUsers.setLastNameCol(lastNameCol);
        sessionIdWithUsers.setPassword(password);
        sessionIdWithUsers.setEmail(email);
        sessionIdWithUsers.setSalt(salt);
        sessionIdWithUsers.setUserType(userType);
        sessionIdWithUsers.setActive(active);

        LOGGER.debug("SessionIdWithUsers details with id is updated with: {}" , sessionIdWithUsers);

        return sessionIdWithUsersService.update(sessionIdWithUsers);
    }


    @ApiOperation(value = "Deletes the SessionIdWithUsers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSessionIdWithUsers(@RequestParam("sessionId") Integer sessionId, @RequestParam("userId") Integer userId, @RequestParam("user") Integer user, @RequestParam("patientId") Integer patientId, @RequestParam("patient") Integer patient, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("id") Integer id, @RequestParam("username") String username, @RequestParam("title") String title, @RequestParam("firstNameCol") String firstNameCol, @RequestParam("lastNameCol") String lastNameCol, @RequestParam("password") String password, @RequestParam("email") String email, @RequestParam("salt") String salt, @RequestParam("userType") Integer userType, @RequestParam("active") Integer active) {

        SessionIdWithUsersId sessionidwithusersId = new SessionIdWithUsersId();
        sessionidwithusersId.setSessionId(sessionId);
        sessionidwithusersId.setUserId(userId);
        sessionidwithusersId.setUser(user);
        sessionidwithusersId.setPatientId(patientId);
        sessionidwithusersId.setPatient(patient);
        sessionidwithusersId.setFirstName(firstName);
        sessionidwithusersId.setLastName(lastName);
        sessionidwithusersId.setId(id);
        sessionidwithusersId.setUsername(username);
        sessionidwithusersId.setTitle(title);
        sessionidwithusersId.setFirstNameCol(firstNameCol);
        sessionidwithusersId.setLastNameCol(lastNameCol);
        sessionidwithusersId.setPassword(password);
        sessionidwithusersId.setEmail(email);
        sessionidwithusersId.setSalt(salt);
        sessionidwithusersId.setUserType(userType);
        sessionidwithusersId.setActive(active);

        LOGGER.debug("Deleting SessionIdWithUsers with id: {}" , sessionidwithusersId);
        SessionIdWithUsers sessionIdWithUsers = sessionIdWithUsersService.delete(sessionidwithusersId);

        return sessionIdWithUsers != null;
    }


    /**
     * @deprecated Use {@link #findSessionIdWithUsers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SessionIdWithUsers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SessionIdWithUsers> searchSessionIdWithUsersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SessionIdWithUsers list by query filter:{}", (Object) queryFilters);
        return sessionIdWithUsersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SessionIdWithUsers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SessionIdWithUsers> findSessionIdWithUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SessionIdWithUsers list by filter:", query);
        return sessionIdWithUsersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SessionIdWithUsers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SessionIdWithUsers> filterSessionIdWithUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SessionIdWithUsers list by filter", query);
        return sessionIdWithUsersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSessionIdWithUsers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sessionIdWithUsersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSessionIdWithUsersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SessionIdWithUsers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> sessionIdWithUsersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SessionIdWithUsers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSessionIdWithUsers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SessionIdWithUsers");
		return sessionIdWithUsersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSessionIdWithUsersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return sessionIdWithUsersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SessionIdWithUsersService instance
	 */
	protected void setSessionIdWithUsersService(SessionIdWithUsersService service) {
		this.sessionIdWithUsersService = service;
	}

}