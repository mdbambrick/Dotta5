/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.SurveyUnique;
import com.dotta.medidata.SurveyUniqueId;
import com.dotta.medidata.service.SurveyUniqueService;


/**
 * Controller object for domain model class SurveyUnique.
 * @see SurveyUnique
 */
@RestController("medidata.SurveyUniqueController")
@Api(value = "SurveyUniqueController", description = "Exposes APIs to work with SurveyUnique resource.")
@RequestMapping("/medidata/SurveyUnique")
public class SurveyUniqueController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SurveyUniqueController.class);

    @Autowired
	@Qualifier("medidata.SurveyUniqueService")
	private SurveyUniqueService surveyUniqueService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SurveyUnique instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SurveyUnique createSurveyUnique(@RequestBody SurveyUnique surveyUnique) {
		LOGGER.debug("Create SurveyUnique with information: {}" , surveyUnique);

		surveyUnique = surveyUniqueService.create(surveyUnique);
		LOGGER.debug("Created SurveyUnique with information: {}" , surveyUnique);

	    return surveyUnique;
	}

    @ApiOperation(value = "Returns the SurveyUnique instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SurveyUnique getSurveyUnique(@RequestParam("id") Integer id, @RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("symptomId") Integer symptomId, @RequestParam("result") Integer result, @RequestParam("sessionId") Integer sessionId, @RequestParam("dataSource") Integer dataSource, @RequestParam("currentStatus") Integer currentStatus, @RequestParam("datetime") Timestamp datetime, @RequestParam("ranking") BigDecimal ranking, @RequestParam("colour") Integer colour) {

        SurveyUniqueId surveyuniqueId = new SurveyUniqueId();
        surveyuniqueId.setId(id);
        surveyuniqueId.setPatientId(patientId);
        surveyuniqueId.setAllergyId(allergyId);
        surveyuniqueId.setSymptomId(symptomId);
        surveyuniqueId.setResult(result);
        surveyuniqueId.setSessionId(sessionId);
        surveyuniqueId.setDataSource(dataSource);
        surveyuniqueId.setCurrentStatus(currentStatus);
        surveyuniqueId.setDatetime(datetime);
        surveyuniqueId.setRanking(ranking);
        surveyuniqueId.setColour(colour);

        LOGGER.debug("Getting SurveyUnique with id: {}" , surveyuniqueId);
        SurveyUnique surveyUnique = surveyUniqueService.getById(surveyuniqueId);
        LOGGER.debug("SurveyUnique details with id: {}" , surveyUnique);

        return surveyUnique;
    }



    @ApiOperation(value = "Updates the SurveyUnique instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SurveyUnique editSurveyUnique(@RequestParam("id") Integer id, @RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("symptomId") Integer symptomId, @RequestParam("result") Integer result, @RequestParam("sessionId") Integer sessionId, @RequestParam("dataSource") Integer dataSource, @RequestParam("currentStatus") Integer currentStatus, @RequestParam("datetime") Timestamp datetime, @RequestParam("ranking") BigDecimal ranking, @RequestParam("colour") Integer colour, @RequestBody SurveyUnique surveyUnique) {

        surveyUnique.setId(id);
        surveyUnique.setPatientId(patientId);
        surveyUnique.setAllergyId(allergyId);
        surveyUnique.setSymptomId(symptomId);
        surveyUnique.setResult(result);
        surveyUnique.setSessionId(sessionId);
        surveyUnique.setDataSource(dataSource);
        surveyUnique.setCurrentStatus(currentStatus);
        surveyUnique.setDatetime(datetime);
        surveyUnique.setRanking(ranking);
        surveyUnique.setColour(colour);

        LOGGER.debug("SurveyUnique details with id is updated with: {}" , surveyUnique);

        return surveyUniqueService.update(surveyUnique);
    }


    @ApiOperation(value = "Deletes the SurveyUnique instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSurveyUnique(@RequestParam("id") Integer id, @RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("symptomId") Integer symptomId, @RequestParam("result") Integer result, @RequestParam("sessionId") Integer sessionId, @RequestParam("dataSource") Integer dataSource, @RequestParam("currentStatus") Integer currentStatus, @RequestParam("datetime") Timestamp datetime, @RequestParam("ranking") BigDecimal ranking, @RequestParam("colour") Integer colour) {

        SurveyUniqueId surveyuniqueId = new SurveyUniqueId();
        surveyuniqueId.setId(id);
        surveyuniqueId.setPatientId(patientId);
        surveyuniqueId.setAllergyId(allergyId);
        surveyuniqueId.setSymptomId(symptomId);
        surveyuniqueId.setResult(result);
        surveyuniqueId.setSessionId(sessionId);
        surveyuniqueId.setDataSource(dataSource);
        surveyuniqueId.setCurrentStatus(currentStatus);
        surveyuniqueId.setDatetime(datetime);
        surveyuniqueId.setRanking(ranking);
        surveyuniqueId.setColour(colour);

        LOGGER.debug("Deleting SurveyUnique with id: {}" , surveyuniqueId);
        SurveyUnique surveyUnique = surveyUniqueService.delete(surveyuniqueId);

        return surveyUnique != null;
    }


    /**
     * @deprecated Use {@link #findSurveyUniques(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SurveyUnique instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SurveyUnique> searchSurveyUniquesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SurveyUniques list by query filter:{}", (Object) queryFilters);
        return surveyUniqueService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SurveyUnique instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SurveyUnique> findSurveyUniques(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SurveyUniques list by filter:", query);
        return surveyUniqueService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SurveyUnique instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SurveyUnique> filterSurveyUniques(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SurveyUniques list by filter", query);
        return surveyUniqueService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSurveyUniques(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return surveyUniqueService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSurveyUniquesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SurveyUnique.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> surveyUniqueService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SurveyUnique instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSurveyUniques( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SurveyUniques");
		return surveyUniqueService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSurveyUniqueAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return surveyUniqueService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SurveyUniqueService instance
	 */
	protected void setSurveyUniqueService(SurveyUniqueService service) {
		this.surveyUniqueService = service;
	}

}