/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.SessionIdWithUserIdAndPatientId;
import com.dotta.medidata.SessionIdWithUserIdAndPatientIdId;
import com.dotta.medidata.service.SessionIdWithUserIdAndPatientIdService;


/**
 * Controller object for domain model class SessionIdWithUserIdAndPatientId.
 * @see SessionIdWithUserIdAndPatientId
 */
@RestController("medidata.SessionIdWithUserIdAndPatientIdController")
@Api(value = "SessionIdWithUserIdAndPatientIdController", description = "Exposes APIs to work with SessionIdWithUserIdAndPatientId resource.")
@RequestMapping("/medidata/SessionIdWithUserIdAndPatientId")
public class SessionIdWithUserIdAndPatientIdController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SessionIdWithUserIdAndPatientIdController.class);

    @Autowired
	@Qualifier("medidata.SessionIdWithUserIdAndPatientIdService")
	private SessionIdWithUserIdAndPatientIdService sessionIdWithUserIdAndPatientIdService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SessionIdWithUserIdAndPatientId instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SessionIdWithUserIdAndPatientId createSessionIdWithUserIdAndPatientId(@RequestBody SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId) {
		LOGGER.debug("Create SessionIdWithUserIdAndPatientId with information: {}" , sessionIdWithUserIdAndPatientId);

		sessionIdWithUserIdAndPatientId = sessionIdWithUserIdAndPatientIdService.create(sessionIdWithUserIdAndPatientId);
		LOGGER.debug("Created SessionIdWithUserIdAndPatientId with information: {}" , sessionIdWithUserIdAndPatientId);

	    return sessionIdWithUserIdAndPatientId;
	}

    @ApiOperation(value = "Returns the SessionIdWithUserIdAndPatientId instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SessionIdWithUserIdAndPatientId getSessionIdWithUserIdAndPatientId(@RequestParam("sessionId") Integer sessionId, @RequestParam("userId") Integer userId, @RequestParam("user") Integer user, @RequestParam("patientId") Integer patientId, @RequestParam("patient") Integer patient, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName) {

        SessionIdWithUserIdAndPatientIdId sessionidwithuseridandpatientidId = new SessionIdWithUserIdAndPatientIdId();
        sessionidwithuseridandpatientidId.setSessionId(sessionId);
        sessionidwithuseridandpatientidId.setUserId(userId);
        sessionidwithuseridandpatientidId.setUser(user);
        sessionidwithuseridandpatientidId.setPatientId(patientId);
        sessionidwithuseridandpatientidId.setPatient(patient);
        sessionidwithuseridandpatientidId.setFirstName(firstName);
        sessionidwithuseridandpatientidId.setLastName(lastName);

        LOGGER.debug("Getting SessionIdWithUserIdAndPatientId with id: {}" , sessionidwithuseridandpatientidId);
        SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId = sessionIdWithUserIdAndPatientIdService.getById(sessionidwithuseridandpatientidId);
        LOGGER.debug("SessionIdWithUserIdAndPatientId details with id: {}" , sessionIdWithUserIdAndPatientId);

        return sessionIdWithUserIdAndPatientId;
    }



    @ApiOperation(value = "Updates the SessionIdWithUserIdAndPatientId instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SessionIdWithUserIdAndPatientId editSessionIdWithUserIdAndPatientId(@RequestParam("sessionId") Integer sessionId, @RequestParam("userId") Integer userId, @RequestParam("user") Integer user, @RequestParam("patientId") Integer patientId, @RequestParam("patient") Integer patient, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestBody SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId) {

        sessionIdWithUserIdAndPatientId.setSessionId(sessionId);
        sessionIdWithUserIdAndPatientId.setUserId(userId);
        sessionIdWithUserIdAndPatientId.setUser(user);
        sessionIdWithUserIdAndPatientId.setPatientId(patientId);
        sessionIdWithUserIdAndPatientId.setPatient(patient);
        sessionIdWithUserIdAndPatientId.setFirstName(firstName);
        sessionIdWithUserIdAndPatientId.setLastName(lastName);

        LOGGER.debug("SessionIdWithUserIdAndPatientId details with id is updated with: {}" , sessionIdWithUserIdAndPatientId);

        return sessionIdWithUserIdAndPatientIdService.update(sessionIdWithUserIdAndPatientId);
    }


    @ApiOperation(value = "Deletes the SessionIdWithUserIdAndPatientId instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSessionIdWithUserIdAndPatientId(@RequestParam("sessionId") Integer sessionId, @RequestParam("userId") Integer userId, @RequestParam("user") Integer user, @RequestParam("patientId") Integer patientId, @RequestParam("patient") Integer patient, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName) {

        SessionIdWithUserIdAndPatientIdId sessionidwithuseridandpatientidId = new SessionIdWithUserIdAndPatientIdId();
        sessionidwithuseridandpatientidId.setSessionId(sessionId);
        sessionidwithuseridandpatientidId.setUserId(userId);
        sessionidwithuseridandpatientidId.setUser(user);
        sessionidwithuseridandpatientidId.setPatientId(patientId);
        sessionidwithuseridandpatientidId.setPatient(patient);
        sessionidwithuseridandpatientidId.setFirstName(firstName);
        sessionidwithuseridandpatientidId.setLastName(lastName);

        LOGGER.debug("Deleting SessionIdWithUserIdAndPatientId with id: {}" , sessionidwithuseridandpatientidId);
        SessionIdWithUserIdAndPatientId sessionIdWithUserIdAndPatientId = sessionIdWithUserIdAndPatientIdService.delete(sessionidwithuseridandpatientidId);

        return sessionIdWithUserIdAndPatientId != null;
    }


    /**
     * @deprecated Use {@link #findSessionIdWithUserIdAndPatientIds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SessionIdWithUserIdAndPatientId instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SessionIdWithUserIdAndPatientId> searchSessionIdWithUserIdAndPatientIdsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SessionIdWithUserIdAndPatientIds list by query filter:{}", (Object) queryFilters);
        return sessionIdWithUserIdAndPatientIdService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SessionIdWithUserIdAndPatientId instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SessionIdWithUserIdAndPatientId> findSessionIdWithUserIdAndPatientIds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SessionIdWithUserIdAndPatientIds list by filter:", query);
        return sessionIdWithUserIdAndPatientIdService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SessionIdWithUserIdAndPatientId instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SessionIdWithUserIdAndPatientId> filterSessionIdWithUserIdAndPatientIds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SessionIdWithUserIdAndPatientIds list by filter", query);
        return sessionIdWithUserIdAndPatientIdService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSessionIdWithUserIdAndPatientIds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sessionIdWithUserIdAndPatientIdService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSessionIdWithUserIdAndPatientIdsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SessionIdWithUserIdAndPatientId.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> sessionIdWithUserIdAndPatientIdService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SessionIdWithUserIdAndPatientId instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSessionIdWithUserIdAndPatientIds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SessionIdWithUserIdAndPatientIds");
		return sessionIdWithUserIdAndPatientIdService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSessionIdWithUserIdAndPatientIdAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return sessionIdWithUserIdAndPatientIdService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SessionIdWithUserIdAndPatientIdService instance
	 */
	protected void setSessionIdWithUserIdAndPatientIdService(SessionIdWithUserIdAndPatientIdService service) {
		this.sessionIdWithUserIdAndPatientIdService = service;
	}

}