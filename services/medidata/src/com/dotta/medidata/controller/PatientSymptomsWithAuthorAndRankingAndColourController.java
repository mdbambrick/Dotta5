/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.PatientSymptomsWithAuthorAndRankingAndColour;
import com.dotta.medidata.PatientSymptomsWithAuthorAndRankingAndColourId;
import com.dotta.medidata.service.PatientSymptomsWithAuthorAndRankingAndColourService;


/**
 * Controller object for domain model class PatientSymptomsWithAuthorAndRankingAndColour.
 * @see PatientSymptomsWithAuthorAndRankingAndColour
 */
@RestController("medidata.PatientSymptomsWithAuthorAndRankingAndColourController")
@Api(value = "PatientSymptomsWithAuthorAndRankingAndColourController", description = "Exposes APIs to work with PatientSymptomsWithAuthorAndRankingAndColour resource.")
@RequestMapping("/medidata/PatientSymptomsWithAuthorAndRankingAndColour")
public class PatientSymptomsWithAuthorAndRankingAndColourController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PatientSymptomsWithAuthorAndRankingAndColourController.class);

    @Autowired
	@Qualifier("medidata.PatientSymptomsWithAuthorAndRankingAndColourService")
	private PatientSymptomsWithAuthorAndRankingAndColourService patientSymptomsWithAuthorAndRankingAndColourService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PatientSymptomsWithAuthorAndRankingAndColour instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PatientSymptomsWithAuthorAndRankingAndColour createPatientSymptomsWithAuthorAndRankingAndColour(@RequestBody PatientSymptomsWithAuthorAndRankingAndColour patientSymptomsWithAuthorAndRankingAndColour) {
		LOGGER.debug("Create PatientSymptomsWithAuthorAndRankingAndColour with information: {}" , patientSymptomsWithAuthorAndRankingAndColour);

		patientSymptomsWithAuthorAndRankingAndColour = patientSymptomsWithAuthorAndRankingAndColourService.create(patientSymptomsWithAuthorAndRankingAndColour);
		LOGGER.debug("Created PatientSymptomsWithAuthorAndRankingAndColour with information: {}" , patientSymptomsWithAuthorAndRankingAndColour);

	    return patientSymptomsWithAuthorAndRankingAndColour;
	}

    @ApiOperation(value = "Returns the PatientSymptomsWithAuthorAndRankingAndColour instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PatientSymptomsWithAuthorAndRankingAndColour getPatientSymptomsWithAuthorAndRankingAndColour(@RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName, @RequestParam("allergyCategory") Integer allergyCategory, @RequestParam("title") String title, @RequestParam("allergySet") Integer allergySet, @RequestParam("setName") String setName, @RequestParam("symptomId") Integer symptomId, @RequestParam("symptom") String symptom, @RequestParam("result") Integer result, @RequestParam("timestamp") Timestamp timestamp, @RequestParam("sessionId") Integer sessionId, @RequestParam("sessionUser") Integer sessionUser, @RequestParam("authorId") Integer authorId, @RequestParam("authorTitle") String authorTitle, @RequestParam("authorFirstName") String authorFirstName, @RequestParam("authorLastName") String authorLastName, @RequestParam("role") String role, @RequestParam("ranking") Integer ranking, @RequestParam("colour") Integer colour) {

        PatientSymptomsWithAuthorAndRankingAndColourId patientsymptomswithauthorandrankingandcolourId = new PatientSymptomsWithAuthorAndRankingAndColourId();
        patientsymptomswithauthorandrankingandcolourId.setPatientId(patientId);
        patientsymptomswithauthorandrankingandcolourId.setAllergyId(allergyId);
        patientsymptomswithauthorandrankingandcolourId.setAllergyName(allergyName);
        patientsymptomswithauthorandrankingandcolourId.setAllergyCategory(allergyCategory);
        patientsymptomswithauthorandrankingandcolourId.setTitle(title);
        patientsymptomswithauthorandrankingandcolourId.setAllergySet(allergySet);
        patientsymptomswithauthorandrankingandcolourId.setSetName(setName);
        patientsymptomswithauthorandrankingandcolourId.setSymptomId(symptomId);
        patientsymptomswithauthorandrankingandcolourId.setSymptom(symptom);
        patientsymptomswithauthorandrankingandcolourId.setResult(result);
        patientsymptomswithauthorandrankingandcolourId.setTimestamp(timestamp);
        patientsymptomswithauthorandrankingandcolourId.setSessionId(sessionId);
        patientsymptomswithauthorandrankingandcolourId.setSessionUser(sessionUser);
        patientsymptomswithauthorandrankingandcolourId.setAuthorId(authorId);
        patientsymptomswithauthorandrankingandcolourId.setAuthorTitle(authorTitle);
        patientsymptomswithauthorandrankingandcolourId.setAuthorFirstName(authorFirstName);
        patientsymptomswithauthorandrankingandcolourId.setAuthorLastName(authorLastName);
        patientsymptomswithauthorandrankingandcolourId.setRole(role);
        patientsymptomswithauthorandrankingandcolourId.setRanking(ranking);
        patientsymptomswithauthorandrankingandcolourId.setColour(colour);

        LOGGER.debug("Getting PatientSymptomsWithAuthorAndRankingAndColour with id: {}" , patientsymptomswithauthorandrankingandcolourId);
        PatientSymptomsWithAuthorAndRankingAndColour patientSymptomsWithAuthorAndRankingAndColour = patientSymptomsWithAuthorAndRankingAndColourService.getById(patientsymptomswithauthorandrankingandcolourId);
        LOGGER.debug("PatientSymptomsWithAuthorAndRankingAndColour details with id: {}" , patientSymptomsWithAuthorAndRankingAndColour);

        return patientSymptomsWithAuthorAndRankingAndColour;
    }



    @ApiOperation(value = "Updates the PatientSymptomsWithAuthorAndRankingAndColour instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PatientSymptomsWithAuthorAndRankingAndColour editPatientSymptomsWithAuthorAndRankingAndColour(@RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName, @RequestParam("allergyCategory") Integer allergyCategory, @RequestParam("title") String title, @RequestParam("allergySet") Integer allergySet, @RequestParam("setName") String setName, @RequestParam("symptomId") Integer symptomId, @RequestParam("symptom") String symptom, @RequestParam("result") Integer result, @RequestParam("timestamp") Timestamp timestamp, @RequestParam("sessionId") Integer sessionId, @RequestParam("sessionUser") Integer sessionUser, @RequestParam("authorId") Integer authorId, @RequestParam("authorTitle") String authorTitle, @RequestParam("authorFirstName") String authorFirstName, @RequestParam("authorLastName") String authorLastName, @RequestParam("role") String role, @RequestParam("ranking") Integer ranking, @RequestParam("colour") Integer colour, @RequestBody PatientSymptomsWithAuthorAndRankingAndColour patientSymptomsWithAuthorAndRankingAndColour) {

        patientSymptomsWithAuthorAndRankingAndColour.setPatientId(patientId);
        patientSymptomsWithAuthorAndRankingAndColour.setAllergyId(allergyId);
        patientSymptomsWithAuthorAndRankingAndColour.setAllergyName(allergyName);
        patientSymptomsWithAuthorAndRankingAndColour.setAllergyCategory(allergyCategory);
        patientSymptomsWithAuthorAndRankingAndColour.setTitle(title);
        patientSymptomsWithAuthorAndRankingAndColour.setAllergySet(allergySet);
        patientSymptomsWithAuthorAndRankingAndColour.setSetName(setName);
        patientSymptomsWithAuthorAndRankingAndColour.setSymptomId(symptomId);
        patientSymptomsWithAuthorAndRankingAndColour.setSymptom(symptom);
        patientSymptomsWithAuthorAndRankingAndColour.setResult(result);
        patientSymptomsWithAuthorAndRankingAndColour.setTimestamp(timestamp);
        patientSymptomsWithAuthorAndRankingAndColour.setSessionId(sessionId);
        patientSymptomsWithAuthorAndRankingAndColour.setSessionUser(sessionUser);
        patientSymptomsWithAuthorAndRankingAndColour.setAuthorId(authorId);
        patientSymptomsWithAuthorAndRankingAndColour.setAuthorTitle(authorTitle);
        patientSymptomsWithAuthorAndRankingAndColour.setAuthorFirstName(authorFirstName);
        patientSymptomsWithAuthorAndRankingAndColour.setAuthorLastName(authorLastName);
        patientSymptomsWithAuthorAndRankingAndColour.setRole(role);
        patientSymptomsWithAuthorAndRankingAndColour.setRanking(ranking);
        patientSymptomsWithAuthorAndRankingAndColour.setColour(colour);

        LOGGER.debug("PatientSymptomsWithAuthorAndRankingAndColour details with id is updated with: {}" , patientSymptomsWithAuthorAndRankingAndColour);

        return patientSymptomsWithAuthorAndRankingAndColourService.update(patientSymptomsWithAuthorAndRankingAndColour);
    }


    @ApiOperation(value = "Deletes the PatientSymptomsWithAuthorAndRankingAndColour instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePatientSymptomsWithAuthorAndRankingAndColour(@RequestParam("patientId") Integer patientId, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName, @RequestParam("allergyCategory") Integer allergyCategory, @RequestParam("title") String title, @RequestParam("allergySet") Integer allergySet, @RequestParam("setName") String setName, @RequestParam("symptomId") Integer symptomId, @RequestParam("symptom") String symptom, @RequestParam("result") Integer result, @RequestParam("timestamp") Timestamp timestamp, @RequestParam("sessionId") Integer sessionId, @RequestParam("sessionUser") Integer sessionUser, @RequestParam("authorId") Integer authorId, @RequestParam("authorTitle") String authorTitle, @RequestParam("authorFirstName") String authorFirstName, @RequestParam("authorLastName") String authorLastName, @RequestParam("role") String role, @RequestParam("ranking") Integer ranking, @RequestParam("colour") Integer colour) {

        PatientSymptomsWithAuthorAndRankingAndColourId patientsymptomswithauthorandrankingandcolourId = new PatientSymptomsWithAuthorAndRankingAndColourId();
        patientsymptomswithauthorandrankingandcolourId.setPatientId(patientId);
        patientsymptomswithauthorandrankingandcolourId.setAllergyId(allergyId);
        patientsymptomswithauthorandrankingandcolourId.setAllergyName(allergyName);
        patientsymptomswithauthorandrankingandcolourId.setAllergyCategory(allergyCategory);
        patientsymptomswithauthorandrankingandcolourId.setTitle(title);
        patientsymptomswithauthorandrankingandcolourId.setAllergySet(allergySet);
        patientsymptomswithauthorandrankingandcolourId.setSetName(setName);
        patientsymptomswithauthorandrankingandcolourId.setSymptomId(symptomId);
        patientsymptomswithauthorandrankingandcolourId.setSymptom(symptom);
        patientsymptomswithauthorandrankingandcolourId.setResult(result);
        patientsymptomswithauthorandrankingandcolourId.setTimestamp(timestamp);
        patientsymptomswithauthorandrankingandcolourId.setSessionId(sessionId);
        patientsymptomswithauthorandrankingandcolourId.setSessionUser(sessionUser);
        patientsymptomswithauthorandrankingandcolourId.setAuthorId(authorId);
        patientsymptomswithauthorandrankingandcolourId.setAuthorTitle(authorTitle);
        patientsymptomswithauthorandrankingandcolourId.setAuthorFirstName(authorFirstName);
        patientsymptomswithauthorandrankingandcolourId.setAuthorLastName(authorLastName);
        patientsymptomswithauthorandrankingandcolourId.setRole(role);
        patientsymptomswithauthorandrankingandcolourId.setRanking(ranking);
        patientsymptomswithauthorandrankingandcolourId.setColour(colour);

        LOGGER.debug("Deleting PatientSymptomsWithAuthorAndRankingAndColour with id: {}" , patientsymptomswithauthorandrankingandcolourId);
        PatientSymptomsWithAuthorAndRankingAndColour patientSymptomsWithAuthorAndRankingAndColour = patientSymptomsWithAuthorAndRankingAndColourService.delete(patientsymptomswithauthorandrankingandcolourId);

        return patientSymptomsWithAuthorAndRankingAndColour != null;
    }


    /**
     * @deprecated Use {@link #findPatientSymptomsWithAuthorAndRankingAndColours(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PatientSymptomsWithAuthorAndRankingAndColour instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PatientSymptomsWithAuthorAndRankingAndColour> searchPatientSymptomsWithAuthorAndRankingAndColoursByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PatientSymptomsWithAuthorAndRankingAndColours list by query filter:{}", (Object) queryFilters);
        return patientSymptomsWithAuthorAndRankingAndColourService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PatientSymptomsWithAuthorAndRankingAndColour instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PatientSymptomsWithAuthorAndRankingAndColour> findPatientSymptomsWithAuthorAndRankingAndColours(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PatientSymptomsWithAuthorAndRankingAndColours list by filter:", query);
        return patientSymptomsWithAuthorAndRankingAndColourService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PatientSymptomsWithAuthorAndRankingAndColour instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PatientSymptomsWithAuthorAndRankingAndColour> filterPatientSymptomsWithAuthorAndRankingAndColours(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PatientSymptomsWithAuthorAndRankingAndColours list by filter", query);
        return patientSymptomsWithAuthorAndRankingAndColourService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPatientSymptomsWithAuthorAndRankingAndColours(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return patientSymptomsWithAuthorAndRankingAndColourService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPatientSymptomsWithAuthorAndRankingAndColoursAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PatientSymptomsWithAuthorAndRankingAndColour.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> patientSymptomsWithAuthorAndRankingAndColourService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PatientSymptomsWithAuthorAndRankingAndColour instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPatientSymptomsWithAuthorAndRankingAndColours( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PatientSymptomsWithAuthorAndRankingAndColours");
		return patientSymptomsWithAuthorAndRankingAndColourService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPatientSymptomsWithAuthorAndRankingAndColourAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return patientSymptomsWithAuthorAndRankingAndColourService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PatientSymptomsWithAuthorAndRankingAndColourService instance
	 */
	protected void setPatientSymptomsWithAuthorAndRankingAndColourService(PatientSymptomsWithAuthorAndRankingAndColourService service) {
		this.patientSymptomsWithAuthorAndRankingAndColourService = service;
	}

}