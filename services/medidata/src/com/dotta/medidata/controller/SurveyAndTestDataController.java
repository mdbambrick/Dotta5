/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.SurveyAndTestData;
import com.dotta.medidata.service.SurveyAndTestDataService;


/**
 * Controller object for domain model class SurveyAndTestData.
 * @see SurveyAndTestData
 */
@RestController("medidata.SurveyAndTestDataController")
@Api(value = "SurveyAndTestDataController", description = "Exposes APIs to work with SurveyAndTestData resource.")
@RequestMapping("/medidata/SurveyAndTestData")
public class SurveyAndTestDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SurveyAndTestDataController.class);

    @Autowired
	@Qualifier("medidata.SurveyAndTestDataService")
	private SurveyAndTestDataService surveyAndTestDataService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SurveyAndTestData instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SurveyAndTestData createSurveyAndTestData(@RequestBody SurveyAndTestData surveyAndTestData) {
		LOGGER.debug("Create SurveyAndTestData with information: {}" , surveyAndTestData);

		surveyAndTestData = surveyAndTestDataService.create(surveyAndTestData);
		LOGGER.debug("Created SurveyAndTestData with information: {}" , surveyAndTestData);

	    return surveyAndTestData;
	}

    @ApiOperation(value = "Returns the SurveyAndTestData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SurveyAndTestData getSurveyAndTestData(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SurveyAndTestData with id: {}" , id);

        SurveyAndTestData foundSurveyAndTestData = surveyAndTestDataService.getById(id);
        LOGGER.debug("SurveyAndTestData details with id: {}" , foundSurveyAndTestData);

        return foundSurveyAndTestData;
    }

    @ApiOperation(value = "Updates the SurveyAndTestData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SurveyAndTestData editSurveyAndTestData(@PathVariable("id") Integer id, @RequestBody SurveyAndTestData surveyAndTestData) {
        LOGGER.debug("Editing SurveyAndTestData with id: {}" , surveyAndTestData.getId());

        surveyAndTestData.setId(id);
        surveyAndTestData = surveyAndTestDataService.update(surveyAndTestData);
        LOGGER.debug("SurveyAndTestData details with id: {}" , surveyAndTestData);

        return surveyAndTestData;
    }

    @ApiOperation(value = "Deletes the SurveyAndTestData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSurveyAndTestData(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SurveyAndTestData with id: {}" , id);

        SurveyAndTestData deletedSurveyAndTestData = surveyAndTestDataService.delete(id);

        return deletedSurveyAndTestData != null;
    }

    /**
     * @deprecated Use {@link #findSurveyAndTestDatas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SurveyAndTestData instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SurveyAndTestData> searchSurveyAndTestDatasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SurveyAndTestDatas list by query filter:{}", (Object) queryFilters);
        return surveyAndTestDataService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SurveyAndTestData instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SurveyAndTestData> findSurveyAndTestDatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SurveyAndTestDatas list by filter:", query);
        return surveyAndTestDataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SurveyAndTestData instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SurveyAndTestData> filterSurveyAndTestDatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SurveyAndTestDatas list by filter", query);
        return surveyAndTestDataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSurveyAndTestDatas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return surveyAndTestDataService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSurveyAndTestDatasAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SurveyAndTestData.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> surveyAndTestDataService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SurveyAndTestData instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSurveyAndTestDatas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SurveyAndTestDatas");
		return surveyAndTestDataService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSurveyAndTestDataAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return surveyAndTestDataService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SurveyAndTestDataService instance
	 */
	protected void setSurveyAndTestDataService(SurveyAndTestDataService service) {
		this.surveyAndTestDataService = service;
	}

}