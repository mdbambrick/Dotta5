/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.ConnectedSymptomMultipliers;
import com.dotta.medidata.service.ConnectedSymptomMultipliersService;


/**
 * Controller object for domain model class ConnectedSymptomMultipliers.
 * @see ConnectedSymptomMultipliers
 */
@RestController("medidata.ConnectedSymptomMultipliersController")
@Api(value = "ConnectedSymptomMultipliersController", description = "Exposes APIs to work with ConnectedSymptomMultipliers resource.")
@RequestMapping("/medidata/ConnectedSymptomMultipliers")
public class ConnectedSymptomMultipliersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectedSymptomMultipliersController.class);

    @Autowired
	@Qualifier("medidata.ConnectedSymptomMultipliersService")
	private ConnectedSymptomMultipliersService connectedSymptomMultipliersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ConnectedSymptomMultipliers instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ConnectedSymptomMultipliers createConnectedSymptomMultipliers(@RequestBody ConnectedSymptomMultipliers connectedSymptomMultipliers) {
		LOGGER.debug("Create ConnectedSymptomMultipliers with information: {}" , connectedSymptomMultipliers);

		connectedSymptomMultipliers = connectedSymptomMultipliersService.create(connectedSymptomMultipliers);
		LOGGER.debug("Created ConnectedSymptomMultipliers with information: {}" , connectedSymptomMultipliers);

	    return connectedSymptomMultipliers;
	}

    @ApiOperation(value = "Returns the ConnectedSymptomMultipliers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ConnectedSymptomMultipliers getConnectedSymptomMultipliers(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ConnectedSymptomMultipliers with id: {}" , id);

        ConnectedSymptomMultipliers foundConnectedSymptomMultipliers = connectedSymptomMultipliersService.getById(id);
        LOGGER.debug("ConnectedSymptomMultipliers details with id: {}" , foundConnectedSymptomMultipliers);

        return foundConnectedSymptomMultipliers;
    }

    @ApiOperation(value = "Updates the ConnectedSymptomMultipliers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ConnectedSymptomMultipliers editConnectedSymptomMultipliers(@PathVariable("id") Integer id, @RequestBody ConnectedSymptomMultipliers connectedSymptomMultipliers) {
        LOGGER.debug("Editing ConnectedSymptomMultipliers with id: {}" , connectedSymptomMultipliers.getId());

        connectedSymptomMultipliers.setId(id);
        connectedSymptomMultipliers = connectedSymptomMultipliersService.update(connectedSymptomMultipliers);
        LOGGER.debug("ConnectedSymptomMultipliers details with id: {}" , connectedSymptomMultipliers);

        return connectedSymptomMultipliers;
    }

    @ApiOperation(value = "Deletes the ConnectedSymptomMultipliers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteConnectedSymptomMultipliers(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ConnectedSymptomMultipliers with id: {}" , id);

        ConnectedSymptomMultipliers deletedConnectedSymptomMultipliers = connectedSymptomMultipliersService.delete(id);

        return deletedConnectedSymptomMultipliers != null;
    }

    /**
     * @deprecated Use {@link #findConnectedSymptomMultipliers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ConnectedSymptomMultipliers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ConnectedSymptomMultipliers> searchConnectedSymptomMultipliersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ConnectedSymptomMultipliers list by query filter:{}", (Object) queryFilters);
        return connectedSymptomMultipliersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ConnectedSymptomMultipliers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ConnectedSymptomMultipliers> findConnectedSymptomMultipliers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ConnectedSymptomMultipliers list by filter:", query);
        return connectedSymptomMultipliersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ConnectedSymptomMultipliers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ConnectedSymptomMultipliers> filterConnectedSymptomMultipliers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ConnectedSymptomMultipliers list by filter", query);
        return connectedSymptomMultipliersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportConnectedSymptomMultipliers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return connectedSymptomMultipliersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportConnectedSymptomMultipliersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ConnectedSymptomMultipliers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> connectedSymptomMultipliersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ConnectedSymptomMultipliers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countConnectedSymptomMultipliers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ConnectedSymptomMultipliers");
		return connectedSymptomMultipliersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getConnectedSymptomMultipliersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return connectedSymptomMultipliersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ConnectedSymptomMultipliersService instance
	 */
	protected void setConnectedSymptomMultipliersService(ConnectedSymptomMultipliersService service) {
		this.connectedSymptomMultipliersService = service;
	}

}