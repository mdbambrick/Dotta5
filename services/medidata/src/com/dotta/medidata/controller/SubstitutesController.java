/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.Substitutes;
import com.dotta.medidata.SubstitutesAllergies;
import com.dotta.medidata.service.SubstitutesService;


/**
 * Controller object for domain model class Substitutes.
 * @see Substitutes
 */
@RestController("medidata.SubstitutesController")
@Api(value = "SubstitutesController", description = "Exposes APIs to work with Substitutes resource.")
@RequestMapping("/medidata/Substitutes")
public class SubstitutesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubstitutesController.class);

    @Autowired
	@Qualifier("medidata.SubstitutesService")
	private SubstitutesService substitutesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Substitutes instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Substitutes createSubstitutes(@RequestBody Substitutes substitutes) {
		LOGGER.debug("Create Substitutes with information: {}" , substitutes);

		substitutes = substitutesService.create(substitutes);
		LOGGER.debug("Created Substitutes with information: {}" , substitutes);

	    return substitutes;
	}

    @ApiOperation(value = "Returns the Substitutes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Substitutes getSubstitutes(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Substitutes with id: {}" , id);

        Substitutes foundSubstitutes = substitutesService.getById(id);
        LOGGER.debug("Substitutes details with id: {}" , foundSubstitutes);

        return foundSubstitutes;
    }

    @ApiOperation(value = "Updates the Substitutes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Substitutes editSubstitutes(@PathVariable("id") Integer id, @RequestBody Substitutes substitutes) {
        LOGGER.debug("Editing Substitutes with id: {}" , substitutes.getId());

        substitutes.setId(id);
        substitutes = substitutesService.update(substitutes);
        LOGGER.debug("Substitutes details with id: {}" , substitutes);

        return substitutes;
    }

    @ApiOperation(value = "Deletes the Substitutes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubstitutes(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Substitutes with id: {}" , id);

        Substitutes deletedSubstitutes = substitutesService.delete(id);

        return deletedSubstitutes != null;
    }

    /**
     * @deprecated Use {@link #findSubstitutes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Substitutes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Substitutes> searchSubstitutesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Substitutes list by query filter:{}", (Object) queryFilters);
        return substitutesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Substitutes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Substitutes> findSubstitutes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Substitutes list by filter:", query);
        return substitutesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Substitutes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Substitutes> filterSubstitutes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Substitutes list by filter", query);
        return substitutesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubstitutes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return substitutesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSubstitutesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Substitutes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> substitutesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Substitutes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubstitutes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Substitutes");
		return substitutesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubstitutesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return substitutesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/substitutesAllergieses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the substitutesAllergieses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubstitutesAllergies> findAssociatedSubstitutesAllergieses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated substitutesAllergieses");
        return substitutesService.findAssociatedSubstitutesAllergieses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubstitutesService instance
	 */
	protected void setSubstitutesService(SubstitutesService service) {
		this.substitutesService = service;
	}

}