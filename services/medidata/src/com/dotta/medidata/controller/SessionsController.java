/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.Background;
import com.dotta.medidata.Sessions;
import com.dotta.medidata.SurveyAndTestData;
import com.dotta.medidata.service.SessionsService;


/**
 * Controller object for domain model class Sessions.
 * @see Sessions
 */
@RestController("medidata.SessionsController")
@Api(value = "SessionsController", description = "Exposes APIs to work with Sessions resource.")
@RequestMapping("/medidata/Sessions")
public class SessionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SessionsController.class);

    @Autowired
	@Qualifier("medidata.SessionsService")
	private SessionsService sessionsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Sessions instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Sessions createSessions(@RequestBody Sessions sessions) {
		LOGGER.debug("Create Sessions with information: {}" , sessions);

		sessions = sessionsService.create(sessions);
		LOGGER.debug("Created Sessions with information: {}" , sessions);

	    return sessions;
	}

    @ApiOperation(value = "Returns the Sessions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Sessions getSessions(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Sessions with id: {}" , id);

        Sessions foundSessions = sessionsService.getById(id);
        LOGGER.debug("Sessions details with id: {}" , foundSessions);

        return foundSessions;
    }

    @ApiOperation(value = "Updates the Sessions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Sessions editSessions(@PathVariable("id") Integer id, @RequestBody Sessions sessions) {
        LOGGER.debug("Editing Sessions with id: {}" , sessions.getId());

        sessions.setId(id);
        sessions = sessionsService.update(sessions);
        LOGGER.debug("Sessions details with id: {}" , sessions);

        return sessions;
    }

    @ApiOperation(value = "Deletes the Sessions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSessions(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Sessions with id: {}" , id);

        Sessions deletedSessions = sessionsService.delete(id);

        return deletedSessions != null;
    }

    @RequestMapping(value = "/id/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Sessions with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Sessions getByUniqueKeyId(@PathVariable("id") int id) {
        LOGGER.debug("Getting Sessions with uniques key UniqueKeyId");
        return sessionsService.getByUniqueKeyId(id);
    }

    /**
     * @deprecated Use {@link #findSessions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Sessions instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sessions> searchSessionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Sessions list by query filter:{}", (Object) queryFilters);
        return sessionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Sessions instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sessions> findSessions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Sessions list by filter:", query);
        return sessionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Sessions instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sessions> filterSessions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Sessions list by filter", query);
        return sessionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSessions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sessionsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSessionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Sessions.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> sessionsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Sessions instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSessions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Sessions");
		return sessionsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSessionsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return sessionsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/backgrounds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the backgrounds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Background> findAssociatedBackgrounds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated backgrounds");
        return sessionsService.findAssociatedBackgrounds(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/surveyAndTestDatas", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the surveyAndTestDatas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SurveyAndTestData> findAssociatedSurveyAndTestDatas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated surveyAndTestDatas");
        return sessionsService.findAssociatedSurveyAndTestDatas(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SessionsService instance
	 */
	protected void setSessionsService(SessionsService service) {
		this.sessionsService = service;
	}

}