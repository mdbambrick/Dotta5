/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.CompoundsWithAllergens;
import com.dotta.medidata.CompoundsWithAllergensId;
import com.dotta.medidata.service.CompoundsWithAllergensService;


/**
 * Controller object for domain model class CompoundsWithAllergens.
 * @see CompoundsWithAllergens
 */
@RestController("medidata.CompoundsWithAllergensController")
@Api(value = "CompoundsWithAllergensController", description = "Exposes APIs to work with CompoundsWithAllergens resource.")
@RequestMapping("/medidata/CompoundsWithAllergens")
public class CompoundsWithAllergensController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompoundsWithAllergensController.class);

    @Autowired
	@Qualifier("medidata.CompoundsWithAllergensService")
	private CompoundsWithAllergensService compoundsWithAllergensService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CompoundsWithAllergens instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompoundsWithAllergens createCompoundsWithAllergens(@RequestBody CompoundsWithAllergens compoundsWithAllergens) {
		LOGGER.debug("Create CompoundsWithAllergens with information: {}" , compoundsWithAllergens);

		compoundsWithAllergens = compoundsWithAllergensService.create(compoundsWithAllergens);
		LOGGER.debug("Created CompoundsWithAllergens with information: {}" , compoundsWithAllergens);

	    return compoundsWithAllergens;
	}

    @ApiOperation(value = "Returns the CompoundsWithAllergens instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompoundsWithAllergens getCompoundsWithAllergens(@RequestParam("compoundId") Integer compoundId, @RequestParam("compoundName") String compoundName, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName) {

        CompoundsWithAllergensId compoundswithallergensId = new CompoundsWithAllergensId();
        compoundswithallergensId.setCompoundId(compoundId);
        compoundswithallergensId.setCompoundName(compoundName);
        compoundswithallergensId.setAllergyId(allergyId);
        compoundswithallergensId.setAllergyName(allergyName);

        LOGGER.debug("Getting CompoundsWithAllergens with id: {}" , compoundswithallergensId);
        CompoundsWithAllergens compoundsWithAllergens = compoundsWithAllergensService.getById(compoundswithallergensId);
        LOGGER.debug("CompoundsWithAllergens details with id: {}" , compoundsWithAllergens);

        return compoundsWithAllergens;
    }



    @ApiOperation(value = "Updates the CompoundsWithAllergens instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompoundsWithAllergens editCompoundsWithAllergens(@RequestParam("compoundId") Integer compoundId, @RequestParam("compoundName") String compoundName, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName, @RequestBody CompoundsWithAllergens compoundsWithAllergens) {

        compoundsWithAllergens.setCompoundId(compoundId);
        compoundsWithAllergens.setCompoundName(compoundName);
        compoundsWithAllergens.setAllergyId(allergyId);
        compoundsWithAllergens.setAllergyName(allergyName);

        LOGGER.debug("CompoundsWithAllergens details with id is updated with: {}" , compoundsWithAllergens);

        return compoundsWithAllergensService.update(compoundsWithAllergens);
    }


    @ApiOperation(value = "Deletes the CompoundsWithAllergens instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCompoundsWithAllergens(@RequestParam("compoundId") Integer compoundId, @RequestParam("compoundName") String compoundName, @RequestParam("allergyId") Integer allergyId, @RequestParam("allergyName") String allergyName) {

        CompoundsWithAllergensId compoundswithallergensId = new CompoundsWithAllergensId();
        compoundswithallergensId.setCompoundId(compoundId);
        compoundswithallergensId.setCompoundName(compoundName);
        compoundswithallergensId.setAllergyId(allergyId);
        compoundswithallergensId.setAllergyName(allergyName);

        LOGGER.debug("Deleting CompoundsWithAllergens with id: {}" , compoundswithallergensId);
        CompoundsWithAllergens compoundsWithAllergens = compoundsWithAllergensService.delete(compoundswithallergensId);

        return compoundsWithAllergens != null;
    }


    /**
     * @deprecated Use {@link #findCompoundsWithAllergens(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CompoundsWithAllergens instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompoundsWithAllergens> searchCompoundsWithAllergensByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CompoundsWithAllergens list by query filter:{}", (Object) queryFilters);
        return compoundsWithAllergensService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompoundsWithAllergens instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompoundsWithAllergens> findCompoundsWithAllergens(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompoundsWithAllergens list by filter:", query);
        return compoundsWithAllergensService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompoundsWithAllergens instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompoundsWithAllergens> filterCompoundsWithAllergens(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompoundsWithAllergens list by filter", query);
        return compoundsWithAllergensService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompoundsWithAllergens(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return compoundsWithAllergensService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCompoundsWithAllergensAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CompoundsWithAllergens.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> compoundsWithAllergensService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CompoundsWithAllergens instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCompoundsWithAllergens( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CompoundsWithAllergens");
		return compoundsWithAllergensService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCompoundsWithAllergensAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return compoundsWithAllergensService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompoundsWithAllergensService instance
	 */
	protected void setCompoundsWithAllergensService(CompoundsWithAllergensService service) {
		this.compoundsWithAllergensService = service;
	}

}