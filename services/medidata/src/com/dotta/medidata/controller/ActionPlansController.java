/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.ActionPlans;
import com.dotta.medidata.ActionsDiagnoses;
import com.dotta.medidata.service.ActionPlansService;


/**
 * Controller object for domain model class ActionPlans.
 * @see ActionPlans
 */
@RestController("medidata.ActionPlansController")
@Api(value = "ActionPlansController", description = "Exposes APIs to work with ActionPlans resource.")
@RequestMapping("/medidata/ActionPlans")
public class ActionPlansController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActionPlansController.class);

    @Autowired
	@Qualifier("medidata.ActionPlansService")
	private ActionPlansService actionPlansService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ActionPlans instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActionPlans createActionPlans(@RequestBody ActionPlans actionPlans) {
		LOGGER.debug("Create ActionPlans with information: {}" , actionPlans);

		actionPlans = actionPlansService.create(actionPlans);
		LOGGER.debug("Created ActionPlans with information: {}" , actionPlans);

	    return actionPlans;
	}

    @ApiOperation(value = "Returns the ActionPlans instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActionPlans getActionPlans(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ActionPlans with id: {}" , id);

        ActionPlans foundActionPlans = actionPlansService.getById(id);
        LOGGER.debug("ActionPlans details with id: {}" , foundActionPlans);

        return foundActionPlans;
    }

    @ApiOperation(value = "Updates the ActionPlans instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActionPlans editActionPlans(@PathVariable("id") Integer id, @RequestBody ActionPlans actionPlans) {
        LOGGER.debug("Editing ActionPlans with id: {}" , actionPlans.getId());

        actionPlans.setId(id);
        actionPlans = actionPlansService.update(actionPlans);
        LOGGER.debug("ActionPlans details with id: {}" , actionPlans);

        return actionPlans;
    }

    @ApiOperation(value = "Deletes the ActionPlans instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteActionPlans(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ActionPlans with id: {}" , id);

        ActionPlans deletedActionPlans = actionPlansService.delete(id);

        return deletedActionPlans != null;
    }

    /**
     * @deprecated Use {@link #findActionPlans(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ActionPlans instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActionPlans> searchActionPlansByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ActionPlans list by query filter:{}", (Object) queryFilters);
        return actionPlansService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ActionPlans instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActionPlans> findActionPlans(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ActionPlans list by filter:", query);
        return actionPlansService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ActionPlans instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActionPlans> filterActionPlans(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ActionPlans list by filter", query);
        return actionPlansService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportActionPlans(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return actionPlansService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportActionPlansAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ActionPlans.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> actionPlansService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ActionPlans instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countActionPlans( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ActionPlans");
		return actionPlansService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getActionPlansAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return actionPlansService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/actionsDiagnoseses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the actionsDiagnoseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActionsDiagnoses> findAssociatedActionsDiagnoseses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated actionsDiagnoseses");
        return actionPlansService.findAssociatedActionsDiagnoseses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ActionPlansService instance
	 */
	protected void setActionPlansService(ActionPlansService service) {
		this.actionPlansService = service;
	}

}