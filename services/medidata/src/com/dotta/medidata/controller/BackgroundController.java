/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.Background;
import com.dotta.medidata.BackgroundId;
import com.dotta.medidata.service.BackgroundService;


/**
 * Controller object for domain model class Background.
 * @see Background
 */
@RestController("medidata.BackgroundController")
@Api(value = "BackgroundController", description = "Exposes APIs to work with Background resource.")
@RequestMapping("/medidata/Background")
public class BackgroundController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BackgroundController.class);

    @Autowired
	@Qualifier("medidata.BackgroundService")
	private BackgroundService backgroundService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Background instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Background createBackground(@RequestBody Background background) {
		LOGGER.debug("Create Background with information: {}" , background);

		background = backgroundService.create(background);
		LOGGER.debug("Created Background with information: {}" , background);

	    return background;
	}

    @ApiOperation(value = "Returns the Background instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Background getBackground(@RequestParam("patientId") Integer patientId, @RequestParam("id") Integer id) {

        BackgroundId backgroundId = new BackgroundId();
        backgroundId.setPatientId(patientId);
        backgroundId.setId(id);

        LOGGER.debug("Getting Background with id: {}" , backgroundId);
        Background background = backgroundService.getById(backgroundId);
        LOGGER.debug("Background details with id: {}" , background);

        return background;
    }



    @ApiOperation(value = "Updates the Background instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Background editBackground(@RequestParam("patientId") Integer patientId, @RequestParam("id") Integer id, @RequestBody Background background) {

        background.setPatientId(patientId);
        background.setId(id);

        LOGGER.debug("Background details with id is updated with: {}" , background);

        return backgroundService.update(background);
    }


    @ApiOperation(value = "Deletes the Background instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBackground(@RequestParam("patientId") Integer patientId, @RequestParam("id") Integer id) {

        BackgroundId backgroundId = new BackgroundId();
        backgroundId.setPatientId(patientId);
        backgroundId.setId(id);

        LOGGER.debug("Deleting Background with id: {}" , backgroundId);
        Background background = backgroundService.delete(backgroundId);

        return background != null;
    }


    @RequestMapping(value = "/id/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Background with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Background getByUniqueKeyId(@PathVariable("id") int id) {
        LOGGER.debug("Getting Background with uniques key UniqueKeyId");
        return backgroundService.getByUniqueKeyId(id);
    }

    /**
     * @deprecated Use {@link #findBackgrounds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Background instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Background> searchBackgroundsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Backgrounds list by query filter:{}", (Object) queryFilters);
        return backgroundService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Background instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Background> findBackgrounds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Backgrounds list by filter:", query);
        return backgroundService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Background instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Background> filterBackgrounds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Backgrounds list by filter", query);
        return backgroundService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBackgrounds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return backgroundService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBackgroundsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Background.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> backgroundService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Background instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBackgrounds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Backgrounds");
		return backgroundService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBackgroundAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return backgroundService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BackgroundService instance
	 */
	protected void setBackgroundService(BackgroundService service) {
		this.backgroundService = service;
	}

}