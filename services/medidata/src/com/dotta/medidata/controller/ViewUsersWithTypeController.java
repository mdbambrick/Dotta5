/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dotta.medidata.ViewUsersWithType;
import com.dotta.medidata.ViewUsersWithTypeId;
import com.dotta.medidata.service.ViewUsersWithTypeService;


/**
 * Controller object for domain model class ViewUsersWithType.
 * @see ViewUsersWithType
 */
@RestController("medidata.ViewUsersWithTypeController")
@Api(value = "ViewUsersWithTypeController", description = "Exposes APIs to work with ViewUsersWithType resource.")
@RequestMapping("/medidata/ViewUsersWithType")
public class ViewUsersWithTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewUsersWithTypeController.class);

    @Autowired
	@Qualifier("medidata.ViewUsersWithTypeService")
	private ViewUsersWithTypeService viewUsersWithTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ViewUsersWithType instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewUsersWithType createViewUsersWithType(@RequestBody ViewUsersWithType viewUsersWithType) {
		LOGGER.debug("Create ViewUsersWithType with information: {}" , viewUsersWithType);

		viewUsersWithType = viewUsersWithTypeService.create(viewUsersWithType);
		LOGGER.debug("Created ViewUsersWithType with information: {}" , viewUsersWithType);

	    return viewUsersWithType;
	}

    @ApiOperation(value = "Returns the ViewUsersWithType instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewUsersWithType getViewUsersWithType(@RequestParam("id") Integer id, @RequestParam("username") String username, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("password") String password, @RequestParam("email") String email, @RequestParam("salt") String salt, @RequestParam("userType") Integer userType, @RequestParam("role") String role) {

        ViewUsersWithTypeId viewuserswithtypeId = new ViewUsersWithTypeId();
        viewuserswithtypeId.setId(id);
        viewuserswithtypeId.setUsername(username);
        viewuserswithtypeId.setTitle(title);
        viewuserswithtypeId.setFirstName(firstName);
        viewuserswithtypeId.setLastName(lastName);
        viewuserswithtypeId.setPassword(password);
        viewuserswithtypeId.setEmail(email);
        viewuserswithtypeId.setSalt(salt);
        viewuserswithtypeId.setUserType(userType);
        viewuserswithtypeId.setRole(role);

        LOGGER.debug("Getting ViewUsersWithType with id: {}" , viewuserswithtypeId);
        ViewUsersWithType viewUsersWithType = viewUsersWithTypeService.getById(viewuserswithtypeId);
        LOGGER.debug("ViewUsersWithType details with id: {}" , viewUsersWithType);

        return viewUsersWithType;
    }



    @ApiOperation(value = "Updates the ViewUsersWithType instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewUsersWithType editViewUsersWithType(@RequestParam("id") Integer id, @RequestParam("username") String username, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("password") String password, @RequestParam("email") String email, @RequestParam("salt") String salt, @RequestParam("userType") Integer userType, @RequestParam("role") String role, @RequestBody ViewUsersWithType viewUsersWithType) {

        viewUsersWithType.setId(id);
        viewUsersWithType.setUsername(username);
        viewUsersWithType.setTitle(title);
        viewUsersWithType.setFirstName(firstName);
        viewUsersWithType.setLastName(lastName);
        viewUsersWithType.setPassword(password);
        viewUsersWithType.setEmail(email);
        viewUsersWithType.setSalt(salt);
        viewUsersWithType.setUserType(userType);
        viewUsersWithType.setRole(role);

        LOGGER.debug("ViewUsersWithType details with id is updated with: {}" , viewUsersWithType);

        return viewUsersWithTypeService.update(viewUsersWithType);
    }


    @ApiOperation(value = "Deletes the ViewUsersWithType instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteViewUsersWithType(@RequestParam("id") Integer id, @RequestParam("username") String username, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("password") String password, @RequestParam("email") String email, @RequestParam("salt") String salt, @RequestParam("userType") Integer userType, @RequestParam("role") String role) {

        ViewUsersWithTypeId viewuserswithtypeId = new ViewUsersWithTypeId();
        viewuserswithtypeId.setId(id);
        viewuserswithtypeId.setUsername(username);
        viewuserswithtypeId.setTitle(title);
        viewuserswithtypeId.setFirstName(firstName);
        viewuserswithtypeId.setLastName(lastName);
        viewuserswithtypeId.setPassword(password);
        viewuserswithtypeId.setEmail(email);
        viewuserswithtypeId.setSalt(salt);
        viewuserswithtypeId.setUserType(userType);
        viewuserswithtypeId.setRole(role);

        LOGGER.debug("Deleting ViewUsersWithType with id: {}" , viewuserswithtypeId);
        ViewUsersWithType viewUsersWithType = viewUsersWithTypeService.delete(viewuserswithtypeId);

        return viewUsersWithType != null;
    }


    /**
     * @deprecated Use {@link #findViewUsersWithTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ViewUsersWithType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewUsersWithType> searchViewUsersWithTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ViewUsersWithTypes list by query filter:{}", (Object) queryFilters);
        return viewUsersWithTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ViewUsersWithType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewUsersWithType> findViewUsersWithTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewUsersWithTypes list by filter:", query);
        return viewUsersWithTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ViewUsersWithType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewUsersWithType> filterViewUsersWithTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewUsersWithTypes list by filter", query);
        return viewUsersWithTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportViewUsersWithTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return viewUsersWithTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportViewUsersWithTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ViewUsersWithType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> viewUsersWithTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ViewUsersWithType instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countViewUsersWithTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ViewUsersWithTypes");
		return viewUsersWithTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getViewUsersWithTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return viewUsersWithTypeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ViewUsersWithTypeService instance
	 */
	protected void setViewUsersWithTypeService(ViewUsersWithTypeService service) {
		this.viewUsersWithTypeService = service;
	}

}