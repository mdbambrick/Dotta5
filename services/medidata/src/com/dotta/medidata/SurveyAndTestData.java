/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * SurveyAndTestData generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`survey_and_test_data`")
public class SurveyAndTestData implements Serializable {

    private Integer id;
    private int patientId;
    private int allergyId;
    private int symptomId;
    private int result;
    private int sessionId;
    private int dataSource;
    private int currentStatus;
    private Timestamp datetime;
    private Integer ranking = 0;
    private Integer colour = 0;
    private DataSource dataSourceByDataSource;
    private Patients patients;
    private Symptoms symptoms;
    private Allergies allergies;
    private Sessions sessions;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`patient_id`", nullable = false, scale = 0, precision = 10)
    public int getPatientId() {
        return this.patientId;
    }

    public void setPatientId(int patientId) {
        this.patientId = patientId;
    }

    @Column(name = "`allergy_id`", nullable = false, scale = 0, precision = 10)
    public int getAllergyId() {
        return this.allergyId;
    }

    public void setAllergyId(int allergyId) {
        this.allergyId = allergyId;
    }

    @Column(name = "`symptom_id`", nullable = false, scale = 0, precision = 10)
    public int getSymptomId() {
        return this.symptomId;
    }

    public void setSymptomId(int symptomId) {
        this.symptomId = symptomId;
    }

    @Column(name = "`result`", nullable = false, scale = 0, precision = 10)
    public int getResult() {
        return this.result;
    }

    public void setResult(int result) {
        this.result = result;
    }

    @Column(name = "`session_id`", nullable = false, scale = 0, precision = 10)
    public int getSessionId() {
        return this.sessionId;
    }

    public void setSessionId(int sessionId) {
        this.sessionId = sessionId;
    }

    @Column(name = "`data_source`", nullable = false, scale = 0, precision = 10)
    public int getDataSource() {
        return this.dataSource;
    }

    public void setDataSource(int dataSource) {
        this.dataSource = dataSource;
    }

    @Column(name = "`current_status`", nullable = false, scale = 0, precision = 10)
    public int getCurrentStatus() {
        return this.currentStatus;
    }

    public void setCurrentStatus(int currentStatus) {
        this.currentStatus = currentStatus;
    }

    @Column(name = "`datetime`", nullable = false)
    public Timestamp getDatetime() {
        return this.datetime;
    }

    public void setDatetime(Timestamp datetime) {
        this.datetime = datetime;
    }

    @Column(name = "`ranking`", nullable = true, scale = 9, precision = 22)
    public Integer getRanking() {
        return this.ranking;
    }

    public void setRanking(Integer ranking) {
        this.ranking = ranking;
    }

    @Column(name = "`colour`", nullable = true, scale = 0, precision = 10)
    public Integer getColour() {
        return this.colour;
    }

    public void setColour(Integer colour) {
        this.colour = colour;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`data_source`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_survey_data_source1`"))
    @Fetch(FetchMode.JOIN)
    public DataSource getDataSourceByDataSource() {
        return this.dataSourceByDataSource;
    }

    public void setDataSourceByDataSource(DataSource dataSourceByDataSource) {
        if(dataSourceByDataSource != null) {
            this.dataSource = dataSourceByDataSource.getId();
        }

        this.dataSourceByDataSource = dataSourceByDataSource;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`patient_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_survey_and_test_data_patients1`"))
    @Fetch(FetchMode.JOIN)
    public Patients getPatients() {
        return this.patients;
    }

    public void setPatients(Patients patients) {
        if(patients != null) {
            this.patientId = patients.getId();
        }

        this.patients = patients;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`symptom_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_survey_and_test_data_symptoms1`"))
    @Fetch(FetchMode.JOIN)
    public Symptoms getSymptoms() {
        return this.symptoms;
    }

    public void setSymptoms(Symptoms symptoms) {
        if(symptoms != null) {
            this.symptomId = symptoms.getId();
        }

        this.symptoms = symptoms;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`allergy_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_survey_and_test_data_allergies1`"))
    @Fetch(FetchMode.JOIN)
    public Allergies getAllergies() {
        return this.allergies;
    }

    public void setAllergies(Allergies allergies) {
        if(allergies != null) {
            this.allergyId = allergies.getId();
        }

        this.allergies = allergies;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`session_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_survey_and_test_data_sessions1`"))
    @Fetch(FetchMode.JOIN)
    public Sessions getSessions() {
        return this.sessions;
    }

    public void setSessions(Sessions sessions) {
        if(sessions != null) {
            this.sessionId = sessions.getId();
        }

        this.sessions = sessions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SurveyAndTestData)) return false;
        final SurveyAndTestData surveyAndTestData = (SurveyAndTestData) o;
        return Objects.equals(getId(), surveyAndTestData.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}