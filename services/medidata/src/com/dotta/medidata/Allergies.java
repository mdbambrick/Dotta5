/*Copyright (c) 2018-2019 medidesign.co.uk All Rights Reserved.
 This software is the confidential and proprietary information of medidesign.co.uk You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medidesign.co.uk*/
package com.dotta.medidata;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Allergies generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`allergies`")
public class Allergies implements Serializable {

    private Integer id;
    private String allergyName;
    private int allergyCategory;
    private Integer allergySet;
    private Integer babyFlag;
    private Integer childFlag;
    private Integer adultFlag;
    private String scientificName;
    private Integer childSequence;
    private Integer adultSequence;
    private String notes;
    private String iconUrl;
    private BigDecimal severityDefault;
    private BigDecimal populationRate;
    private AllergySets allergySets;
    private AllergyCategory allergyCategoryByAllergyCategory;
    private List<CompoundsAllergies> compoundsAllergieses;
    private List<SubstitutesAllergies> substitutesAllergieses;
    private List<SurveyAndTestData> surveyAndTestDatas;
    private List<SynonymAllergies> synonymAllergieses;

    @Id
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`allergy_name`", nullable = false, length = 65535)
    public String getAllergyName() {
        return this.allergyName;
    }

    public void setAllergyName(String allergyName) {
        this.allergyName = allergyName;
    }

    @Column(name = "`allergy_category`", nullable = false, scale = 0, precision = 10)
    public int getAllergyCategory() {
        return this.allergyCategory;
    }

    public void setAllergyCategory(int allergyCategory) {
        this.allergyCategory = allergyCategory;
    }

    @Column(name = "`allergy_set`", nullable = true, scale = 0, precision = 10)
    public Integer getAllergySet() {
        return this.allergySet;
    }

    public void setAllergySet(Integer allergySet) {
        this.allergySet = allergySet;
    }

    @Column(name = "`baby_flag`", nullable = true, scale = 0, precision = 10)
    public Integer getBabyFlag() {
        return this.babyFlag;
    }

    public void setBabyFlag(Integer babyFlag) {
        this.babyFlag = babyFlag;
    }

    @Column(name = "`child_flag`", nullable = true, scale = 0, precision = 10)
    public Integer getChildFlag() {
        return this.childFlag;
    }

    public void setChildFlag(Integer childFlag) {
        this.childFlag = childFlag;
    }

    @Column(name = "`adult_flag`", nullable = true, scale = 0, precision = 10)
    public Integer getAdultFlag() {
        return this.adultFlag;
    }

    public void setAdultFlag(Integer adultFlag) {
        this.adultFlag = adultFlag;
    }

    @Column(name = "`scientific_name`", nullable = true, length = 65535)
    public String getScientificName() {
        return this.scientificName;
    }

    public void setScientificName(String scientificName) {
        this.scientificName = scientificName;
    }

    @Column(name = "`child_sequence`", nullable = true, scale = 0, precision = 10)
    public Integer getChildSequence() {
        return this.childSequence;
    }

    public void setChildSequence(Integer childSequence) {
        this.childSequence = childSequence;
    }

    @Column(name = "`adult_sequence`", nullable = true, scale = 0, precision = 10)
    public Integer getAdultSequence() {
        return this.adultSequence;
    }

    public void setAdultSequence(Integer adultSequence) {
        this.adultSequence = adultSequence;
    }

    @Column(name = "`notes`", nullable = true, length = 65535)
    public String getNotes() {
        return this.notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    @Column(name = "`icon_url`", nullable = true, length = 65535)
    public String getIconUrl() {
        return this.iconUrl;
    }

    public void setIconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
    }

    @Column(name = "`severity_default`", nullable = true, scale = 9, precision = 22)
    public BigDecimal getSeverityDefault() {
        return this.severityDefault;
    }

    public void setSeverityDefault(BigDecimal severityDefault) {
        this.severityDefault = severityDefault;
    }

    @Column(name = "`population_rate`", nullable = true, scale = 9, precision = 22)
    public BigDecimal getPopulationRate() {
        return this.populationRate;
    }

    public void setPopulationRate(BigDecimal populationRate) {
        this.populationRate = populationRate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`allergy_set`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_allergies_allergy_sets1`"))
    @Fetch(FetchMode.JOIN)
    public AllergySets getAllergySets() {
        return this.allergySets;
    }

    public void setAllergySets(AllergySets allergySets) {
        if(allergySets != null) {
            this.allergySet = allergySets.getId();
        }

        this.allergySets = allergySets;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`allergy_category`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_allergies_allergy_category1`"))
    @Fetch(FetchMode.JOIN)
    public AllergyCategory getAllergyCategoryByAllergyCategory() {
        return this.allergyCategoryByAllergyCategory;
    }

    public void setAllergyCategoryByAllergyCategory(AllergyCategory allergyCategoryByAllergyCategory) {
        if(allergyCategoryByAllergyCategory != null) {
            this.allergyCategory = allergyCategoryByAllergyCategory.getId();
        }

        this.allergyCategoryByAllergyCategory = allergyCategoryByAllergyCategory;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "allergies")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<CompoundsAllergies> getCompoundsAllergieses() {
        return this.compoundsAllergieses;
    }

    public void setCompoundsAllergieses(List<CompoundsAllergies> compoundsAllergieses) {
        this.compoundsAllergieses = compoundsAllergieses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "allergies")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<SubstitutesAllergies> getSubstitutesAllergieses() {
        return this.substitutesAllergieses;
    }

    public void setSubstitutesAllergieses(List<SubstitutesAllergies> substitutesAllergieses) {
        this.substitutesAllergieses = substitutesAllergieses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "allergies")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<SurveyAndTestData> getSurveyAndTestDatas() {
        return this.surveyAndTestDatas;
    }

    public void setSurveyAndTestDatas(List<SurveyAndTestData> surveyAndTestDatas) {
        this.surveyAndTestDatas = surveyAndTestDatas;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "allergies")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<SynonymAllergies> getSynonymAllergieses() {
        return this.synonymAllergieses;
    }

    public void setSynonymAllergieses(List<SynonymAllergies> synonymAllergieses) {
        this.synonymAllergieses = synonymAllergieses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Allergies)) return false;
        final Allergies allergies = (Allergies) o;
        return Objects.equals(getId(), allergies.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}